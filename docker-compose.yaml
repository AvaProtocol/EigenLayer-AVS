name: ava
services:
  aggregator:
    image: avaprotocol/avs
    command: ["aggregator"]
    build:
      context: .
      dockerfile: dockerfiles/aggregator.Dockerfile
    ports:
      - "2206:2206"
      - "1323:1323"
    networks:
      - ava
    environment:
      # Core configuration (required)
      - ETH_RPC_URL=${ETH_RPC_URL}
      - ETH_WS_URL=${ETH_WS_URL}
      
      # Private keys and secrets (should be provided via .env file)
      - ECDSA_PRIVATE_KEY=${ECDSA_PRIVATE_KEY}
      - CONTROLLER_PRIVATE_KEY=${CONTROLLER_PRIVATE_KEY}
      - JWT_SECRET=${JWT_SECRET}
      
      # API keys and tokens
      - TENDERLY_ACCESS_KEY=${TENDERLY_ACCESS_KEY}
      - AP_NOTIFY_BOT_TOKEN=${AP_NOTIFY_BOT_TOKEN}
      - SENDGRID_KEY=${SENDGRID_KEY}
      - THEGRAPH_API_KEY=${THEGRAPH_API_KEY}
      
      # Smart wallet configuration
      - BUNDLER_URL=${BUNDLER_URL}
      - MAX_WALLETS_PER_OWNER=${MAX_WALLETS_PER_OWNER:-5}
      
      # Optional overrides
      - TENDERLY_ACCOUNT=${TENDERLY_ACCOUNT}
      - TENDERLY_PROJECT=${TENDERLY_PROJECT}
      - SERVER_NAME=${SERVER_NAME:-aggregator-docker}
    volumes:
      - ./config:/app/config
      - db-data:/tmp/app-avs
    healthcheck:
      test: curl --fail http://localhost:1323/up || exit 1
      interval: 3s
      retries: 15
      start_period: 3s
      timeout: 3s

  operator:
    image: avaprotocol/avs
    command: ["operator"]
    build:
      context: .
      dockerfile: dockerfiles/operator.Dockerfile
    networks:
      - ava
    environment:
      # Core configuration (required)
      - ETH_RPC_URL=${ETH_RPC_URL}
      - ETH_WS_URL=${ETH_WS_URL}
      
      # Operator private key
      - ECDSA_PRIVATE_KEY=${OPERATOR_PRIVATE_KEY}
      
      # Aggregator connection
      - AGGREGATOR_ADDRESS=${AGGREGATOR_ADDRESS:-aggregator:2206}
      
      # Optional overrides
      - SERVER_NAME=${OPERATOR_SERVER_NAME:-operator-docker}
    volumes:
      - ./config:/app/config
    depends_on:
      aggregator:
        condition: service_healthy
  grpcui:
    image: fullstorydev/grpcui
    command: ["-plaintext", "aggregator:2206"]
    ports: 
      - "8080:8080"
    networks:
      - ava
    depends_on:
      aggregator:
        condition: service_healthy
volumes:
  db-data:

networks:
  # The presence of these objects is sufficient to define them
  ava: {}
