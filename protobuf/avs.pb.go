// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.12.4
// source: avs.proto

package avsproto

import (
	any1 "github.com/golang/protobuf/ptypes/any"
	_struct "github.com/golang/protobuf/ptypes/struct"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// gRPC internal error code use up to 17, we extend and start from 1000 to avoid any conflict
// Guide: https://grpc.io/docs/guides/error/
// Go: https://github.com/grpc/grpc-go/blob/master/codes/codes.go#L199
type Error int32

const (
	// An error that happen when the app can be recovered but the cause is unknow, rarely use, we try to use specific error as much as we can
	Error_UnknowError Error = 0
	// internal rpc node error
	Error_RpcNodeError Error = 1000
	// storage system isn't available to respond to query
	Error_StorageUnavailable Error = 2000
	Error_StorageWriteError  Error = 2001
	// target chain of smart wallet is error and cannot used to determine smartwallet info
	Error_SmartWalletRpcError      Error = 6000
	Error_SmartWalletNotFoundError Error = 6001
	// Error occurs when we failed to migrate task data and it cannot be decode
	Error_TaskDataCorrupted    Error = 7000
	Error_TaskDataMissingError Error = 7001
	// Trigger Task failed
	Error_TaskTriggerError Error = 7003
)

// Enum value maps for Error.
var (
	Error_name = map[int32]string{
		0:    "UnknowError",
		1000: "RpcNodeError",
		2000: "StorageUnavailable",
		2001: "StorageWriteError",
		6000: "SmartWalletRpcError",
		6001: "SmartWalletNotFoundError",
		7000: "TaskDataCorrupted",
		7001: "TaskDataMissingError",
		7003: "TaskTriggerError",
	}
	Error_value = map[string]int32{
		"UnknowError":              0,
		"RpcNodeError":             1000,
		"StorageUnavailable":       2000,
		"StorageWriteError":        2001,
		"SmartWalletRpcError":      6000,
		"SmartWalletNotFoundError": 6001,
		"TaskDataCorrupted":        7000,
		"TaskDataMissingError":     7001,
		"TaskTriggerError":         7003,
	}
)

func (x Error) Enum() *Error {
	p := new(Error)
	*p = x
	return p
}

func (x Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Error) Descriptor() protoreflect.EnumDescriptor {
	return file_avs_proto_enumTypes[0].Descriptor()
}

func (Error) Type() protoreflect.EnumType {
	return &file_avs_proto_enumTypes[0]
}

func (x Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Error.Descriptor instead.
func (Error) EnumDescriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{0}
}

// TaskStatus represents status of the task. The transition is as follow
type TaskStatus int32

const (
	TaskStatus_Active TaskStatus = 0
	// Task is completd when it's reaching its max_execution or its expiration time
	TaskStatus_Completed TaskStatus = 1
	TaskStatus_Failed    TaskStatus = 2
	TaskStatus_Canceled  TaskStatus = 3
	TaskStatus_Executing TaskStatus = 4
)

// Enum value maps for TaskStatus.
var (
	TaskStatus_name = map[int32]string{
		0: "Active",
		1: "Completed",
		2: "Failed",
		3: "Canceled",
		4: "Executing",
	}
	TaskStatus_value = map[string]int32{
		"Active":    0,
		"Completed": 1,
		"Failed":    2,
		"Canceled":  3,
		"Executing": 4,
	}
)

func (x TaskStatus) Enum() *TaskStatus {
	p := new(TaskStatus)
	*p = x
	return p
}

func (x TaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_avs_proto_enumTypes[1].Descriptor()
}

func (TaskStatus) Type() protoreflect.EnumType {
	return &file_avs_proto_enumTypes[1]
}

func (x TaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatus.Descriptor instead.
func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{1}
}

// Execution Status re-present a run of the task
type ExecutionStatus int32

const (
	ExecutionStatus_Queued   ExecutionStatus = 0
	ExecutionStatus_Finished ExecutionStatus = 2
)

// Enum value maps for ExecutionStatus.
var (
	ExecutionStatus_name = map[int32]string{
		0: "Queued",
		2: "Finished",
	}
	ExecutionStatus_value = map[string]int32{
		"Queued":   0,
		"Finished": 2,
	}
)

func (x ExecutionStatus) Enum() *ExecutionStatus {
	p := new(ExecutionStatus)
	*p = x
	return p
}

func (x ExecutionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_avs_proto_enumTypes[2].Descriptor()
}

func (ExecutionStatus) Type() protoreflect.EnumType {
	return &file_avs_proto_enumTypes[2]
}

func (x ExecutionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionStatus.Descriptor instead.
func (ExecutionStatus) EnumDescriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{2}
}

type CustomCodeLang int32

const (
	CustomCodeLang_JavaScript CustomCodeLang = 0
)

// Enum value maps for CustomCodeLang.
var (
	CustomCodeLang_name = map[int32]string{
		0: "JavaScript",
	}
	CustomCodeLang_value = map[string]int32{
		"JavaScript": 0,
	}
)

func (x CustomCodeLang) Enum() *CustomCodeLang {
	p := new(CustomCodeLang)
	*p = x
	return p
}

func (x CustomCodeLang) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CustomCodeLang) Descriptor() protoreflect.EnumDescriptor {
	return file_avs_proto_enumTypes[3].Descriptor()
}

func (CustomCodeLang) Type() protoreflect.EnumType {
	return &file_avs_proto_enumTypes[3]
}

func (x CustomCodeLang) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CustomCodeLang.Descriptor instead.
func (CustomCodeLang) EnumDescriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{3}
}

// This value isn't needed because when we query an execution or trigger a task, we know the trigger type
// But, The JS SDK needed this value probabaly to saving the lookup time when it only have execution id somehow
// So we added this value to the respose for the client to consume and use however it want
// Internaly we don't make use of this field.
// The client was map the field based on the one-off field number so we need to match this number with TaskTrigger.trigger_type
type TriggerReason_TriggerType int32

const (
	TriggerReason_Unset     TriggerReason_TriggerType = 0
	TriggerReason_Manual    TriggerReason_TriggerType = 2
	TriggerReason_FixedTime TriggerReason_TriggerType = 3
	TriggerReason_Cron      TriggerReason_TriggerType = 4
	TriggerReason_Block     TriggerReason_TriggerType = 5
	TriggerReason_Event     TriggerReason_TriggerType = 6
)

// Enum value maps for TriggerReason_TriggerType.
var (
	TriggerReason_TriggerType_name = map[int32]string{
		0: "Unset",
		2: "Manual",
		3: "FixedTime",
		4: "Cron",
		5: "Block",
		6: "Event",
	}
	TriggerReason_TriggerType_value = map[string]int32{
		"Unset":     0,
		"Manual":    2,
		"FixedTime": 3,
		"Cron":      4,
		"Block":     5,
		"Event":     6,
	}
)

func (x TriggerReason_TriggerType) Enum() *TriggerReason_TriggerType {
	p := new(TriggerReason_TriggerType)
	*p = x
	return p
}

func (x TriggerReason_TriggerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriggerReason_TriggerType) Descriptor() protoreflect.EnumDescriptor {
	return file_avs_proto_enumTypes[4].Descriptor()
}

func (TriggerReason_TriggerType) Type() protoreflect.EnumType {
	return &file_avs_proto_enumTypes[4]
}

func (x TriggerReason_TriggerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriggerReason_TriggerType.Descriptor instead.
func (TriggerReason_TriggerType) EnumDescriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{35, 0}
}

type IdReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IdReq) Reset() {
	*x = IdReq{}
	mi := &file_avs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdReq) ProtoMessage() {}

func (x *IdReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdReq.ProtoReflect.Descriptor instead.
func (*IdReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{0}
}

func (x *IdReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type FixedTimeCondition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Epochs        []int64                `protobuf:"varint,1,rep,packed,name=epochs,proto3" json:"epochs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FixedTimeCondition) Reset() {
	*x = FixedTimeCondition{}
	mi := &file_avs_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FixedTimeCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixedTimeCondition) ProtoMessage() {}

func (x *FixedTimeCondition) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixedTimeCondition.ProtoReflect.Descriptor instead.
func (*FixedTimeCondition) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{1}
}

func (x *FixedTimeCondition) GetEpochs() []int64 {
	if x != nil {
		return x.Epochs
	}
	return nil
}

// Simple timebase or cron syntax.
type CronCondition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Schedule      []string               `protobuf:"bytes,1,rep,name=schedule,proto3" json:"schedule,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CronCondition) Reset() {
	*x = CronCondition{}
	mi := &file_avs_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CronCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronCondition) ProtoMessage() {}

func (x *CronCondition) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronCondition.ProtoReflect.Descriptor instead.
func (*CronCondition) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{2}
}

func (x *CronCondition) GetSchedule() []string {
	if x != nil {
		return x.Schedule
	}
	return nil
}

type BlockCondition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Interval      int64                  `protobuf:"varint,1,opt,name=interval,proto3" json:"interval,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockCondition) Reset() {
	*x = BlockCondition{}
	mi := &file_avs_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockCondition) ProtoMessage() {}

func (x *BlockCondition) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockCondition.ProtoReflect.Descriptor instead.
func (*BlockCondition) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{3}
}

func (x *BlockCondition) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

// EventCondition is a filter to match on an event. It's adhoc logic expression re-present in an array to match an ethereum event
type EventCondition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// an array of filter to be mach, as soon as any element of the array mach, the trigger is fired.
	Matcher       []*EventCondition_Matcher `protobuf:"bytes,1,rep,name=matcher,proto3" json:"matcher,omitempty"`
	Expression    string                    `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventCondition) Reset() {
	*x = EventCondition{}
	mi := &file_avs_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventCondition) ProtoMessage() {}

func (x *EventCondition) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventCondition.ProtoReflect.Descriptor instead.
func (*EventCondition) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{4}
}

func (x *EventCondition) GetMatcher() []*EventCondition_Matcher {
	if x != nil {
		return x.Matcher
	}
	return nil
}

func (x *EventCondition) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

type TaskTrigger struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to TriggerType:
	//
	//	*TaskTrigger_Manual
	//	*TaskTrigger_FixedTime
	//	*TaskTrigger_Cron
	//	*TaskTrigger_Block
	//	*TaskTrigger_Event
	TriggerType   isTaskTrigger_TriggerType `protobuf_oneof:"trigger_type"`
	Id            string                    `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskTrigger) Reset() {
	*x = TaskTrigger{}
	mi := &file_avs_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskTrigger) ProtoMessage() {}

func (x *TaskTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskTrigger.ProtoReflect.Descriptor instead.
func (*TaskTrigger) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{5}
}

func (x *TaskTrigger) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskTrigger) GetTriggerType() isTaskTrigger_TriggerType {
	if x != nil {
		return x.TriggerType
	}
	return nil
}

func (x *TaskTrigger) GetManual() bool {
	if x != nil {
		if x, ok := x.TriggerType.(*TaskTrigger_Manual); ok {
			return x.Manual
		}
	}
	return false
}

func (x *TaskTrigger) GetFixedTime() *FixedTimeCondition {
	if x != nil {
		if x, ok := x.TriggerType.(*TaskTrigger_FixedTime); ok {
			return x.FixedTime
		}
	}
	return nil
}

func (x *TaskTrigger) GetCron() *CronCondition {
	if x != nil {
		if x, ok := x.TriggerType.(*TaskTrigger_Cron); ok {
			return x.Cron
		}
	}
	return nil
}

func (x *TaskTrigger) GetBlock() *BlockCondition {
	if x != nil {
		if x, ok := x.TriggerType.(*TaskTrigger_Block); ok {
			return x.Block
		}
	}
	return nil
}

func (x *TaskTrigger) GetEvent() *EventCondition {
	if x != nil {
		if x, ok := x.TriggerType.(*TaskTrigger_Event); ok {
			return x.Event
		}
	}
	return nil
}

func (x *TaskTrigger) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type isTaskTrigger_TriggerType interface {
	isTaskTrigger_TriggerType()
}

type TaskTrigger_Manual struct {
	// manual task will not be check to be trigger, instead it can be trigger adhoc
	Manual bool `protobuf:"varint,2,opt,name=manual,proto3,oneof"`
}

type TaskTrigger_FixedTime struct {
	// run at a specific epoch, name inspired by unix `at` utility
	FixedTime *FixedTimeCondition `protobuf:"bytes,3,opt,name=fixed_time,json=fixedTime,proto3,oneof"`
}

type TaskTrigger_Cron struct {
	// interval such as every hour/day/ etc can be converted to cronsyntax by the sdk/studio
	Cron *CronCondition `protobuf:"bytes,4,opt,name=cron,proto3,oneof"`
}

type TaskTrigger_Block struct {
	// currently the only support syntax is every <x> blocks
	Block *BlockCondition `protobuf:"bytes,5,opt,name=block,proto3,oneof"`
}

type TaskTrigger_Event struct {
	// support filter by event expression such as topic0, topic1, topoc2 and event_data and contract_address
	Event *EventCondition `protobuf:"bytes,6,opt,name=event,proto3,oneof"`
}

func (*TaskTrigger_Manual) isTaskTrigger_TriggerType() {}

func (*TaskTrigger_FixedTime) isTaskTrigger_TriggerType() {}

func (*TaskTrigger_Cron) isTaskTrigger_TriggerType() {}

func (*TaskTrigger_Block) isTaskTrigger_TriggerType() {}

func (*TaskTrigger_Event) isTaskTrigger_TriggerType() {}

type ETHTransferNode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Destination   string                 `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	Amount        string                 `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ETHTransferNode) Reset() {
	*x = ETHTransferNode{}
	mi := &file_avs_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ETHTransferNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ETHTransferNode) ProtoMessage() {}

func (x *ETHTransferNode) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ETHTransferNode.ProtoReflect.Descriptor instead.
func (*ETHTransferNode) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{6}
}

func (x *ETHTransferNode) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *ETHTransferNode) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type ContractWriteNode struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ContractAddress string                 `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	CallData        string                 `protobuf:"bytes,2,opt,name=call_data,json=callData,proto3" json:"call_data,omitempty"`
	// The ABI is only required to decode the return value of a method call.
	// If we don't need the result and only want the transaction hash (which is usually sufficient),
	// then we don't need to provide the ABI.
	ContractAbi   string `protobuf:"bytes,3,opt,name=contract_abi,json=contractAbi,proto3" json:"contract_abi,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractWriteNode) Reset() {
	*x = ContractWriteNode{}
	mi := &file_avs_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractWriteNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractWriteNode) ProtoMessage() {}

func (x *ContractWriteNode) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractWriteNode.ProtoReflect.Descriptor instead.
func (*ContractWriteNode) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{7}
}

func (x *ContractWriteNode) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *ContractWriteNode) GetCallData() string {
	if x != nil {
		return x.CallData
	}
	return ""
}

func (x *ContractWriteNode) GetContractAbi() string {
	if x != nil {
		return x.ContractAbi
	}
	return ""
}

type ContractReadNode struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ContractAddress string                 `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	CallData        string                 `protobuf:"bytes,2,opt,name=call_data,json=callData,proto3" json:"call_data,omitempty"`
	// The ABI are required to decode the return value and pass it to the next step.
	// Currently, we need to provide the contract ABI as a JSON string.
	// We don't need to include the full ABI—just enough to decode the method call.
	ContractAbi   string `protobuf:"bytes,3,opt,name=contract_abi,json=contractAbi,proto3" json:"contract_abi,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractReadNode) Reset() {
	*x = ContractReadNode{}
	mi := &file_avs_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractReadNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractReadNode) ProtoMessage() {}

func (x *ContractReadNode) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractReadNode.ProtoReflect.Descriptor instead.
func (*ContractReadNode) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{8}
}

func (x *ContractReadNode) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *ContractReadNode) GetCallData() string {
	if x != nil {
		return x.CallData
	}
	return ""
}

func (x *ContractReadNode) GetContractAbi() string {
	if x != nil {
		return x.ContractAbi
	}
	return ""
}

type GraphQLQueryNode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Query         string                 `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	Variables     map[string]string      `protobuf:"bytes,3,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GraphQLQueryNode) Reset() {
	*x = GraphQLQueryNode{}
	mi := &file_avs_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GraphQLQueryNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLQueryNode) ProtoMessage() {}

func (x *GraphQLQueryNode) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLQueryNode.ProtoReflect.Descriptor instead.
func (*GraphQLQueryNode) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{9}
}

func (x *GraphQLQueryNode) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GraphQLQueryNode) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *GraphQLQueryNode) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

type RestAPINode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Headers       map[string]string      `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Body          string                 `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	Method        string                 `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RestAPINode) Reset() {
	*x = RestAPINode{}
	mi := &file_avs_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestAPINode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestAPINode) ProtoMessage() {}

func (x *RestAPINode) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestAPINode.ProtoReflect.Descriptor instead.
func (*RestAPINode) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{10}
}

func (x *RestAPINode) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *RestAPINode) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *RestAPINode) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *RestAPINode) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

type CustomCodeNode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lang          CustomCodeLang         `protobuf:"varint,1,opt,name=lang,proto3,enum=aggregator.CustomCodeLang" json:"lang,omitempty"`
	Source        string                 `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomCodeNode) Reset() {
	*x = CustomCodeNode{}
	mi := &file_avs_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomCodeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomCodeNode) ProtoMessage() {}

func (x *CustomCodeNode) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomCodeNode.ProtoReflect.Descriptor instead.
func (*CustomCodeNode) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{11}
}

func (x *CustomCodeNode) GetLang() CustomCodeLang {
	if x != nil {
		return x.Lang
	}
	return CustomCodeLang_JavaScript
}

func (x *CustomCodeNode) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type Condition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Expression    string                 `protobuf:"bytes,3,opt,name=expression,proto3" json:"expression,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Condition) Reset() {
	*x = Condition{}
	mi := &file_avs_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{12}
}

func (x *Condition) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Condition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Condition) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

type BranchNode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Conditions    []*Condition           `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BranchNode) Reset() {
	*x = BranchNode{}
	mi := &file_avs_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BranchNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchNode) ProtoMessage() {}

func (x *BranchNode) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchNode.ProtoReflect.Descriptor instead.
func (*BranchNode) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{13}
}

func (x *BranchNode) GetConditions() []*Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

type FilterNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filter node acts like .select or .filter to pluck out element in an array that evaluate the expression to true
	Expression string `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	// input is the id of the node that we will fetch its value from and feed into the iteration.
	// this input has to be an array. Currently we only know about the error at runtime
	Input         string `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilterNode) Reset() {
	*x = FilterNode{}
	mi := &file_avs_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterNode) ProtoMessage() {}

func (x *FilterNode) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterNode.ProtoReflect.Descriptor instead.
func (*FilterNode) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{14}
}

func (x *FilterNode) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *FilterNode) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

// LoopNode currently not support, but we pre-defined to reverse the field id
type LoopNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// this is the variable name of any previous step so we can took it
	Input string `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	// a var that the function can refer to it
	IterVal string `protobuf:"bytes,2,opt,name=iter_val,json=iterVal,proto3" json:"iter_val,omitempty"`
	IterKey string `protobuf:"bytes,3,opt,name=iter_key,json=iterKey,proto3" json:"iter_key,omitempty"`
	// inside the runner, it can access to the current value of the loop iteration through the iter_val/iter_key above
	//
	// Types that are valid to be assigned to Runner:
	//
	//	*LoopNode_EthTransfer
	//	*LoopNode_ContractWrite
	//	*LoopNode_ContractRead
	//	*LoopNode_GraphqlDataQuery
	//	*LoopNode_RestApi
	//	*LoopNode_CustomCode
	Runner        isLoopNode_Runner `protobuf_oneof:"runner"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoopNode) Reset() {
	*x = LoopNode{}
	mi := &file_avs_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoopNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoopNode) ProtoMessage() {}

func (x *LoopNode) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoopNode.ProtoReflect.Descriptor instead.
func (*LoopNode) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{15}
}

func (x *LoopNode) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *LoopNode) GetIterVal() string {
	if x != nil {
		return x.IterVal
	}
	return ""
}

func (x *LoopNode) GetIterKey() string {
	if x != nil {
		return x.IterKey
	}
	return ""
}

func (x *LoopNode) GetRunner() isLoopNode_Runner {
	if x != nil {
		return x.Runner
	}
	return nil
}

func (x *LoopNode) GetEthTransfer() *ETHTransferNode {
	if x != nil {
		if x, ok := x.Runner.(*LoopNode_EthTransfer); ok {
			return x.EthTransfer
		}
	}
	return nil
}

func (x *LoopNode) GetContractWrite() *ContractWriteNode {
	if x != nil {
		if x, ok := x.Runner.(*LoopNode_ContractWrite); ok {
			return x.ContractWrite
		}
	}
	return nil
}

func (x *LoopNode) GetContractRead() *ContractReadNode {
	if x != nil {
		if x, ok := x.Runner.(*LoopNode_ContractRead); ok {
			return x.ContractRead
		}
	}
	return nil
}

func (x *LoopNode) GetGraphqlDataQuery() *GraphQLQueryNode {
	if x != nil {
		if x, ok := x.Runner.(*LoopNode_GraphqlDataQuery); ok {
			return x.GraphqlDataQuery
		}
	}
	return nil
}

func (x *LoopNode) GetRestApi() *RestAPINode {
	if x != nil {
		if x, ok := x.Runner.(*LoopNode_RestApi); ok {
			return x.RestApi
		}
	}
	return nil
}

func (x *LoopNode) GetCustomCode() *CustomCodeNode {
	if x != nil {
		if x, ok := x.Runner.(*LoopNode_CustomCode); ok {
			return x.CustomCode
		}
	}
	return nil
}

type isLoopNode_Runner interface {
	isLoopNode_Runner()
}

type LoopNode_EthTransfer struct {
	// Transfer eth require no calldata etc, just a destination address and an eth amount to be sent
	EthTransfer *ETHTransferNode `protobuf:"bytes,10,opt,name=eth_transfer,json=ethTransfer,proto3,oneof"`
}

type LoopNode_ContractWrite struct {
	// Run one ore more contracts. The call call also be batched with tool like
	// multicall to wrap many calls. in a contract write, we need to generate signature and send as userops.
	ContractWrite *ContractWriteNode `protobuf:"bytes,11,opt,name=contract_write,json=contractWrite,proto3,oneof"`
}

type LoopNode_ContractRead struct {
	// read data fron a target contract
	ContractRead *ContractReadNode `protobuf:"bytes,12,opt,name=contract_read,json=contractRead,proto3,oneof"`
}

type LoopNode_GraphqlDataQuery struct {
	// Make call to a graphql endpoint
	GraphqlDataQuery *GraphQLQueryNode `protobuf:"bytes,13,opt,name=graphql_data_query,json=graphqlDataQuery,proto3,oneof"`
}

type LoopNode_RestApi struct {
	// Make call to a HTTP endpoint
	RestApi *RestAPINode `protobuf:"bytes,14,opt,name=rest_api,json=restApi,proto3,oneof"`
}

type LoopNode_CustomCode struct {
	CustomCode *CustomCodeNode `protobuf:"bytes,15,opt,name=custom_code,json=customCode,proto3,oneof"`
}

func (*LoopNode_EthTransfer) isLoopNode_Runner() {}

func (*LoopNode_ContractWrite) isLoopNode_Runner() {}

func (*LoopNode_ContractRead) isLoopNode_Runner() {}

func (*LoopNode_GraphqlDataQuery) isLoopNode_Runner() {}

func (*LoopNode_RestApi) isLoopNode_Runner() {}

func (*LoopNode_CustomCode) isLoopNode_Runner() {}

// The edge is relationship or direct between node
type TaskEdge struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Source        string                 `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Target        string                 `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskEdge) Reset() {
	*x = TaskEdge{}
	mi := &file_avs_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskEdge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskEdge) ProtoMessage() {}

func (x *TaskEdge) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskEdge.ProtoReflect.Descriptor instead.
func (*TaskEdge) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{16}
}

func (x *TaskEdge) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskEdge) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *TaskEdge) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type TaskNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name  string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// based on node_type one and only one of these field are set
	//
	// Types that are valid to be assigned to TaskType:
	//
	//	*TaskNode_EthTransfer
	//	*TaskNode_ContractWrite
	//	*TaskNode_ContractRead
	//	*TaskNode_GraphqlQuery
	//	*TaskNode_RestApi
	//	*TaskNode_Branch
	//	*TaskNode_Filter
	//	*TaskNode_Loop
	//	*TaskNode_CustomCode
	TaskType      isTaskNode_TaskType `protobuf_oneof:"task_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskNode) Reset() {
	*x = TaskNode{}
	mi := &file_avs_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskNode) ProtoMessage() {}

func (x *TaskNode) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskNode.ProtoReflect.Descriptor instead.
func (*TaskNode) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{17}
}

func (x *TaskNode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskNode) GetTaskType() isTaskNode_TaskType {
	if x != nil {
		return x.TaskType
	}
	return nil
}

func (x *TaskNode) GetEthTransfer() *ETHTransferNode {
	if x != nil {
		if x, ok := x.TaskType.(*TaskNode_EthTransfer); ok {
			return x.EthTransfer
		}
	}
	return nil
}

func (x *TaskNode) GetContractWrite() *ContractWriteNode {
	if x != nil {
		if x, ok := x.TaskType.(*TaskNode_ContractWrite); ok {
			return x.ContractWrite
		}
	}
	return nil
}

func (x *TaskNode) GetContractRead() *ContractReadNode {
	if x != nil {
		if x, ok := x.TaskType.(*TaskNode_ContractRead); ok {
			return x.ContractRead
		}
	}
	return nil
}

func (x *TaskNode) GetGraphqlQuery() *GraphQLQueryNode {
	if x != nil {
		if x, ok := x.TaskType.(*TaskNode_GraphqlQuery); ok {
			return x.GraphqlQuery
		}
	}
	return nil
}

func (x *TaskNode) GetRestApi() *RestAPINode {
	if x != nil {
		if x, ok := x.TaskType.(*TaskNode_RestApi); ok {
			return x.RestApi
		}
	}
	return nil
}

func (x *TaskNode) GetBranch() *BranchNode {
	if x != nil {
		if x, ok := x.TaskType.(*TaskNode_Branch); ok {
			return x.Branch
		}
	}
	return nil
}

func (x *TaskNode) GetFilter() *FilterNode {
	if x != nil {
		if x, ok := x.TaskType.(*TaskNode_Filter); ok {
			return x.Filter
		}
	}
	return nil
}

func (x *TaskNode) GetLoop() *LoopNode {
	if x != nil {
		if x, ok := x.TaskType.(*TaskNode_Loop); ok {
			return x.Loop
		}
	}
	return nil
}

func (x *TaskNode) GetCustomCode() *CustomCodeNode {
	if x != nil {
		if x, ok := x.TaskType.(*TaskNode_CustomCode); ok {
			return x.CustomCode
		}
	}
	return nil
}

type isTaskNode_TaskType interface {
	isTaskNode_TaskType()
}

type TaskNode_EthTransfer struct {
	// Transfer eth require no calldata etc, just a destination address and an eth amount to be sent
	EthTransfer *ETHTransferNode `protobuf:"bytes,10,opt,name=eth_transfer,json=ethTransfer,proto3,oneof"`
}

type TaskNode_ContractWrite struct {
	// Run one ore more contracts. The call call also be batched with tool like
	// multicall to wrap many calls. in a contract write, we need to generate signature and send as userops.
	ContractWrite *ContractWriteNode `protobuf:"bytes,11,opt,name=contract_write,json=contractWrite,proto3,oneof"`
}

type TaskNode_ContractRead struct {
	// read data fron a target contract
	ContractRead *ContractReadNode `protobuf:"bytes,12,opt,name=contract_read,json=contractRead,proto3,oneof"`
}

type TaskNode_GraphqlQuery struct {
	// Make call to a graphql endpoint
	GraphqlQuery *GraphQLQueryNode `protobuf:"bytes,13,opt,name=graphql_query,json=graphqlQuery,proto3,oneof"`
}

type TaskNode_RestApi struct {
	// Make call to a HTTP endpoint
	RestApi *RestAPINode `protobuf:"bytes,14,opt,name=rest_api,json=restApi,proto3,oneof"`
}

type TaskNode_Branch struct {
	// CustomCode allow to run arbitraty JavaScript.
	Branch *BranchNode `protobuf:"bytes,15,opt,name=branch,proto3,oneof"`
}

type TaskNode_Filter struct {
	Filter *FilterNode `protobuf:"bytes,16,opt,name=filter,proto3,oneof"`
}

type TaskNode_Loop struct {
	Loop *LoopNode `protobuf:"bytes,17,opt,name=loop,proto3,oneof"`
}

type TaskNode_CustomCode struct {
	CustomCode *CustomCodeNode `protobuf:"bytes,18,opt,name=custom_code,json=customCode,proto3,oneof"`
}

func (*TaskNode_EthTransfer) isTaskNode_TaskType() {}

func (*TaskNode_ContractWrite) isTaskNode_TaskType() {}

func (*TaskNode_ContractRead) isTaskNode_TaskType() {}

func (*TaskNode_GraphqlQuery) isTaskNode_TaskType() {}

func (*TaskNode_RestApi) isTaskNode_TaskType() {}

func (*TaskNode_Branch) isTaskNode_TaskType() {}

func (*TaskNode_Filter) isTaskNode_TaskType() {}

func (*TaskNode_Loop) isTaskNode_TaskType() {}

func (*TaskNode_CustomCode) isTaskNode_TaskType() {}

type Execution struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// timestamp when execution started (in milliseconds)
	StartAt int64 `protobuf:"varint,2,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	// timestamp when execution ended (in milliseconds)
	EndAt       int64             `protobuf:"varint,3,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	Success     bool              `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	Error       string            `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	Reason      *TriggerReason    `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
	Steps       []*Execution_Step `protobuf:"bytes,8,rep,name=steps,proto3" json:"steps,omitempty"`
	TriggerName string            `protobuf:"bytes,9,opt,name=trigger_name,json=triggerName,proto3" json:"trigger_name,omitempty"`
	// Despite the name outputData this is actually the data after we enrich based the metadata at the point where the event is trigger.
	// Example at the time of triggering a transfer event, the only ifformation we had is ERC20 address, the topics, the from/to and amount, the log id and transaction hash
	// We then query Etherem RPC to find out more information such as token symbol, token decimal, parse the amount of out event raw data
	// Reference ticket: https://github.com/AvaProtocol/EigenLayer-AVS/issues/151
	//
	// For transfer event, we had a set of fields
	// Chris define them here https://avaprotocol.slack.com/archives/D0570FNE0SJ/p1733336982524899
	// // The selected fields of the response to return to the client
	//
	//	const FILTERED_FIELDS = [
	//	  "token_name",
	//	  "token_symbol",
	//	  "token_decimals",
	//	  "transaction_hash",
	//	  "address",
	//	  "block_timestamp",
	//	  "block_number",
	//	  "from_address",
	//	  "to_address",
	//	  "value",
	//	  "value_formatted", // Formatted value
	//	  "transaction_index",
	//	  "log_index",
	//	];
	//
	// For non transfer event, we just have the raw data
	// For block event, we had the number at that trigger is meet.
	// For time trigger, it is the epoch
	//
	// Types that are valid to be assigned to OutputData:
	//
	//	*Execution_TransferLog
	//	*Execution_EvmLog
	//	*Execution_Block
	//	*Execution_Time
	OutputData    isExecution_OutputData `protobuf_oneof:"output_data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Execution) Reset() {
	*x = Execution{}
	mi := &file_avs_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Execution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Execution) ProtoMessage() {}

func (x *Execution) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Execution.ProtoReflect.Descriptor instead.
func (*Execution) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{18}
}

func (x *Execution) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Execution) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *Execution) GetEndAt() int64 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

func (x *Execution) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Execution) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Execution) GetReason() *TriggerReason {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *Execution) GetSteps() []*Execution_Step {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *Execution) GetTriggerName() string {
	if x != nil {
		return x.TriggerName
	}
	return ""
}

func (x *Execution) GetOutputData() isExecution_OutputData {
	if x != nil {
		return x.OutputData
	}
	return nil
}

func (x *Execution) GetTransferLog() *Execution_TransferLogOutput {
	if x != nil {
		if x, ok := x.OutputData.(*Execution_TransferLog); ok {
			return x.TransferLog
		}
	}
	return nil
}

func (x *Execution) GetEvmLog() *Evm_Log {
	if x != nil {
		if x, ok := x.OutputData.(*Execution_EvmLog); ok {
			return x.EvmLog
		}
	}
	return nil
}

func (x *Execution) GetBlock() *Execution_BlockOutput {
	if x != nil {
		if x, ok := x.OutputData.(*Execution_Block); ok {
			return x.Block
		}
	}
	return nil
}

func (x *Execution) GetTime() *Execution_TimeOutput {
	if x != nil {
		if x, ok := x.OutputData.(*Execution_Time); ok {
			return x.Time
		}
	}
	return nil
}

type isExecution_OutputData interface {
	isExecution_OutputData()
}

type Execution_TransferLog struct {
	TransferLog *Execution_TransferLogOutput `protobuf:"bytes,10,opt,name=transfer_log,json=transferLog,proto3,oneof"`
}

type Execution_EvmLog struct {
	// When the trigger is not a transfer event, we will have a raw event output only
	// These shape of data is https://docs.ethers.org/v6/api/providers/#Log
	EvmLog *Evm_Log `protobuf:"bytes,11,opt,name=evm_log,json=evmLog,proto3,oneof"`
}

type Execution_Block struct {
	Block *Execution_BlockOutput `protobuf:"bytes,12,opt,name=block,proto3,oneof"`
}

type Execution_Time struct {
	Time *Execution_TimeOutput `protobuf:"bytes,13,opt,name=time,proto3,oneof"`
}

func (*Execution_TransferLog) isExecution_OutputData() {}

func (*Execution_EvmLog) isExecution_OutputData() {}

func (*Execution_Block) isExecution_OutputData() {}

func (*Execution_Time) isExecution_OutputData() {}

type Task struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner              string                 `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	SmartWalletAddress string                 `protobuf:"bytes,3,opt,name=smart_wallet_address,json=smartWalletAddress,proto3" json:"smart_wallet_address,omitempty"`
	// task won't be check before this (timestamp in milliseconds)
	StartAt int64 `protobuf:"varint,4,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	// task won't be run/check after this (timestamp in milliseconds)
	ExpiredAt int64 `protobuf:"varint,5,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`
	// arbitrary data about this task. has a limit of 255 character
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// timestamp when task was completed (in milliseconds)
	CompletedAt int64 `protobuf:"varint,7,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	// limit on how many time this task can run. Set to 0 will make it run unlimited until cancelling or reaching its expired time
	MaxExecution int64 `protobuf:"varint,8,opt,name=max_execution,json=maxExecution,proto3" json:"max_execution,omitempty"`
	// return how many time this task has run
	TotalExecution int64 `protobuf:"varint,9,opt,name=total_execution,json=totalExecution,proto3" json:"total_execution,omitempty"`
	// timestamp when task was last executed (in milliseconds)
	LastRanAt     int64        `protobuf:"varint,10,opt,name=last_ran_at,json=lastRanAt,proto3" json:"last_ran_at,omitempty"`
	Status        TaskStatus   `protobuf:"varint,11,opt,name=status,proto3,enum=aggregator.TaskStatus" json:"status,omitempty"`
	Trigger       *TaskTrigger `protobuf:"bytes,12,opt,name=trigger,proto3" json:"trigger,omitempty"`
	Nodes         []*TaskNode  `protobuf:"bytes,13,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Edges         []*TaskEdge  `protobuf:"bytes,14,rep,name=edges,proto3" json:"edges,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_avs_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{19}
}

func (x *Task) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Task) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Task) GetSmartWalletAddress() string {
	if x != nil {
		return x.SmartWalletAddress
	}
	return ""
}

func (x *Task) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *Task) GetExpiredAt() int64 {
	if x != nil {
		return x.ExpiredAt
	}
	return 0
}

func (x *Task) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Task) GetCompletedAt() int64 {
	if x != nil {
		return x.CompletedAt
	}
	return 0
}

func (x *Task) GetMaxExecution() int64 {
	if x != nil {
		return x.MaxExecution
	}
	return 0
}

func (x *Task) GetTotalExecution() int64 {
	if x != nil {
		return x.TotalExecution
	}
	return 0
}

func (x *Task) GetLastRanAt() int64 {
	if x != nil {
		return x.LastRanAt
	}
	return 0
}

func (x *Task) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_Active
}

func (x *Task) GetTrigger() *TaskTrigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

func (x *Task) GetNodes() []*TaskNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Task) GetEdges() []*TaskEdge {
	if x != nil {
		return x.Edges
	}
	return nil
}

type CreateTaskReq struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	Trigger      *TaskTrigger           `protobuf:"bytes,1,opt,name=trigger,proto3" json:"trigger,omitempty"`
	StartAt      int64                  `protobuf:"varint,2,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	ExpiredAt    int64                  `protobuf:"varint,3,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`
	MaxExecution int64                  `protobuf:"varint,4,opt,name=max_execution,json=maxExecution,proto3" json:"max_execution,omitempty"`
	// the smart wallet address that will be used to run this task
	// When leaving out, we will use the default(salt=0) wallet
	SmartWalletAddress string      `protobuf:"bytes,5,opt,name=smart_wallet_address,json=smartWalletAddress,proto3" json:"smart_wallet_address,omitempty"`
	Name               string      `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Nodes              []*TaskNode `protobuf:"bytes,7,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Edges              []*TaskEdge `protobuf:"bytes,8,rep,name=edges,proto3" json:"edges,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CreateTaskReq) Reset() {
	*x = CreateTaskReq{}
	mi := &file_avs_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskReq) ProtoMessage() {}

func (x *CreateTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskReq.ProtoReflect.Descriptor instead.
func (*CreateTaskReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{20}
}

func (x *CreateTaskReq) GetTrigger() *TaskTrigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

func (x *CreateTaskReq) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *CreateTaskReq) GetExpiredAt() int64 {
	if x != nil {
		return x.ExpiredAt
	}
	return 0
}

func (x *CreateTaskReq) GetMaxExecution() int64 {
	if x != nil {
		return x.MaxExecution
	}
	return 0
}

func (x *CreateTaskReq) GetSmartWalletAddress() string {
	if x != nil {
		return x.SmartWalletAddress
	}
	return ""
}

func (x *CreateTaskReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTaskReq) GetNodes() []*TaskNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *CreateTaskReq) GetEdges() []*TaskEdge {
	if x != nil {
		return x.Edges
	}
	return nil
}

type CreateTaskResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTaskResp) Reset() {
	*x = CreateTaskResp{}
	mi := &file_avs_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskResp) ProtoMessage() {}

func (x *CreateTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskResp.ProtoReflect.Descriptor instead.
func (*CreateTaskResp) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{21}
}

func (x *CreateTaskResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type NonceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Owner         string                 `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NonceRequest) Reset() {
	*x = NonceRequest{}
	mi := &file_avs_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NonceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonceRequest) ProtoMessage() {}

func (x *NonceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonceRequest.ProtoReflect.Descriptor instead.
func (*NonceRequest) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{22}
}

func (x *NonceRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

type NonceResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nonce         string                 `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NonceResp) Reset() {
	*x = NonceResp{}
	mi := &file_avs_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NonceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonceResp) ProtoMessage() {}

func (x *NonceResp) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonceResp.ProtoReflect.Descriptor instead.
func (*NonceResp) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{23}
}

func (x *NonceResp) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

type ListWalletReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// filter out by factory address or salt
	// otherwise return all the wallet
	FactoryAddress string `protobuf:"bytes,1,opt,name=factory_address,json=factoryAddress,proto3" json:"factory_address,omitempty"`
	Salt           string `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
	// Deprecated: Use before or after instead
	Cursor string `protobuf:"bytes,3,opt,name=cursor,proto3" json:"cursor,omitempty"`
	// Get items before this cursor value (for backward pagination)
	Before string `protobuf:"bytes,4,opt,name=before,proto3" json:"before,omitempty"`
	// Get items after this cursor value (for forward pagination)
	After         string `protobuf:"bytes,5,opt,name=after,proto3" json:"after,omitempty"`
	ItemPerPage   int64  `protobuf:"varint,6,opt,name=item_per_page,json=itemPerPage,proto3" json:"item_per_page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListWalletReq) Reset() {
	*x = ListWalletReq{}
	mi := &file_avs_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListWalletReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletReq) ProtoMessage() {}

func (x *ListWalletReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletReq.ProtoReflect.Descriptor instead.
func (*ListWalletReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{24}
}

func (x *ListWalletReq) GetFactoryAddress() string {
	if x != nil {
		return x.FactoryAddress
	}
	return ""
}

func (x *ListWalletReq) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *ListWalletReq) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *ListWalletReq) GetBefore() string {
	if x != nil {
		return x.Before
	}
	return ""
}

func (x *ListWalletReq) GetAfter() string {
	if x != nil {
		return x.After
	}
	return ""
}

func (x *ListWalletReq) GetItemPerPage() int64 {
	if x != nil {
		return x.ItemPerPage
	}
	return 0
}

type SmartWallet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Salt          string                 `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
	Factory       string                 `protobuf:"bytes,3,opt,name=factory,proto3" json:"factory,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SmartWallet) Reset() {
	*x = SmartWallet{}
	mi := &file_avs_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmartWallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartWallet) ProtoMessage() {}

func (x *SmartWallet) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartWallet.ProtoReflect.Descriptor instead.
func (*SmartWallet) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{25}
}

func (x *SmartWallet) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SmartWallet) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *SmartWallet) GetFactory() string {
	if x != nil {
		return x.Factory
	}
	return ""
}

type ListWalletResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*SmartWallet         `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Cursor        string                 `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	HasMore       bool                   `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListWalletResp) Reset() {
	*x = ListWalletResp{}
	mi := &file_avs_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListWalletResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletResp) ProtoMessage() {}

func (x *ListWalletResp) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletResp.ProtoReflect.Descriptor instead.
func (*ListWalletResp) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{26}
}

func (x *ListWalletResp) GetItems() []*SmartWallet {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListWalletResp) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *ListWalletResp) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

type ListTasksReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filter out by the smart_wallet_address
	SmartWalletAddress []string `protobuf:"bytes,1,rep,name=smart_wallet_address,json=smartWalletAddress,proto3" json:"smart_wallet_address,omitempty"`
	// Deprecated: Use before or after instead
	Cursor string `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	// Get items before this cursor value (for backward pagination)
	Before string `protobuf:"bytes,4,opt,name=before,proto3" json:"before,omitempty"`
	// Get items after this cursor value (for forward pagination)
	After         string `protobuf:"bytes,5,opt,name=after,proto3" json:"after,omitempty"`
	ItemPerPage   int64  `protobuf:"varint,3,opt,name=item_per_page,json=itemPerPage,proto3" json:"item_per_page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTasksReq) Reset() {
	*x = ListTasksReq{}
	mi := &file_avs_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTasksReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksReq) ProtoMessage() {}

func (x *ListTasksReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksReq.ProtoReflect.Descriptor instead.
func (*ListTasksReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{27}
}

func (x *ListTasksReq) GetSmartWalletAddress() []string {
	if x != nil {
		return x.SmartWalletAddress
	}
	return nil
}

func (x *ListTasksReq) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *ListTasksReq) GetBefore() string {
	if x != nil {
		return x.Before
	}
	return ""
}

func (x *ListTasksReq) GetAfter() string {
	if x != nil {
		return x.After
	}
	return ""
}

func (x *ListTasksReq) GetItemPerPage() int64 {
	if x != nil {
		return x.ItemPerPage
	}
	return 0
}

type ListTasksResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*ListTasksResp_Item  `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Cursor        string                 `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	HasMore       bool                   `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTasksResp) Reset() {
	*x = ListTasksResp{}
	mi := &file_avs_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTasksResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksResp) ProtoMessage() {}

func (x *ListTasksResp) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksResp.ProtoReflect.Descriptor instead.
func (*ListTasksResp) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{28}
}

func (x *ListTasksResp) GetItems() []*ListTasksResp_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListTasksResp) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *ListTasksResp) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

type ListExecutionsReq struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	TaskIds []string               `protobuf:"bytes,1,rep,name=task_ids,json=taskIds,proto3" json:"task_ids,omitempty"`
	// Deprecated: Use before or after instead
	Cursor string `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	// Get items before this cursor value (for backward pagination)
	Before string `protobuf:"bytes,4,opt,name=before,proto3" json:"before,omitempty"`
	// Get items after this cursor value (for forward pagination)
	After         string `protobuf:"bytes,5,opt,name=after,proto3" json:"after,omitempty"`
	ItemPerPage   int64  `protobuf:"varint,3,opt,name=item_per_page,json=itemPerPage,proto3" json:"item_per_page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListExecutionsReq) Reset() {
	*x = ListExecutionsReq{}
	mi := &file_avs_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListExecutionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExecutionsReq) ProtoMessage() {}

func (x *ListExecutionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExecutionsReq.ProtoReflect.Descriptor instead.
func (*ListExecutionsReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{29}
}

func (x *ListExecutionsReq) GetTaskIds() []string {
	if x != nil {
		return x.TaskIds
	}
	return nil
}

func (x *ListExecutionsReq) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *ListExecutionsReq) GetBefore() string {
	if x != nil {
		return x.Before
	}
	return ""
}

func (x *ListExecutionsReq) GetAfter() string {
	if x != nil {
		return x.After
	}
	return ""
}

func (x *ListExecutionsReq) GetItemPerPage() int64 {
	if x != nil {
		return x.ItemPerPage
	}
	return 0
}

type ListExecutionsResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Execution           `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Cursor        string                 `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	HasMore       bool                   `protobuf:"varint,4,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListExecutionsResp) Reset() {
	*x = ListExecutionsResp{}
	mi := &file_avs_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListExecutionsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExecutionsResp) ProtoMessage() {}

func (x *ListExecutionsResp) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExecutionsResp.ProtoReflect.Descriptor instead.
func (*ListExecutionsResp) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{30}
}

func (x *ListExecutionsResp) GetItems() []*Execution {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListExecutionsResp) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *ListExecutionsResp) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

type ExecutionReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	ExecutionId   string                 `protobuf:"bytes,2,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecutionReq) Reset() {
	*x = ExecutionReq{}
	mi := &file_avs_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionReq) ProtoMessage() {}

func (x *ExecutionReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionReq.ProtoReflect.Descriptor instead.
func (*ExecutionReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{31}
}

func (x *ExecutionReq) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ExecutionReq) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

type ExecutionStatusResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        ExecutionStatus        `protobuf:"varint,1,opt,name=status,proto3,enum=aggregator.ExecutionStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecutionStatusResp) Reset() {
	*x = ExecutionStatusResp{}
	mi := &file_avs_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutionStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionStatusResp) ProtoMessage() {}

func (x *ExecutionStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionStatusResp.ProtoReflect.Descriptor instead.
func (*ExecutionStatusResp) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{32}
}

func (x *ExecutionStatusResp) GetStatus() ExecutionStatus {
	if x != nil {
		return x.Status
	}
	return ExecutionStatus_Queued
}

type GetKeyReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Owner         string                 `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	ChainId       int64                  `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	IssuedAt      *timestamp.Timestamp   `protobuf:"bytes,3,opt,name=issued_at,json=issuedAt,proto3" json:"issued_at,omitempty"`
	ExpiredAt     *timestamp.Timestamp   `protobuf:"bytes,4,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`
	Signature     string                 `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKeyReq) Reset() {
	*x = GetKeyReq{}
	mi := &file_avs_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKeyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyReq) ProtoMessage() {}

func (x *GetKeyReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyReq.ProtoReflect.Descriptor instead.
func (*GetKeyReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{33}
}

func (x *GetKeyReq) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *GetKeyReq) GetChainId() int64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *GetKeyReq) GetIssuedAt() *timestamp.Timestamp {
	if x != nil {
		return x.IssuedAt
	}
	return nil
}

func (x *GetKeyReq) GetExpiredAt() *timestamp.Timestamp {
	if x != nil {
		return x.ExpiredAt
	}
	return nil
}

func (x *GetKeyReq) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type KeyResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyResp) Reset() {
	*x = KeyResp{}
	mi := &file_avs_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyResp) ProtoMessage() {}

func (x *KeyResp) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyResp.ProtoReflect.Descriptor instead.
func (*KeyResp) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{34}
}

func (x *KeyResp) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// TriggerReason represent a lookup that we can use to identify when/where/how it is trigger
// In a block trigger, we will have block_number
// In an event trigger, we will have the log_index, tx_hash and the block_number
// In a time based trigger(cron/fixed time) we will have the epoch.
//
// TriggerReason is used to populate the `<trigger-name>.data` variable. Example, if this is a transfer
// event, then you will have access to <trigger-name>.data.from_address or <trigger-name>.data.value
type TriggerReason struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	BlockNumber   uint64                    `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	LogIndex      uint64                    `protobuf:"varint,2,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	TxHash        string                    `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Epoch         uint64                    `protobuf:"varint,4,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Type          TriggerReason_TriggerType `protobuf:"varint,5,opt,name=type,proto3,enum=aggregator.TriggerReason_TriggerType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TriggerReason) Reset() {
	*x = TriggerReason{}
	mi := &file_avs_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TriggerReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerReason) ProtoMessage() {}

func (x *TriggerReason) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerReason.ProtoReflect.Descriptor instead.
func (*TriggerReason) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{35}
}

func (x *TriggerReason) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *TriggerReason) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *TriggerReason) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *TriggerReason) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *TriggerReason) GetType() TriggerReason_TriggerType {
	if x != nil {
		return x.Type
	}
	return TriggerReason_Unset
}

type GetWalletReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Salt  string                 `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	// this is the factory address for the wallet, when leaving its empty, we will use our default factory address
	FactoryAddress string `protobuf:"bytes,2,opt,name=factory_address,json=factoryAddress,proto3" json:"factory_address,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetWalletReq) Reset() {
	*x = GetWalletReq{}
	mi := &file_avs_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWalletReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletReq) ProtoMessage() {}

func (x *GetWalletReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletReq.ProtoReflect.Descriptor instead.
func (*GetWalletReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{36}
}

func (x *GetWalletReq) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *GetWalletReq) GetFactoryAddress() string {
	if x != nil {
		return x.FactoryAddress
	}
	return ""
}

type GetWalletResp struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Address            string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Salt               string                 `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
	FactoryAddress     string                 `protobuf:"bytes,3,opt,name=factory_address,json=factoryAddress,proto3" json:"factory_address,omitempty"`
	TotalTaskCount     uint64                 `protobuf:"varint,4,opt,name=total_task_count,json=totalTaskCount,proto3" json:"total_task_count,omitempty"`
	ActiveTaskCount    uint64                 `protobuf:"varint,5,opt,name=active_task_count,json=activeTaskCount,proto3" json:"active_task_count,omitempty"`
	CompletedTaskCount uint64                 `protobuf:"varint,6,opt,name=completed_task_count,json=completedTaskCount,proto3" json:"completed_task_count,omitempty"`
	FailedTaskCount    uint64                 `protobuf:"varint,7,opt,name=failed_task_count,json=failedTaskCount,proto3" json:"failed_task_count,omitempty"`
	CanceledTaskCount  uint64                 `protobuf:"varint,8,opt,name=canceled_task_count,json=canceledTaskCount,proto3" json:"canceled_task_count,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetWalletResp) Reset() {
	*x = GetWalletResp{}
	mi := &file_avs_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWalletResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletResp) ProtoMessage() {}

func (x *GetWalletResp) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletResp.ProtoReflect.Descriptor instead.
func (*GetWalletResp) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{37}
}

func (x *GetWalletResp) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetWalletResp) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *GetWalletResp) GetFactoryAddress() string {
	if x != nil {
		return x.FactoryAddress
	}
	return ""
}

func (x *GetWalletResp) GetTotalTaskCount() uint64 {
	if x != nil {
		return x.TotalTaskCount
	}
	return 0
}

func (x *GetWalletResp) GetActiveTaskCount() uint64 {
	if x != nil {
		return x.ActiveTaskCount
	}
	return 0
}

func (x *GetWalletResp) GetCompletedTaskCount() uint64 {
	if x != nil {
		return x.CompletedTaskCount
	}
	return 0
}

func (x *GetWalletResp) GetFailedTaskCount() uint64 {
	if x != nil {
		return x.FailedTaskCount
	}
	return 0
}

func (x *GetWalletResp) GetCanceledTaskCount() uint64 {
	if x != nil {
		return x.CanceledTaskCount
	}
	return 0
}

type UserTriggerTaskReq struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	TaskId string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Reason *TriggerReason         `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// when setting is_blocking=true, the execution run in the same request. the request is blocked until the execution is done
	// setting to false, the task will be execute in our normal queueu system, and the request won't block.
	// default value is false, for interact testing, set this to true
	IsBlocking    bool `protobuf:"varint,3,opt,name=is_blocking,json=isBlocking,proto3" json:"is_blocking,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserTriggerTaskReq) Reset() {
	*x = UserTriggerTaskReq{}
	mi := &file_avs_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserTriggerTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTriggerTaskReq) ProtoMessage() {}

func (x *UserTriggerTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTriggerTaskReq.ProtoReflect.Descriptor instead.
func (*UserTriggerTaskReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{38}
}

func (x *UserTriggerTaskReq) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *UserTriggerTaskReq) GetReason() *TriggerReason {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *UserTriggerTaskReq) GetIsBlocking() bool {
	if x != nil {
		return x.IsBlocking
	}
	return false
}

type UserTriggerTaskResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Regardless whether it is a block or async, we always get back the same kind of id for this trigger.
	// The caller then make a second request to GetExecution to check for the execution status and data.
	// In the blocking mode, the execution_id is materialized and has been created, we can then call GetExecution on it immediately to receive result
	// In async mode, the execution_id is created ahead of time and not materialized, calling GetExecutionStatus on it will return Status=Pending for example. Once Status=Completed you can call GetExecution to get all log and detail. Call GetExecution before it is completed will result in "Execution Not Found"
	ExecutionId   string          `protobuf:"bytes,1,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	Status        ExecutionStatus `protobuf:"varint,2,opt,name=status,proto3,enum=aggregator.ExecutionStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserTriggerTaskResp) Reset() {
	*x = UserTriggerTaskResp{}
	mi := &file_avs_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserTriggerTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTriggerTaskResp) ProtoMessage() {}

func (x *UserTriggerTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTriggerTaskResp.ProtoReflect.Descriptor instead.
func (*UserTriggerTaskResp) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{39}
}

func (x *UserTriggerTaskResp) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *UserTriggerTaskResp) GetStatus() ExecutionStatus {
	if x != nil {
		return x.Status
	}
	return ExecutionStatus_Queued
}

type CreateOrUpdateSecretReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// name of the secret. it should be [a-zA-Z0-9_]+
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// value can be any valid unicode string
	// Secret is the only thing we can change in an update. workflow and org id cannot be change
	Secret string `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	// A secret when define can be at these level
	// - org: available to everything in the org. Currently this isn't supported yet. reserve for future use
	// - user: available to all workflow of an user. This is the default level
	// - workflow: available to a single workflow. To make a secret available to multiple workflow, either use org/user level or define them on other workflow.
	WorkflowId    string `protobuf:"bytes,3,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	OrgId         string `protobuf:"bytes,4,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOrUpdateSecretReq) Reset() {
	*x = CreateOrUpdateSecretReq{}
	mi := &file_avs_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrUpdateSecretReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateSecretReq) ProtoMessage() {}

func (x *CreateOrUpdateSecretReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateSecretReq.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateSecretReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{40}
}

func (x *CreateOrUpdateSecretReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateOrUpdateSecretReq) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *CreateOrUpdateSecretReq) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *CreateOrUpdateSecretReq) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

type ListSecretsReq struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	WorkflowId string                 `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// Deprecated: Use before or after instead
	Cursor string `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	// Get items before this cursor value (for backward pagination)
	Before string `protobuf:"bytes,3,opt,name=before,proto3" json:"before,omitempty"`
	// Get items after this cursor value (for forward pagination)
	After         string `protobuf:"bytes,4,opt,name=after,proto3" json:"after,omitempty"`
	ItemPerPage   int64  `protobuf:"varint,5,opt,name=item_per_page,json=itemPerPage,proto3" json:"item_per_page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSecretsReq) Reset() {
	*x = ListSecretsReq{}
	mi := &file_avs_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSecretsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecretsReq) ProtoMessage() {}

func (x *ListSecretsReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecretsReq.ProtoReflect.Descriptor instead.
func (*ListSecretsReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{41}
}

func (x *ListSecretsReq) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *ListSecretsReq) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *ListSecretsReq) GetBefore() string {
	if x != nil {
		return x.Before
	}
	return ""
}

func (x *ListSecretsReq) GetAfter() string {
	if x != nil {
		return x.After
	}
	return ""
}

func (x *ListSecretsReq) GetItemPerPage() int64 {
	if x != nil {
		return x.ItemPerPage
	}
	return 0
}

type ListSecretsResp struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Items         []*ListSecretsResp_ResponseSecret `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Cursor        string                            `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	HasMore       bool                              `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSecretsResp) Reset() {
	*x = ListSecretsResp{}
	mi := &file_avs_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSecretsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecretsResp) ProtoMessage() {}

func (x *ListSecretsResp) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecretsResp.ProtoReflect.Descriptor instead.
func (*ListSecretsResp) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{42}
}

func (x *ListSecretsResp) GetItems() []*ListSecretsResp_ResponseSecret {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListSecretsResp) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *ListSecretsResp) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

type DeleteSecretReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Delete the secret belong to the specific workflow. Without its, we delete the one belong to user
	WorkflowId string `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// Delete the secret belong to the specific prg. Without its, we delete the one belong to user
	OrgId         string `protobuf:"bytes,3,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSecretReq) Reset() {
	*x = DeleteSecretReq{}
	mi := &file_avs_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSecretReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSecretReq) ProtoMessage() {}

func (x *DeleteSecretReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSecretReq.ProtoReflect.Descriptor instead.
func (*DeleteSecretReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{43}
}

func (x *DeleteSecretReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteSecretReq) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *DeleteSecretReq) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

// Request message for GetWorkflowCount
type GetWorkflowCountReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Addresses     []string               `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"` // Optional array of smart wallet addresses
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWorkflowCountReq) Reset() {
	*x = GetWorkflowCountReq{}
	mi := &file_avs_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWorkflowCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowCountReq) ProtoMessage() {}

func (x *GetWorkflowCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowCountReq.ProtoReflect.Descriptor instead.
func (*GetWorkflowCountReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{44}
}

func (x *GetWorkflowCountReq) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

// Response message for GetWorkflowCount
type GetWorkflowCountResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TODO: eventually to support active, cancel and other metrics
	Total         int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` // the total count of workflow
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWorkflowCountResp) Reset() {
	*x = GetWorkflowCountResp{}
	mi := &file_avs_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWorkflowCountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowCountResp) ProtoMessage() {}

func (x *GetWorkflowCountResp) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowCountResp.ProtoReflect.Descriptor instead.
func (*GetWorkflowCountResp) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{45}
}

func (x *GetWorkflowCountResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetExecutionCountReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkflowIds   []string               `protobuf:"bytes,1,rep,name=workflow_ids,json=workflowIds,proto3" json:"workflow_ids,omitempty"` // Optional array of workflow IDs, count all executions of the owner if not provided
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExecutionCountReq) Reset() {
	*x = GetExecutionCountReq{}
	mi := &file_avs_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExecutionCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExecutionCountReq) ProtoMessage() {}

func (x *GetExecutionCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExecutionCountReq.ProtoReflect.Descriptor instead.
func (*GetExecutionCountReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{46}
}

func (x *GetExecutionCountReq) GetWorkflowIds() []string {
	if x != nil {
		return x.WorkflowIds
	}
	return nil
}

// Response message for GetExecutionCount
type GetExecutionCountResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TODO: eventually to support success, error count execution
	Total         int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` // The total count of executions
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExecutionCountResp) Reset() {
	*x = GetExecutionCountResp{}
	mi := &file_avs_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExecutionCountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExecutionCountResp) ProtoMessage() {}

func (x *GetExecutionCountResp) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExecutionCountResp.ProtoReflect.Descriptor instead.
func (*GetExecutionCountResp) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{47}
}

func (x *GetExecutionCountResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// Request message for GetExecutionStats
type GetExecutionStatsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkflowIds   []string               `protobuf:"bytes,1,rep,name=workflow_ids,json=workflowIds,proto3" json:"workflow_ids,omitempty"` // Optional array of workflow IDs
	Days          int64                  `protobuf:"varint,2,opt,name=days,proto3" json:"days,omitempty"`                                 // Number of days to look back (default: 7)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExecutionStatsReq) Reset() {
	*x = GetExecutionStatsReq{}
	mi := &file_avs_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExecutionStatsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExecutionStatsReq) ProtoMessage() {}

func (x *GetExecutionStatsReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExecutionStatsReq.ProtoReflect.Descriptor instead.
func (*GetExecutionStatsReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{48}
}

func (x *GetExecutionStatsReq) GetWorkflowIds() []string {
	if x != nil {
		return x.WorkflowIds
	}
	return nil
}

func (x *GetExecutionStatsReq) GetDays() int64 {
	if x != nil {
		return x.Days
	}
	return 0
}

// Response message for GetExecutionStats
type GetExecutionStatsResp struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Total            int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`                                                  // Total number of executions
	Succeeded        int64                  `protobuf:"varint,2,opt,name=succeeded,proto3" json:"succeeded,omitempty"`                                          // Number of successful executions
	Failed           int64                  `protobuf:"varint,3,opt,name=failed,proto3" json:"failed,omitempty"`                                                // Number of failed executions
	AvgExecutionTime float64                `protobuf:"fixed64,4,opt,name=avg_execution_time,json=avgExecutionTime,proto3" json:"avg_execution_time,omitempty"` // Average execution time in milliseconds
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetExecutionStatsResp) Reset() {
	*x = GetExecutionStatsResp{}
	mi := &file_avs_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExecutionStatsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExecutionStatsResp) ProtoMessage() {}

func (x *GetExecutionStatsResp) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExecutionStatsResp.ProtoReflect.Descriptor instead.
func (*GetExecutionStatsResp) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{49}
}

func (x *GetExecutionStatsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetExecutionStatsResp) GetSucceeded() int64 {
	if x != nil {
		return x.Succeeded
	}
	return 0
}

func (x *GetExecutionStatsResp) GetFailed() int64 {
	if x != nil {
		return x.Failed
	}
	return 0
}

func (x *GetExecutionStatsResp) GetAvgExecutionTime() float64 {
	if x != nil {
		return x.AvgExecutionTime
	}
	return 0
}

type Evm struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Evm) Reset() {
	*x = Evm{}
	mi := &file_avs_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Evm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Evm) ProtoMessage() {}

func (x *Evm) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Evm.ProtoReflect.Descriptor instead.
func (*Evm) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{50}
}

type EventCondition_Matcher struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the type of Filter we support, right now, we support below value for
	//   - topics:
	//   - address:
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// the payload of the type data to be mached. Each type will have different semantic meaning on how to match
	// Given type=topics`. This value is the topic array, for every non null element of the array we perform an equal check
	// If all are equal, the filter resolve to true
	//
	// Example:
	// To find all ERC20 transfer event into or out to wallet 0x5DD596C901987A2b28C38A9C1DfBf86fFFc15d77 we can do
	// value = [
	//
	//	[
	//	  "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
	//	  "0x5DD596C901987A2b28C38A9C1DfBf86fFFc15d77", // tx out
	//	],
	//	[
	//	  "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
	//	  null,
	//	  "0x5DD596C901987A2b28C38A9C1DfBf86fFFc15d77" // tx in
	//	],
	//
	// ]
	Value         []string `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventCondition_Matcher) Reset() {
	*x = EventCondition_Matcher{}
	mi := &file_avs_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventCondition_Matcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventCondition_Matcher) ProtoMessage() {}

func (x *EventCondition_Matcher) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventCondition_Matcher.ProtoReflect.Descriptor instead.
func (*EventCondition_Matcher) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{4, 0}
}

func (x *EventCondition_Matcher) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EventCondition_Matcher) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type ETHTransferNode_Output struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TransactionHash string                 `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ETHTransferNode_Output) Reset() {
	*x = ETHTransferNode_Output{}
	mi := &file_avs_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ETHTransferNode_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ETHTransferNode_Output) ProtoMessage() {}

func (x *ETHTransferNode_Output) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ETHTransferNode_Output.ProtoReflect.Descriptor instead.
func (*ETHTransferNode_Output) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{6, 0}
}

func (x *ETHTransferNode_Output) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

type ContractWriteNode_Output struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The requiremen for this shape of data is requested in https://github.com/AvaProtocol/EigenLayer-AVS/issues/153
	// https://docs.ethers.org/v6/api/providers/#TransactionReceipt
	// Ideally we shouldn't have to transport or store this at all. We should only store/pass the txhash, the consumer can construct
	// a full message of these through EVM RPC.
	// But due to requirement for easy to debug on client, we're storing and transport these over the wire
	UserOp        *Evm_UserOp             `protobuf:"bytes,1,opt,name=user_op,json=userOp,proto3" json:"user_op,omitempty"`
	TxReceipt     *Evm_TransactionReceipt `protobuf:"bytes,2,opt,name=tx_receipt,json=txReceipt,proto3" json:"tx_receipt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractWriteNode_Output) Reset() {
	*x = ContractWriteNode_Output{}
	mi := &file_avs_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractWriteNode_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractWriteNode_Output) ProtoMessage() {}

func (x *ContractWriteNode_Output) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractWriteNode_Output.ProtoReflect.Descriptor instead.
func (*ContractWriteNode_Output) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ContractWriteNode_Output) GetUserOp() *Evm_UserOp {
	if x != nil {
		return x.UserOp
	}
	return nil
}

func (x *ContractWriteNode_Output) GetTxReceipt() *Evm_TransactionReceipt {
	if x != nil {
		return x.TxReceipt
	}
	return nil
}

type ContractReadNode_Output struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The data is the result of querying the contract method. Becuase this is fetching data from the outside world,
	// we don't know the shape of data ahead of time.
	// At runtime, the data is dynamically parsed into the correct type for the node to consume
	// In case of smart contract, the return is always an array, then it's up to the client to map to the right field based on method signature
	Data          []*_struct.Value `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractReadNode_Output) Reset() {
	*x = ContractReadNode_Output{}
	mi := &file_avs_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractReadNode_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractReadNode_Output) ProtoMessage() {}

func (x *ContractReadNode_Output) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractReadNode_Output.ProtoReflect.Descriptor instead.
func (*ContractReadNode_Output) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{8, 0}
}

func (x *ContractReadNode_Output) GetData() []*_struct.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type GraphQLQueryNode_Output struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The data is the result of the graphql query. Becuase this is GraphQL, the data is a json object
	// The field of the json object is unknow, its depend on the query
	Data          *any1.Any `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GraphQLQueryNode_Output) Reset() {
	*x = GraphQLQueryNode_Output{}
	mi := &file_avs_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GraphQLQueryNode_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLQueryNode_Output) ProtoMessage() {}

func (x *GraphQLQueryNode_Output) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLQueryNode_Output.ProtoReflect.Descriptor instead.
func (*GraphQLQueryNode_Output) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{9, 1}
}

func (x *GraphQLQueryNode_Output) GetData() *any1.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

type RestAPINode_Output struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *any1.Any              `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RestAPINode_Output) Reset() {
	*x = RestAPINode_Output{}
	mi := &file_avs_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestAPINode_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestAPINode_Output) ProtoMessage() {}

func (x *RestAPINode_Output) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestAPINode_Output.ProtoReflect.Descriptor instead.
func (*RestAPINode_Output) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{10, 1}
}

func (x *RestAPINode_Output) GetData() *any1.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

type CustomCodeNode_Output struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *any1.Any              `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomCodeNode_Output) Reset() {
	*x = CustomCodeNode_Output{}
	mi := &file_avs_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomCodeNode_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomCodeNode_Output) ProtoMessage() {}

func (x *CustomCodeNode_Output) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomCodeNode_Output.ProtoReflect.Descriptor instead.
func (*CustomCodeNode_Output) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{11, 0}
}

func (x *CustomCodeNode_Output) GetData() *any1.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

type BranchNode_Output struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the output of the branch node is the id of the condition that is true
	// the execution will continue to the next node belong to this condition
	// In front-end, when rendering the historical execution, we can draw the relationship coming out of the condition that match this id
	ConditionId   string `protobuf:"bytes,1,opt,name=condition_id,json=conditionId,proto3" json:"condition_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BranchNode_Output) Reset() {
	*x = BranchNode_Output{}
	mi := &file_avs_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BranchNode_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchNode_Output) ProtoMessage() {}

func (x *BranchNode_Output) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchNode_Output.ProtoReflect.Descriptor instead.
func (*BranchNode_Output) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{13, 0}
}

func (x *BranchNode_Output) GetConditionId() string {
	if x != nil {
		return x.ConditionId
	}
	return ""
}

type FilterNode_Output struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the output of the filter node is the filtered array after apply the filter expression. It works similar to filter of javascript
	Data          *any1.Any `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilterNode_Output) Reset() {
	*x = FilterNode_Output{}
	mi := &file_avs_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterNode_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterNode_Output) ProtoMessage() {}

func (x *FilterNode_Output) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterNode_Output.ProtoReflect.Descriptor instead.
func (*FilterNode_Output) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{14, 0}
}

func (x *FilterNode_Output) GetData() *any1.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

type LoopNode_Output struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TODO: We haven't implement loop node yet
	Data          string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoopNode_Output) Reset() {
	*x = LoopNode_Output{}
	mi := &file_avs_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoopNode_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoopNode_Output) ProtoMessage() {}

func (x *LoopNode_Output) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoopNode_Output.ProtoReflect.Descriptor instead.
func (*LoopNode_Output) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{15, 0}
}

func (x *LoopNode_Output) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type Execution_Step struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	NodeId  string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Success bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	// Types that are valid to be assigned to OutputData:
	//
	//	*Execution_Step_EthTransfer
	//	*Execution_Step_Graphql
	//	*Execution_Step_ContractRead
	//	*Execution_Step_ContractWrite
	//	*Execution_Step_CustomCode
	//	*Execution_Step_RestApi
	//	*Execution_Step_Branch
	//	*Execution_Step_Filter
	//	*Execution_Step_Loop
	OutputData isExecution_Step_OutputData `protobuf_oneof:"output_data"`
	Log        string                      `protobuf:"bytes,12,opt,name=log,proto3" json:"log,omitempty"`
	Error      string                      `protobuf:"bytes,13,opt,name=error,proto3" json:"error,omitempty"`
	// timestamp when step started (in milliseconds)
	StartAt int64 `protobuf:"varint,14,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	// timestamp when step ended (in milliseconds)
	EndAt int64 `protobuf:"varint,15,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	// Reference ticket: https://github.com/AvaProtocol/EigenLayer-AVS/issues/151
	Inputs        []string `protobuf:"bytes,16,rep,name=inputs,proto3" json:"inputs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Execution_Step) Reset() {
	*x = Execution_Step{}
	mi := &file_avs_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Execution_Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Execution_Step) ProtoMessage() {}

func (x *Execution_Step) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Execution_Step.ProtoReflect.Descriptor instead.
func (*Execution_Step) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{18, 0}
}

func (x *Execution_Step) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *Execution_Step) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Execution_Step) GetOutputData() isExecution_Step_OutputData {
	if x != nil {
		return x.OutputData
	}
	return nil
}

func (x *Execution_Step) GetEthTransfer() *ETHTransferNode_Output {
	if x != nil {
		if x, ok := x.OutputData.(*Execution_Step_EthTransfer); ok {
			return x.EthTransfer
		}
	}
	return nil
}

func (x *Execution_Step) GetGraphql() *GraphQLQueryNode_Output {
	if x != nil {
		if x, ok := x.OutputData.(*Execution_Step_Graphql); ok {
			return x.Graphql
		}
	}
	return nil
}

func (x *Execution_Step) GetContractRead() *ContractReadNode_Output {
	if x != nil {
		if x, ok := x.OutputData.(*Execution_Step_ContractRead); ok {
			return x.ContractRead
		}
	}
	return nil
}

func (x *Execution_Step) GetContractWrite() *ContractWriteNode_Output {
	if x != nil {
		if x, ok := x.OutputData.(*Execution_Step_ContractWrite); ok {
			return x.ContractWrite
		}
	}
	return nil
}

func (x *Execution_Step) GetCustomCode() *CustomCodeNode_Output {
	if x != nil {
		if x, ok := x.OutputData.(*Execution_Step_CustomCode); ok {
			return x.CustomCode
		}
	}
	return nil
}

func (x *Execution_Step) GetRestApi() *RestAPINode_Output {
	if x != nil {
		if x, ok := x.OutputData.(*Execution_Step_RestApi); ok {
			return x.RestApi
		}
	}
	return nil
}

func (x *Execution_Step) GetBranch() *BranchNode_Output {
	if x != nil {
		if x, ok := x.OutputData.(*Execution_Step_Branch); ok {
			return x.Branch
		}
	}
	return nil
}

func (x *Execution_Step) GetFilter() *FilterNode_Output {
	if x != nil {
		if x, ok := x.OutputData.(*Execution_Step_Filter); ok {
			return x.Filter
		}
	}
	return nil
}

func (x *Execution_Step) GetLoop() *LoopNode_Output {
	if x != nil {
		if x, ok := x.OutputData.(*Execution_Step_Loop); ok {
			return x.Loop
		}
	}
	return nil
}

func (x *Execution_Step) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

func (x *Execution_Step) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Execution_Step) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *Execution_Step) GetEndAt() int64 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

func (x *Execution_Step) GetInputs() []string {
	if x != nil {
		return x.Inputs
	}
	return nil
}

type isExecution_Step_OutputData interface {
	isExecution_Step_OutputData()
}

type Execution_Step_EthTransfer struct {
	EthTransfer *ETHTransferNode_Output `protobuf:"bytes,3,opt,name=eth_transfer,json=ethTransfer,proto3,oneof"`
}

type Execution_Step_Graphql struct {
	Graphql *GraphQLQueryNode_Output `protobuf:"bytes,4,opt,name=graphql,proto3,oneof"`
}

type Execution_Step_ContractRead struct {
	ContractRead *ContractReadNode_Output `protobuf:"bytes,5,opt,name=contract_read,json=contractRead,proto3,oneof"`
}

type Execution_Step_ContractWrite struct {
	ContractWrite *ContractWriteNode_Output `protobuf:"bytes,6,opt,name=contract_write,json=contractWrite,proto3,oneof"`
}

type Execution_Step_CustomCode struct {
	CustomCode *CustomCodeNode_Output `protobuf:"bytes,7,opt,name=custom_code,json=customCode,proto3,oneof"`
}

type Execution_Step_RestApi struct {
	RestApi *RestAPINode_Output `protobuf:"bytes,8,opt,name=rest_api,json=restApi,proto3,oneof"`
}

type Execution_Step_Branch struct {
	Branch *BranchNode_Output `protobuf:"bytes,9,opt,name=branch,proto3,oneof"`
}

type Execution_Step_Filter struct {
	Filter *FilterNode_Output `protobuf:"bytes,10,opt,name=filter,proto3,oneof"`
}

type Execution_Step_Loop struct {
	Loop *LoopNode_Output `protobuf:"bytes,11,opt,name=loop,proto3,oneof"`
}

func (*Execution_Step_EthTransfer) isExecution_Step_OutputData() {}

func (*Execution_Step_Graphql) isExecution_Step_OutputData() {}

func (*Execution_Step_ContractRead) isExecution_Step_OutputData() {}

func (*Execution_Step_ContractWrite) isExecution_Step_OutputData() {}

func (*Execution_Step_CustomCode) isExecution_Step_OutputData() {}

func (*Execution_Step_RestApi) isExecution_Step_OutputData() {}

func (*Execution_Step_Branch) isExecution_Step_OutputData() {}

func (*Execution_Step_Filter) isExecution_Step_OutputData() {}

func (*Execution_Step_Loop) isExecution_Step_OutputData() {}

type Execution_TransferLogOutput struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TokenName       string                 `protobuf:"bytes,1,opt,name=token_name,json=tokenName,proto3" json:"token_name,omitempty"`
	TokenSymbol     string                 `protobuf:"bytes,2,opt,name=token_symbol,json=tokenSymbol,proto3" json:"token_symbol,omitempty"`
	TokenDecimals   uint32                 `protobuf:"varint,3,opt,name=token_decimals,json=tokenDecimals,proto3" json:"token_decimals,omitempty"`
	TransactionHash string                 `protobuf:"bytes,4,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	Address         string                 `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	BlockNumber     uint64                 `protobuf:"varint,6,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	// timestamp of the block (in milliseconds)
	BlockTimestamp   uint64 `protobuf:"varint,7,opt,name=block_timestamp,json=blockTimestamp,proto3" json:"block_timestamp,omitempty"`
	FromAddress      string `protobuf:"bytes,8,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	ToAddress        string `protobuf:"bytes,9,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	Value            string `protobuf:"bytes,10,opt,name=value,proto3" json:"value,omitempty"`
	ValueFormatted   string `protobuf:"bytes,11,opt,name=value_formatted,json=valueFormatted,proto3" json:"value_formatted,omitempty"`
	TransactionIndex uint32 `protobuf:"varint,12,opt,name=transaction_index,json=transactionIndex,proto3" json:"transaction_index,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Execution_TransferLogOutput) Reset() {
	*x = Execution_TransferLogOutput{}
	mi := &file_avs_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Execution_TransferLogOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Execution_TransferLogOutput) ProtoMessage() {}

func (x *Execution_TransferLogOutput) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Execution_TransferLogOutput.ProtoReflect.Descriptor instead.
func (*Execution_TransferLogOutput) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{18, 1}
}

func (x *Execution_TransferLogOutput) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

func (x *Execution_TransferLogOutput) GetTokenSymbol() string {
	if x != nil {
		return x.TokenSymbol
	}
	return ""
}

func (x *Execution_TransferLogOutput) GetTokenDecimals() uint32 {
	if x != nil {
		return x.TokenDecimals
	}
	return 0
}

func (x *Execution_TransferLogOutput) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *Execution_TransferLogOutput) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Execution_TransferLogOutput) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Execution_TransferLogOutput) GetBlockTimestamp() uint64 {
	if x != nil {
		return x.BlockTimestamp
	}
	return 0
}

func (x *Execution_TransferLogOutput) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *Execution_TransferLogOutput) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *Execution_TransferLogOutput) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Execution_TransferLogOutput) GetValueFormatted() string {
	if x != nil {
		return x.ValueFormatted
	}
	return ""
}

func (x *Execution_TransferLogOutput) GetTransactionIndex() uint32 {
	if x != nil {
		return x.TransactionIndex
	}
	return 0
}

type Execution_BlockOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockNumber   uint64                 `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Execution_BlockOutput) Reset() {
	*x = Execution_BlockOutput{}
	mi := &file_avs_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Execution_BlockOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Execution_BlockOutput) ProtoMessage() {}

func (x *Execution_BlockOutput) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Execution_BlockOutput.ProtoReflect.Descriptor instead.
func (*Execution_BlockOutput) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{18, 2}
}

func (x *Execution_BlockOutput) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

type Execution_TimeOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Epoch         uint64                 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Execution_TimeOutput) Reset() {
	*x = Execution_TimeOutput{}
	mi := &file_avs_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Execution_TimeOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Execution_TimeOutput) ProtoMessage() {}

func (x *Execution_TimeOutput) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Execution_TimeOutput.ProtoReflect.Descriptor instead.
func (*Execution_TimeOutput) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{18, 3}
}

func (x *Execution_TimeOutput) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

type ListTasksResp_Item struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner              string                 `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	SmartWalletAddress string                 `protobuf:"bytes,3,opt,name=smart_wallet_address,json=smartWalletAddress,proto3" json:"smart_wallet_address,omitempty"`
	// task won't be check before this (timestamp in milliseconds)
	StartAt int64 `protobuf:"varint,4,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	// task won't be run/check after this (timestamp in milliseconds)
	ExpiredAt int64 `protobuf:"varint,5,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`
	// arbitrary data about this task. has a limit of 255 character
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// timestamp when task was completed (in milliseconds)
	CompletedAt int64 `protobuf:"varint,7,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	// limit on how many time this task can run. Set to 0 will make it run unlimited until cancelling or reaching its expired time
	MaxExecution int64 `protobuf:"varint,8,opt,name=max_execution,json=maxExecution,proto3" json:"max_execution,omitempty"`
	// return how many time this task has run
	TotalExecution int64 `protobuf:"varint,9,opt,name=total_execution,json=totalExecution,proto3" json:"total_execution,omitempty"`
	// timestamp when task was last executed (in milliseconds)
	LastRanAt     int64        `protobuf:"varint,10,opt,name=last_ran_at,json=lastRanAt,proto3" json:"last_ran_at,omitempty"`
	Status        TaskStatus   `protobuf:"varint,11,opt,name=status,proto3,enum=aggregator.TaskStatus" json:"status,omitempty"`
	Trigger       *TaskTrigger `protobuf:"bytes,12,opt,name=trigger,proto3" json:"trigger,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTasksResp_Item) Reset() {
	*x = ListTasksResp_Item{}
	mi := &file_avs_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTasksResp_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksResp_Item) ProtoMessage() {}

func (x *ListTasksResp_Item) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksResp_Item.ProtoReflect.Descriptor instead.
func (*ListTasksResp_Item) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{28, 0}
}

func (x *ListTasksResp_Item) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListTasksResp_Item) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ListTasksResp_Item) GetSmartWalletAddress() string {
	if x != nil {
		return x.SmartWalletAddress
	}
	return ""
}

func (x *ListTasksResp_Item) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *ListTasksResp_Item) GetExpiredAt() int64 {
	if x != nil {
		return x.ExpiredAt
	}
	return 0
}

func (x *ListTasksResp_Item) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListTasksResp_Item) GetCompletedAt() int64 {
	if x != nil {
		return x.CompletedAt
	}
	return 0
}

func (x *ListTasksResp_Item) GetMaxExecution() int64 {
	if x != nil {
		return x.MaxExecution
	}
	return 0
}

func (x *ListTasksResp_Item) GetTotalExecution() int64 {
	if x != nil {
		return x.TotalExecution
	}
	return 0
}

func (x *ListTasksResp_Item) GetLastRanAt() int64 {
	if x != nil {
		return x.LastRanAt
	}
	return 0
}

func (x *ListTasksResp_Item) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_Active
}

func (x *ListTasksResp_Item) GetTrigger() *TaskTrigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

type ListSecretsResp_ResponseSecret struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// when listing secret, we don't return its value, just secret and last update
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Scope         string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	WorkflowId    string `protobuf:"bytes,4,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	OrgId         string `protobuf:"bytes,5,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSecretsResp_ResponseSecret) Reset() {
	*x = ListSecretsResp_ResponseSecret{}
	mi := &file_avs_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSecretsResp_ResponseSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecretsResp_ResponseSecret) ProtoMessage() {}

func (x *ListSecretsResp_ResponseSecret) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecretsResp_ResponseSecret.ProtoReflect.Descriptor instead.
func (*ListSecretsResp_ResponseSecret) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{42, 0}
}

func (x *ListSecretsResp_ResponseSecret) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListSecretsResp_ResponseSecret) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ListSecretsResp_ResponseSecret) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *ListSecretsResp_ResponseSecret) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

type Evm_Log struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Consensus fields
	Address string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` // Address of the contract that generated the event
	Topics  []string `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`   // List of topics provided by the contract
	Data    string   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`       // Supplied by the contract, usually ABI-encoded
	// Derived fields (filled in by the node but not secured by consensus)
	BlockNumber      uint64 `protobuf:"varint,4,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`                // Block in which the transaction was included
	TransactionHash  string `protobuf:"bytes,5,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`     // Hash of the transaction
	TransactionIndex uint32 `protobuf:"varint,6,opt,name=transaction_index,json=transactionIndex,proto3" json:"transaction_index,omitempty"` // Index of the transaction in the block
	BlockHash        string `protobuf:"bytes,7,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`                       // Hash of the block in which the transaction was included
	Index            uint32 `protobuf:"varint,8,opt,name=index,proto3" json:"index,omitempty"`                                               // Index of the log in the receipt
	Removed          bool   `protobuf:"varint,9,opt,name=removed,proto3" json:"removed,omitempty"`                                           // True if this log was reverted due to chain reorganization
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Evm_Log) Reset() {
	*x = Evm_Log{}
	mi := &file_avs_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Evm_Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Evm_Log) ProtoMessage() {}

func (x *Evm_Log) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Evm_Log.ProtoReflect.Descriptor instead.
func (*Evm_Log) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{50, 0}
}

func (x *Evm_Log) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Evm_Log) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *Evm_Log) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *Evm_Log) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Evm_Log) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *Evm_Log) GetTransactionIndex() uint32 {
	if x != nil {
		return x.TransactionIndex
	}
	return 0
}

func (x *Evm_Log) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *Evm_Log) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Evm_Log) GetRemoved() bool {
	if x != nil {
		return x.Removed
	}
	return false
}

// Define to match https://docs.ethers.org/v6/api/providers/#TransactionReceipt as required in this ticket: https://github.com/AvaProtocol/EigenLayer-AVS/issues/153
type Evm_TransactionReceipt struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Hash              string                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	BlockHash         string                 `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockNumber       uint64                 `protobuf:"varint,3,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	From              string                 `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	GasUsed           uint64                 `protobuf:"varint,6,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	GasPrice          uint64                 `protobuf:"varint,7,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	CumulativeGasUsed uint64                 `protobuf:"varint,8,opt,name=cumulative_gas_used,json=cumulativeGasUsed,proto3" json:"cumulative_gas_used,omitempty"`
	Fee               uint64                 `protobuf:"varint,9,opt,name=fee,proto3" json:"fee,omitempty"`
	ContractAddress   string                 `protobuf:"bytes,10,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Index             uint64                 `protobuf:"varint,11,opt,name=index,proto3" json:"index,omitempty"`
	Logs              []string               `protobuf:"bytes,12,rep,name=logs,proto3" json:"logs,omitempty"`
	LogsBloom         string                 `protobuf:"bytes,13,opt,name=logs_bloom,json=logsBloom,proto3" json:"logs_bloom,omitempty"`
	Root              string                 `protobuf:"bytes,14,opt,name=root,proto3" json:"root,omitempty"`
	Status            uint32                 `protobuf:"varint,15,opt,name=status,proto3" json:"status,omitempty"`
	Type              uint32                 `protobuf:"varint,16,opt,name=type,proto3" json:"type,omitempty"`
	BlobGasPrice      uint64                 `protobuf:"varint,17,opt,name=blob_gas_price,json=blobGasPrice,proto3" json:"blob_gas_price,omitempty"`
	BlobGasUsed       uint64                 `protobuf:"varint,18,opt,name=blob_gas_used,json=blobGasUsed,proto3" json:"blob_gas_used,omitempty"`
	To                string                 `protobuf:"bytes,19,opt,name=to,proto3" json:"to,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Evm_TransactionReceipt) Reset() {
	*x = Evm_TransactionReceipt{}
	mi := &file_avs_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Evm_TransactionReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Evm_TransactionReceipt) ProtoMessage() {}

func (x *Evm_TransactionReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Evm_TransactionReceipt.ProtoReflect.Descriptor instead.
func (*Evm_TransactionReceipt) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{50, 1}
}

func (x *Evm_TransactionReceipt) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Evm_TransactionReceipt) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *Evm_TransactionReceipt) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Evm_TransactionReceipt) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Evm_TransactionReceipt) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *Evm_TransactionReceipt) GetGasPrice() uint64 {
	if x != nil {
		return x.GasPrice
	}
	return 0
}

func (x *Evm_TransactionReceipt) GetCumulativeGasUsed() uint64 {
	if x != nil {
		return x.CumulativeGasUsed
	}
	return 0
}

func (x *Evm_TransactionReceipt) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *Evm_TransactionReceipt) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *Evm_TransactionReceipt) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Evm_TransactionReceipt) GetLogs() []string {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *Evm_TransactionReceipt) GetLogsBloom() string {
	if x != nil {
		return x.LogsBloom
	}
	return ""
}

func (x *Evm_TransactionReceipt) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

func (x *Evm_TransactionReceipt) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Evm_TransactionReceipt) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Evm_TransactionReceipt) GetBlobGasPrice() uint64 {
	if x != nil {
		return x.BlobGasPrice
	}
	return 0
}

func (x *Evm_TransactionReceipt) GetBlobGasUsed() uint64 {
	if x != nil {
		return x.BlobGasUsed
	}
	return 0
}

func (x *Evm_TransactionReceipt) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

type Evm_UserOp struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Sender               string                 `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Nonce                string                 `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	InitCode             string                 `protobuf:"bytes,3,opt,name=init_code,json=initCode,proto3" json:"init_code,omitempty"`
	CallData             string                 `protobuf:"bytes,4,opt,name=call_data,json=callData,proto3" json:"call_data,omitempty"`
	CallGasLimit         string                 `protobuf:"bytes,5,opt,name=call_gas_limit,json=callGasLimit,proto3" json:"call_gas_limit,omitempty"`
	VerificationGasLimit string                 `protobuf:"bytes,6,opt,name=verification_gas_limit,json=verificationGasLimit,proto3" json:"verification_gas_limit,omitempty"`
	PreVerificationGas   string                 `protobuf:"bytes,7,opt,name=pre_verification_gas,json=preVerificationGas,proto3" json:"pre_verification_gas,omitempty"`
	MaxFeePerGas         string                 `protobuf:"bytes,8,opt,name=max_fee_per_gas,json=maxFeePerGas,proto3" json:"max_fee_per_gas,omitempty"`
	MaxPriorityFeePerGas string                 `protobuf:"bytes,9,opt,name=max_priority_fee_per_gas,json=maxPriorityFeePerGas,proto3" json:"max_priority_fee_per_gas,omitempty"`
	PaymasterAndData     string                 `protobuf:"bytes,10,opt,name=paymaster_and_data,json=paymasterAndData,proto3" json:"paymaster_and_data,omitempty"`
	Signature            string                 `protobuf:"bytes,11,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Evm_UserOp) Reset() {
	*x = Evm_UserOp{}
	mi := &file_avs_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Evm_UserOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Evm_UserOp) ProtoMessage() {}

func (x *Evm_UserOp) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Evm_UserOp.ProtoReflect.Descriptor instead.
func (*Evm_UserOp) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{50, 2}
}

func (x *Evm_UserOp) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *Evm_UserOp) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *Evm_UserOp) GetInitCode() string {
	if x != nil {
		return x.InitCode
	}
	return ""
}

func (x *Evm_UserOp) GetCallData() string {
	if x != nil {
		return x.CallData
	}
	return ""
}

func (x *Evm_UserOp) GetCallGasLimit() string {
	if x != nil {
		return x.CallGasLimit
	}
	return ""
}

func (x *Evm_UserOp) GetVerificationGasLimit() string {
	if x != nil {
		return x.VerificationGasLimit
	}
	return ""
}

func (x *Evm_UserOp) GetPreVerificationGas() string {
	if x != nil {
		return x.PreVerificationGas
	}
	return ""
}

func (x *Evm_UserOp) GetMaxFeePerGas() string {
	if x != nil {
		return x.MaxFeePerGas
	}
	return ""
}

func (x *Evm_UserOp) GetMaxPriorityFeePerGas() string {
	if x != nil {
		return x.MaxPriorityFeePerGas
	}
	return ""
}

func (x *Evm_UserOp) GetPaymasterAndData() string {
	if x != nil {
		return x.PaymasterAndData
	}
	return ""
}

func (x *Evm_UserOp) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

var File_avs_proto protoreflect.FileDescriptor

const file_avs_proto_rawDesc = "" +
	"\n" +
	"\tavs.proto\x12\n" +
	"aggregator\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x19google/protobuf/any.proto\x1a\x1cgoogle/protobuf/struct.proto\"\x17\n" +
	"\x05IdReq\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\",\n" +
	"\x12FixedTimeCondition\x12\x16\n" +
	"\x06epochs\x18\x01 \x03(\x03R\x06epochs\"+\n" +
	"\rCronCondition\x12\x1a\n" +
	"\bschedule\x18\x01 \x03(\tR\bschedule\",\n" +
	"\x0eBlockCondition\x12\x1a\n" +
	"\binterval\x18\x01 \x01(\x03R\binterval\"\xa3\x01\n" +
	"\x0eEventCondition\x12<\n" +
	"\amatcher\x18\x01 \x03(\v2\".aggregator.EventCondition.MatcherR\amatcher\x12\x1e\n" +
	"\n" +
	"expression\x18\x02 \x01(\tR\n" +
	"expression\x1a3\n" +
	"\aMatcher\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x14\n" +
	"\x05value\x18\x02 \x03(\tR\x05value\"\xb5\x02\n" +
	"\vTaskTrigger\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\x06manual\x18\x02 \x01(\bH\x00R\x06manual\x12?\n" +
	"\n" +
	"fixed_time\x18\x03 \x01(\v2\x1e.aggregator.FixedTimeConditionH\x00R\tfixedTime\x12/\n" +
	"\x04cron\x18\x04 \x01(\v2\x19.aggregator.CronConditionH\x00R\x04cron\x122\n" +
	"\x05block\x18\x05 \x01(\v2\x1a.aggregator.BlockConditionH\x00R\x05block\x122\n" +
	"\x05event\x18\x06 \x01(\v2\x1a.aggregator.EventConditionH\x00R\x05event\x12\x0e\n" +
	"\x02id\x18\a \x01(\tR\x02idB\x0e\n" +
	"\ftrigger_type\"\x80\x01\n" +
	"\x0fETHTransferNode\x12 \n" +
	"\vdestination\x18\x01 \x01(\tR\vdestination\x12\x16\n" +
	"\x06amount\x18\x02 \x01(\tR\x06amount\x1a3\n" +
	"\x06Output\x12)\n" +
	"\x10transaction_hash\x18\x01 \x01(\tR\x0ftransactionHash\"\xfc\x01\n" +
	"\x11ContractWriteNode\x12)\n" +
	"\x10contract_address\x18\x01 \x01(\tR\x0fcontractAddress\x12\x1b\n" +
	"\tcall_data\x18\x02 \x01(\tR\bcallData\x12!\n" +
	"\fcontract_abi\x18\x03 \x01(\tR\vcontractAbi\x1a|\n" +
	"\x06Output\x12/\n" +
	"\auser_op\x18\x01 \x01(\v2\x16.aggregator.Evm.UserOpR\x06userOp\x12A\n" +
	"\n" +
	"tx_receipt\x18\x02 \x01(\v2\".aggregator.Evm.TransactionReceiptR\ttxReceipt\"\xb3\x01\n" +
	"\x10ContractReadNode\x12)\n" +
	"\x10contract_address\x18\x01 \x01(\tR\x0fcontractAddress\x12\x1b\n" +
	"\tcall_data\x18\x02 \x01(\tR\bcallData\x12!\n" +
	"\fcontract_abi\x18\x03 \x01(\tR\vcontractAbi\x1a4\n" +
	"\x06Output\x12*\n" +
	"\x04data\x18\x01 \x03(\v2\x16.google.protobuf.ValueR\x04data\"\xf7\x01\n" +
	"\x10GraphQLQueryNode\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12\x14\n" +
	"\x05query\x18\x02 \x01(\tR\x05query\x12I\n" +
	"\tvariables\x18\x03 \x03(\v2+.aggregator.GraphQLQueryNode.VariablesEntryR\tvariables\x1a<\n" +
	"\x0eVariablesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a2\n" +
	"\x06Output\x12(\n" +
	"\x04data\x18\x01 \x01(\v2\x14.google.protobuf.AnyR\x04data\"\xfb\x01\n" +
	"\vRestAPINode\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12>\n" +
	"\aheaders\x18\x02 \x03(\v2$.aggregator.RestAPINode.HeadersEntryR\aheaders\x12\x12\n" +
	"\x04body\x18\x03 \x01(\tR\x04body\x12\x16\n" +
	"\x06method\x18\x04 \x01(\tR\x06method\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a2\n" +
	"\x06Output\x12(\n" +
	"\x04data\x18\x01 \x01(\v2\x14.google.protobuf.AnyR\x04data\"\x8c\x01\n" +
	"\x0eCustomCodeNode\x12.\n" +
	"\x04lang\x18\x01 \x01(\x0e2\x1a.aggregator.CustomCodeLangR\x04lang\x12\x16\n" +
	"\x06source\x18\x02 \x01(\tR\x06source\x1a2\n" +
	"\x06Output\x12(\n" +
	"\x04data\x18\x01 \x01(\v2\x14.google.protobuf.AnyR\x04data\"O\n" +
	"\tCondition\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\x1e\n" +
	"\n" +
	"expression\x18\x03 \x01(\tR\n" +
	"expression\"p\n" +
	"\n" +
	"BranchNode\x125\n" +
	"\n" +
	"conditions\x18\x01 \x03(\v2\x15.aggregator.ConditionR\n" +
	"conditions\x1a+\n" +
	"\x06Output\x12!\n" +
	"\fcondition_id\x18\x01 \x01(\tR\vconditionId\"v\n" +
	"\n" +
	"FilterNode\x12\x1e\n" +
	"\n" +
	"expression\x18\x01 \x01(\tR\n" +
	"expression\x12\x14\n" +
	"\x05input\x18\x02 \x01(\tR\x05input\x1a2\n" +
	"\x06Output\x12(\n" +
	"\x04data\x18\x01 \x01(\v2\x14.google.protobuf.AnyR\x04data\"\x90\x04\n" +
	"\bLoopNode\x12\x14\n" +
	"\x05input\x18\x01 \x01(\tR\x05input\x12\x19\n" +
	"\biter_val\x18\x02 \x01(\tR\aiterVal\x12\x19\n" +
	"\biter_key\x18\x03 \x01(\tR\aiterKey\x12@\n" +
	"\feth_transfer\x18\n" +
	" \x01(\v2\x1b.aggregator.ETHTransferNodeH\x00R\vethTransfer\x12F\n" +
	"\x0econtract_write\x18\v \x01(\v2\x1d.aggregator.ContractWriteNodeH\x00R\rcontractWrite\x12C\n" +
	"\rcontract_read\x18\f \x01(\v2\x1c.aggregator.ContractReadNodeH\x00R\fcontractRead\x12L\n" +
	"\x12graphql_data_query\x18\r \x01(\v2\x1c.aggregator.GraphQLQueryNodeH\x00R\x10graphqlDataQuery\x124\n" +
	"\brest_api\x18\x0e \x01(\v2\x17.aggregator.RestAPINodeH\x00R\arestApi\x12=\n" +
	"\vcustom_code\x18\x0f \x01(\v2\x1a.aggregator.CustomCodeNodeH\x00R\n" +
	"customCode\x1a\x1c\n" +
	"\x06Output\x12\x12\n" +
	"\x04data\x18\x01 \x01(\tR\x04dataB\b\n" +
	"\x06runner\"J\n" +
	"\bTaskEdge\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x16\n" +
	"\x06source\x18\x02 \x01(\tR\x06source\x12\x16\n" +
	"\x06target\x18\x03 \x01(\tR\x06target\"\xd4\x04\n" +
	"\bTaskNode\x12\x0e\n" +
	"\x02id\x18\x02 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12@\n" +
	"\feth_transfer\x18\n" +
	" \x01(\v2\x1b.aggregator.ETHTransferNodeH\x00R\vethTransfer\x12F\n" +
	"\x0econtract_write\x18\v \x01(\v2\x1d.aggregator.ContractWriteNodeH\x00R\rcontractWrite\x12C\n" +
	"\rcontract_read\x18\f \x01(\v2\x1c.aggregator.ContractReadNodeH\x00R\fcontractRead\x12C\n" +
	"\rgraphql_query\x18\r \x01(\v2\x1c.aggregator.GraphQLQueryNodeH\x00R\fgraphqlQuery\x124\n" +
	"\brest_api\x18\x0e \x01(\v2\x17.aggregator.RestAPINodeH\x00R\arestApi\x120\n" +
	"\x06branch\x18\x0f \x01(\v2\x16.aggregator.BranchNodeH\x00R\x06branch\x120\n" +
	"\x06filter\x18\x10 \x01(\v2\x16.aggregator.FilterNodeH\x00R\x06filter\x12*\n" +
	"\x04loop\x18\x11 \x01(\v2\x14.aggregator.LoopNodeH\x00R\x04loop\x12=\n" +
	"\vcustom_code\x18\x12 \x01(\v2\x1a.aggregator.CustomCodeNodeH\x00R\n" +
	"customCodeB\v\n" +
	"\ttask_type\"\xa3\x0e\n" +
	"\tExecution\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x19\n" +
	"\bstart_at\x18\x02 \x01(\x03R\astartAt\x12\x15\n" +
	"\x06end_at\x18\x03 \x01(\x03R\x05endAt\x12\x18\n" +
	"\asuccess\x18\x04 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x05 \x01(\tR\x05error\x121\n" +
	"\x06reason\x18\x06 \x01(\v2\x19.aggregator.TriggerReasonR\x06reason\x120\n" +
	"\x05steps\x18\b \x03(\v2\x1a.aggregator.Execution.StepR\x05steps\x12!\n" +
	"\ftrigger_name\x18\t \x01(\tR\vtriggerName\x12L\n" +
	"\ftransfer_log\x18\n" +
	" \x01(\v2'.aggregator.Execution.TransferLogOutputH\x00R\vtransferLog\x12.\n" +
	"\aevm_log\x18\v \x01(\v2\x13.aggregator.Evm.LogH\x00R\x06evmLog\x129\n" +
	"\x05block\x18\f \x01(\v2!.aggregator.Execution.BlockOutputH\x00R\x05block\x126\n" +
	"\x04time\x18\r \x01(\v2 .aggregator.Execution.TimeOutputH\x00R\x04time\x1a\x87\x06\n" +
	"\x04Step\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12G\n" +
	"\feth_transfer\x18\x03 \x01(\v2\".aggregator.ETHTransferNode.OutputH\x00R\vethTransfer\x12?\n" +
	"\agraphql\x18\x04 \x01(\v2#.aggregator.GraphQLQueryNode.OutputH\x00R\agraphql\x12J\n" +
	"\rcontract_read\x18\x05 \x01(\v2#.aggregator.ContractReadNode.OutputH\x00R\fcontractRead\x12M\n" +
	"\x0econtract_write\x18\x06 \x01(\v2$.aggregator.ContractWriteNode.OutputH\x00R\rcontractWrite\x12D\n" +
	"\vcustom_code\x18\a \x01(\v2!.aggregator.CustomCodeNode.OutputH\x00R\n" +
	"customCode\x12;\n" +
	"\brest_api\x18\b \x01(\v2\x1e.aggregator.RestAPINode.OutputH\x00R\arestApi\x127\n" +
	"\x06branch\x18\t \x01(\v2\x1d.aggregator.BranchNode.OutputH\x00R\x06branch\x127\n" +
	"\x06filter\x18\n" +
	" \x01(\v2\x1d.aggregator.FilterNode.OutputH\x00R\x06filter\x121\n" +
	"\x04loop\x18\v \x01(\v2\x1b.aggregator.LoopNode.OutputH\x00R\x04loop\x12\x10\n" +
	"\x03log\x18\f \x01(\tR\x03log\x12\x14\n" +
	"\x05error\x18\r \x01(\tR\x05error\x12\x19\n" +
	"\bstart_at\x18\x0e \x01(\x03R\astartAt\x12\x15\n" +
	"\x06end_at\x18\x0f \x01(\x03R\x05endAt\x12\x16\n" +
	"\x06inputs\x18\x10 \x03(\tR\x06inputsB\r\n" +
	"\voutput_data\x1a\xbb\x03\n" +
	"\x11TransferLogOutput\x12\x1d\n" +
	"\n" +
	"token_name\x18\x01 \x01(\tR\ttokenName\x12!\n" +
	"\ftoken_symbol\x18\x02 \x01(\tR\vtokenSymbol\x12%\n" +
	"\x0etoken_decimals\x18\x03 \x01(\rR\rtokenDecimals\x12)\n" +
	"\x10transaction_hash\x18\x04 \x01(\tR\x0ftransactionHash\x12\x18\n" +
	"\aaddress\x18\x05 \x01(\tR\aaddress\x12!\n" +
	"\fblock_number\x18\x06 \x01(\x04R\vblockNumber\x12'\n" +
	"\x0fblock_timestamp\x18\a \x01(\x04R\x0eblockTimestamp\x12!\n" +
	"\ffrom_address\x18\b \x01(\tR\vfromAddress\x12\x1d\n" +
	"\n" +
	"to_address\x18\t \x01(\tR\ttoAddress\x12\x14\n" +
	"\x05value\x18\n" +
	" \x01(\tR\x05value\x12'\n" +
	"\x0fvalue_formatted\x18\v \x01(\tR\x0evalueFormatted\x12+\n" +
	"\x11transaction_index\x18\f \x01(\rR\x10transactionIndex\x1a0\n" +
	"\vBlockOutput\x12!\n" +
	"\fblock_number\x18\x01 \x01(\x04R\vblockNumber\x1a\"\n" +
	"\n" +
	"TimeOutput\x12\x14\n" +
	"\x05epoch\x18\x01 \x01(\x04R\x05epochB\r\n" +
	"\voutput_data\"\xf8\x03\n" +
	"\x04Task\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05owner\x18\x02 \x01(\tR\x05owner\x120\n" +
	"\x14smart_wallet_address\x18\x03 \x01(\tR\x12smartWalletAddress\x12\x19\n" +
	"\bstart_at\x18\x04 \x01(\x03R\astartAt\x12\x1d\n" +
	"\n" +
	"expired_at\x18\x05 \x01(\x03R\texpiredAt\x12\x12\n" +
	"\x04name\x18\x06 \x01(\tR\x04name\x12!\n" +
	"\fcompleted_at\x18\a \x01(\x03R\vcompletedAt\x12#\n" +
	"\rmax_execution\x18\b \x01(\x03R\fmaxExecution\x12'\n" +
	"\x0ftotal_execution\x18\t \x01(\x03R\x0etotalExecution\x12\x1e\n" +
	"\vlast_ran_at\x18\n" +
	" \x01(\x03R\tlastRanAt\x12.\n" +
	"\x06status\x18\v \x01(\x0e2\x16.aggregator.TaskStatusR\x06status\x121\n" +
	"\atrigger\x18\f \x01(\v2\x17.aggregator.TaskTriggerR\atrigger\x12*\n" +
	"\x05nodes\x18\r \x03(\v2\x14.aggregator.TaskNodeR\x05nodes\x12*\n" +
	"\x05edges\x18\x0e \x03(\v2\x14.aggregator.TaskEdgeR\x05edges\"\xbf\x02\n" +
	"\rCreateTaskReq\x121\n" +
	"\atrigger\x18\x01 \x01(\v2\x17.aggregator.TaskTriggerR\atrigger\x12\x19\n" +
	"\bstart_at\x18\x02 \x01(\x03R\astartAt\x12\x1d\n" +
	"\n" +
	"expired_at\x18\x03 \x01(\x03R\texpiredAt\x12#\n" +
	"\rmax_execution\x18\x04 \x01(\x03R\fmaxExecution\x120\n" +
	"\x14smart_wallet_address\x18\x05 \x01(\tR\x12smartWalletAddress\x12\x12\n" +
	"\x04name\x18\x06 \x01(\tR\x04name\x12*\n" +
	"\x05nodes\x18\a \x03(\v2\x14.aggregator.TaskNodeR\x05nodes\x12*\n" +
	"\x05edges\x18\b \x03(\v2\x14.aggregator.TaskEdgeR\x05edges\" \n" +
	"\x0eCreateTaskResp\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"$\n" +
	"\fNonceRequest\x12\x14\n" +
	"\x05owner\x18\x01 \x01(\tR\x05owner\"!\n" +
	"\tNonceResp\x12\x14\n" +
	"\x05nonce\x18\x01 \x01(\tR\x05nonce\"\xb6\x01\n" +
	"\rListWalletReq\x12'\n" +
	"\x0ffactory_address\x18\x01 \x01(\tR\x0efactoryAddress\x12\x12\n" +
	"\x04salt\x18\x02 \x01(\tR\x04salt\x12\x16\n" +
	"\x06cursor\x18\x03 \x01(\tR\x06cursor\x12\x16\n" +
	"\x06before\x18\x04 \x01(\tR\x06before\x12\x14\n" +
	"\x05after\x18\x05 \x01(\tR\x05after\x12\"\n" +
	"\ritem_per_page\x18\x06 \x01(\x03R\vitemPerPage\"U\n" +
	"\vSmartWallet\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12\x12\n" +
	"\x04salt\x18\x02 \x01(\tR\x04salt\x12\x18\n" +
	"\afactory\x18\x03 \x01(\tR\afactory\"r\n" +
	"\x0eListWalletResp\x12-\n" +
	"\x05items\x18\x01 \x03(\v2\x17.aggregator.SmartWalletR\x05items\x12\x16\n" +
	"\x06cursor\x18\x02 \x01(\tR\x06cursor\x12\x19\n" +
	"\bhas_more\x18\x03 \x01(\bR\ahasMore\"\xaa\x01\n" +
	"\fListTasksReq\x120\n" +
	"\x14smart_wallet_address\x18\x01 \x03(\tR\x12smartWalletAddress\x12\x16\n" +
	"\x06cursor\x18\x02 \x01(\tR\x06cursor\x12\x16\n" +
	"\x06before\x18\x04 \x01(\tR\x06before\x12\x14\n" +
	"\x05after\x18\x05 \x01(\tR\x05after\x12\"\n" +
	"\ritem_per_page\x18\x03 \x01(\x03R\vitemPerPage\"\x9b\x04\n" +
	"\rListTasksResp\x124\n" +
	"\x05items\x18\x01 \x03(\v2\x1e.aggregator.ListTasksResp.ItemR\x05items\x12\x16\n" +
	"\x06cursor\x18\x02 \x01(\tR\x06cursor\x12\x19\n" +
	"\bhas_more\x18\x03 \x01(\bR\ahasMore\x1a\xa0\x03\n" +
	"\x04Item\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05owner\x18\x02 \x01(\tR\x05owner\x120\n" +
	"\x14smart_wallet_address\x18\x03 \x01(\tR\x12smartWalletAddress\x12\x19\n" +
	"\bstart_at\x18\x04 \x01(\x03R\astartAt\x12\x1d\n" +
	"\n" +
	"expired_at\x18\x05 \x01(\x03R\texpiredAt\x12\x12\n" +
	"\x04name\x18\x06 \x01(\tR\x04name\x12!\n" +
	"\fcompleted_at\x18\a \x01(\x03R\vcompletedAt\x12#\n" +
	"\rmax_execution\x18\b \x01(\x03R\fmaxExecution\x12'\n" +
	"\x0ftotal_execution\x18\t \x01(\x03R\x0etotalExecution\x12\x1e\n" +
	"\vlast_ran_at\x18\n" +
	" \x01(\x03R\tlastRanAt\x12.\n" +
	"\x06status\x18\v \x01(\x0e2\x16.aggregator.TaskStatusR\x06status\x121\n" +
	"\atrigger\x18\f \x01(\v2\x17.aggregator.TaskTriggerR\atrigger\"\x98\x01\n" +
	"\x11ListExecutionsReq\x12\x19\n" +
	"\btask_ids\x18\x01 \x03(\tR\ataskIds\x12\x16\n" +
	"\x06cursor\x18\x02 \x01(\tR\x06cursor\x12\x16\n" +
	"\x06before\x18\x04 \x01(\tR\x06before\x12\x14\n" +
	"\x05after\x18\x05 \x01(\tR\x05after\x12\"\n" +
	"\ritem_per_page\x18\x03 \x01(\x03R\vitemPerPage\"t\n" +
	"\x12ListExecutionsResp\x12+\n" +
	"\x05items\x18\x01 \x03(\v2\x15.aggregator.ExecutionR\x05items\x12\x16\n" +
	"\x06cursor\x18\x02 \x01(\tR\x06cursor\x12\x19\n" +
	"\bhas_more\x18\x04 \x01(\bR\ahasMore\"J\n" +
	"\fExecutionReq\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12!\n" +
	"\fexecution_id\x18\x02 \x01(\tR\vexecutionId\"J\n" +
	"\x13ExecutionStatusResp\x123\n" +
	"\x06status\x18\x01 \x01(\x0e2\x1b.aggregator.ExecutionStatusR\x06status\"\xce\x01\n" +
	"\tGetKeyReq\x12\x14\n" +
	"\x05owner\x18\x01 \x01(\tR\x05owner\x12\x19\n" +
	"\bchain_id\x18\x02 \x01(\x03R\achainId\x127\n" +
	"\tissued_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\bissuedAt\x129\n" +
	"\n" +
	"expired_at\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\texpiredAt\x12\x1c\n" +
	"\tsignature\x18\x05 \x01(\tR\tsignature\"\x1b\n" +
	"\aKeyResp\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\"\x8e\x02\n" +
	"\rTriggerReason\x12!\n" +
	"\fblock_number\x18\x01 \x01(\x04R\vblockNumber\x12\x1b\n" +
	"\tlog_index\x18\x02 \x01(\x04R\blogIndex\x12\x17\n" +
	"\atx_hash\x18\x03 \x01(\tR\x06txHash\x12\x14\n" +
	"\x05epoch\x18\x04 \x01(\x04R\x05epoch\x129\n" +
	"\x04type\x18\x05 \x01(\x0e2%.aggregator.TriggerReason.TriggerTypeR\x04type\"S\n" +
	"\vTriggerType\x12\t\n" +
	"\x05Unset\x10\x00\x12\n" +
	"\n" +
	"\x06Manual\x10\x02\x12\r\n" +
	"\tFixedTime\x10\x03\x12\b\n" +
	"\x04Cron\x10\x04\x12\t\n" +
	"\x05Block\x10\x05\x12\t\n" +
	"\x05Event\x10\x06\"K\n" +
	"\fGetWalletReq\x12\x12\n" +
	"\x04salt\x18\x01 \x01(\tR\x04salt\x12'\n" +
	"\x0ffactory_address\x18\x02 \x01(\tR\x0efactoryAddress\"\xca\x02\n" +
	"\rGetWalletResp\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12\x12\n" +
	"\x04salt\x18\x02 \x01(\tR\x04salt\x12'\n" +
	"\x0ffactory_address\x18\x03 \x01(\tR\x0efactoryAddress\x12(\n" +
	"\x10total_task_count\x18\x04 \x01(\x04R\x0etotalTaskCount\x12*\n" +
	"\x11active_task_count\x18\x05 \x01(\x04R\x0factiveTaskCount\x120\n" +
	"\x14completed_task_count\x18\x06 \x01(\x04R\x12completedTaskCount\x12*\n" +
	"\x11failed_task_count\x18\a \x01(\x04R\x0ffailedTaskCount\x12.\n" +
	"\x13canceled_task_count\x18\b \x01(\x04R\x11canceledTaskCount\"\x81\x01\n" +
	"\x12UserTriggerTaskReq\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x121\n" +
	"\x06reason\x18\x02 \x01(\v2\x19.aggregator.TriggerReasonR\x06reason\x12\x1f\n" +
	"\vis_blocking\x18\x03 \x01(\bR\n" +
	"isBlocking\"m\n" +
	"\x13UserTriggerTaskResp\x12!\n" +
	"\fexecution_id\x18\x01 \x01(\tR\vexecutionId\x123\n" +
	"\x06status\x18\x02 \x01(\x0e2\x1b.aggregator.ExecutionStatusR\x06status\"}\n" +
	"\x17CreateOrUpdateSecretReq\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x16\n" +
	"\x06secret\x18\x02 \x01(\tR\x06secret\x12\x1f\n" +
	"\vworkflow_id\x18\x03 \x01(\tR\n" +
	"workflowId\x12\x15\n" +
	"\x06org_id\x18\x04 \x01(\tR\x05orgId\"\x9b\x01\n" +
	"\x0eListSecretsReq\x12\x1f\n" +
	"\vworkflow_id\x18\x01 \x01(\tR\n" +
	"workflowId\x12\x16\n" +
	"\x06cursor\x18\x02 \x01(\tR\x06cursor\x12\x16\n" +
	"\x06before\x18\x03 \x01(\tR\x06before\x12\x14\n" +
	"\x05after\x18\x04 \x01(\tR\x05after\x12\"\n" +
	"\ritem_per_page\x18\x05 \x01(\x03R\vitemPerPage\"\xfa\x01\n" +
	"\x0fListSecretsResp\x12@\n" +
	"\x05items\x18\x01 \x03(\v2*.aggregator.ListSecretsResp.ResponseSecretR\x05items\x12\x16\n" +
	"\x06cursor\x18\x02 \x01(\tR\x06cursor\x12\x19\n" +
	"\bhas_more\x18\x03 \x01(\bR\ahasMore\x1ar\n" +
	"\x0eResponseSecret\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05scope\x18\x02 \x01(\tR\x05scope\x12\x1f\n" +
	"\vworkflow_id\x18\x04 \x01(\tR\n" +
	"workflowId\x12\x15\n" +
	"\x06org_id\x18\x05 \x01(\tR\x05orgId\"]\n" +
	"\x0fDeleteSecretReq\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1f\n" +
	"\vworkflow_id\x18\x02 \x01(\tR\n" +
	"workflowId\x12\x15\n" +
	"\x06org_id\x18\x03 \x01(\tR\x05orgId\"3\n" +
	"\x13GetWorkflowCountReq\x12\x1c\n" +
	"\taddresses\x18\x01 \x03(\tR\taddresses\",\n" +
	"\x14GetWorkflowCountResp\x12\x14\n" +
	"\x05total\x18\x01 \x01(\x03R\x05total\"9\n" +
	"\x14GetExecutionCountReq\x12!\n" +
	"\fworkflow_ids\x18\x01 \x03(\tR\vworkflowIds\"-\n" +
	"\x15GetExecutionCountResp\x12\x14\n" +
	"\x05total\x18\x01 \x01(\x03R\x05total\"M\n" +
	"\x14GetExecutionStatsReq\x12!\n" +
	"\fworkflow_ids\x18\x01 \x03(\tR\vworkflowIds\x12\x12\n" +
	"\x04days\x18\x02 \x01(\x03R\x04days\"\x91\x01\n" +
	"\x15GetExecutionStatsResp\x12\x14\n" +
	"\x05total\x18\x01 \x01(\x03R\x05total\x12\x1c\n" +
	"\tsucceeded\x18\x02 \x01(\x03R\tsucceeded\x12\x16\n" +
	"\x06failed\x18\x03 \x01(\x03R\x06failed\x12,\n" +
	"\x12avg_execution_time\x18\x04 \x01(\x01R\x10avgExecutionTime\"\xd2\t\n" +
	"\x03Evm\x1a\x95\x02\n" +
	"\x03Log\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12\x16\n" +
	"\x06topics\x18\x02 \x03(\tR\x06topics\x12\x12\n" +
	"\x04data\x18\x03 \x01(\tR\x04data\x12!\n" +
	"\fblock_number\x18\x04 \x01(\x04R\vblockNumber\x12)\n" +
	"\x10transaction_hash\x18\x05 \x01(\tR\x0ftransactionHash\x12+\n" +
	"\x11transaction_index\x18\x06 \x01(\rR\x10transactionIndex\x12\x1d\n" +
	"\n" +
	"block_hash\x18\a \x01(\tR\tblockHash\x12\x14\n" +
	"\x05index\x18\b \x01(\rR\x05index\x12\x18\n" +
	"\aremoved\x18\t \x01(\bR\aremoved\x1a\x86\x04\n" +
	"\x12TransactionReceipt\x12\x12\n" +
	"\x04hash\x18\x01 \x01(\tR\x04hash\x12\x1d\n" +
	"\n" +
	"block_hash\x18\x02 \x01(\tR\tblockHash\x12!\n" +
	"\fblock_number\x18\x03 \x01(\x04R\vblockNumber\x12\x12\n" +
	"\x04from\x18\x04 \x01(\tR\x04from\x12\x19\n" +
	"\bgas_used\x18\x06 \x01(\x04R\agasUsed\x12\x1b\n" +
	"\tgas_price\x18\a \x01(\x04R\bgasPrice\x12.\n" +
	"\x13cumulative_gas_used\x18\b \x01(\x04R\x11cumulativeGasUsed\x12\x10\n" +
	"\x03fee\x18\t \x01(\x04R\x03fee\x12)\n" +
	"\x10contract_address\x18\n" +
	" \x01(\tR\x0fcontractAddress\x12\x14\n" +
	"\x05index\x18\v \x01(\x04R\x05index\x12\x12\n" +
	"\x04logs\x18\f \x03(\tR\x04logs\x12\x1d\n" +
	"\n" +
	"logs_bloom\x18\r \x01(\tR\tlogsBloom\x12\x12\n" +
	"\x04root\x18\x0e \x01(\tR\x04root\x12\x16\n" +
	"\x06status\x18\x0f \x01(\rR\x06status\x12\x12\n" +
	"\x04type\x18\x10 \x01(\rR\x04type\x12$\n" +
	"\x0eblob_gas_price\x18\x11 \x01(\x04R\fblobGasPrice\x12\"\n" +
	"\rblob_gas_used\x18\x12 \x01(\x04R\vblobGasUsed\x12\x0e\n" +
	"\x02to\x18\x13 \x01(\tR\x02to\x1a\xa9\x03\n" +
	"\x06UserOp\x12\x16\n" +
	"\x06sender\x18\x01 \x01(\tR\x06sender\x12\x14\n" +
	"\x05nonce\x18\x02 \x01(\tR\x05nonce\x12\x1b\n" +
	"\tinit_code\x18\x03 \x01(\tR\binitCode\x12\x1b\n" +
	"\tcall_data\x18\x04 \x01(\tR\bcallData\x12$\n" +
	"\x0ecall_gas_limit\x18\x05 \x01(\tR\fcallGasLimit\x124\n" +
	"\x16verification_gas_limit\x18\x06 \x01(\tR\x14verificationGasLimit\x120\n" +
	"\x14pre_verification_gas\x18\a \x01(\tR\x12preVerificationGas\x12%\n" +
	"\x0fmax_fee_per_gas\x18\b \x01(\tR\fmaxFeePerGas\x126\n" +
	"\x18max_priority_fee_per_gas\x18\t \x01(\tR\x14maxPriorityFeePerGas\x12,\n" +
	"\x12paymaster_and_data\x18\n" +
	" \x01(\tR\x10paymasterAndData\x12\x1c\n" +
	"\tsignature\x18\v \x01(\tR\tsignature*\xdf\x01\n" +
	"\x05Error\x12\x0f\n" +
	"\vUnknowError\x10\x00\x12\x11\n" +
	"\fRpcNodeError\x10\xe8\a\x12\x17\n" +
	"\x12StorageUnavailable\x10\xd0\x0f\x12\x16\n" +
	"\x11StorageWriteError\x10\xd1\x0f\x12\x18\n" +
	"\x13SmartWalletRpcError\x10\xf0.\x12\x1d\n" +
	"\x18SmartWalletNotFoundError\x10\xf1.\x12\x16\n" +
	"\x11TaskDataCorrupted\x10\xd86\x12\x19\n" +
	"\x14TaskDataMissingError\x10\xd96\x12\x15\n" +
	"\x10TaskTriggerError\x10\xdb6*P\n" +
	"\n" +
	"TaskStatus\x12\n" +
	"\n" +
	"\x06Active\x10\x00\x12\r\n" +
	"\tCompleted\x10\x01\x12\n" +
	"\n" +
	"\x06Failed\x10\x02\x12\f\n" +
	"\bCanceled\x10\x03\x12\r\n" +
	"\tExecuting\x10\x04*+\n" +
	"\x0fExecutionStatus\x12\n" +
	"\n" +
	"\x06Queued\x10\x00\x12\f\n" +
	"\bFinished\x10\x02* \n" +
	"\x0eCustomCodeLang\x12\x0e\n" +
	"\n" +
	"JavaScript\x10\x002\xcb\v\n" +
	"\n" +
	"Aggregator\x126\n" +
	"\x06GetKey\x12\x15.aggregator.GetKeyReq\x1a\x13.aggregator.KeyResp\"\x00\x12=\n" +
	"\bGetNonce\x12\x18.aggregator.NonceRequest\x1a\x15.aggregator.NonceResp\"\x00\x12B\n" +
	"\tGetWallet\x12\x18.aggregator.GetWalletReq\x1a\x19.aggregator.GetWalletResp\"\x00\x12F\n" +
	"\vListWallets\x12\x19.aggregator.ListWalletReq\x1a\x1a.aggregator.ListWalletResp\"\x00\x12E\n" +
	"\n" +
	"CreateTask\x12\x19.aggregator.CreateTaskReq\x1a\x1a.aggregator.CreateTaskResp\"\x00\x12B\n" +
	"\tListTasks\x12\x18.aggregator.ListTasksReq\x1a\x19.aggregator.ListTasksResp\"\x00\x120\n" +
	"\aGetTask\x12\x11.aggregator.IdReq\x1a\x10.aggregator.Task\"\x00\x12Q\n" +
	"\x0eListExecutions\x12\x1d.aggregator.ListExecutionsReq\x1a\x1e.aggregator.ListExecutionsResp\"\x00\x12A\n" +
	"\fGetExecution\x12\x18.aggregator.ExecutionReq\x1a\x15.aggregator.Execution\"\x00\x12Q\n" +
	"\x12GetExecutionStatus\x12\x18.aggregator.ExecutionReq\x1a\x1f.aggregator.ExecutionStatusResp\"\x00\x12=\n" +
	"\n" +
	"CancelTask\x12\x11.aggregator.IdReq\x1a\x1a.google.protobuf.BoolValue\"\x00\x12=\n" +
	"\n" +
	"DeleteTask\x12\x11.aggregator.IdReq\x1a\x1a.google.protobuf.BoolValue\"\x00\x12P\n" +
	"\vTriggerTask\x12\x1e.aggregator.UserTriggerTaskReq\x1a\x1f.aggregator.UserTriggerTaskResp\"\x00\x12Q\n" +
	"\fCreateSecret\x12#.aggregator.CreateOrUpdateSecretReq\x1a\x1a.google.protobuf.BoolValue\"\x00\x12I\n" +
	"\fDeleteSecret\x12\x1b.aggregator.DeleteSecretReq\x1a\x1a.google.protobuf.BoolValue\"\x00\x12H\n" +
	"\vListSecrets\x12\x1a.aggregator.ListSecretsReq\x1a\x1b.aggregator.ListSecretsResp\"\x00\x12Q\n" +
	"\fUpdateSecret\x12#.aggregator.CreateOrUpdateSecretReq\x1a\x1a.google.protobuf.BoolValue\"\x00\x12U\n" +
	"\x10GetWorkflowCount\x12\x1f.aggregator.GetWorkflowCountReq\x1a .aggregator.GetWorkflowCountResp\x12X\n" +
	"\x11GetExecutionCount\x12 .aggregator.GetExecutionCountReq\x1a!.aggregator.GetExecutionCountResp\x12X\n" +
	"\x11GetExecutionStats\x12 .aggregator.GetExecutionStatsReq\x1a!.aggregator.GetExecutionStatsRespB\fZ\n" +
	"./avsprotob\x06proto3"

var (
	file_avs_proto_rawDescOnce sync.Once
	file_avs_proto_rawDescData []byte
)

func file_avs_proto_rawDescGZIP() []byte {
	file_avs_proto_rawDescOnce.Do(func() {
		file_avs_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_avs_proto_rawDesc), len(file_avs_proto_rawDesc)))
	})
	return file_avs_proto_rawDescData
}

var file_avs_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_avs_proto_msgTypes = make([]protoimpl.MessageInfo, 72)
var file_avs_proto_goTypes = []any{
	(Error)(0),                             // 0: aggregator.Error
	(TaskStatus)(0),                        // 1: aggregator.TaskStatus
	(ExecutionStatus)(0),                   // 2: aggregator.ExecutionStatus
	(CustomCodeLang)(0),                    // 3: aggregator.CustomCodeLang
	(TriggerReason_TriggerType)(0),         // 4: aggregator.TriggerReason.TriggerType
	(*IdReq)(nil),                          // 5: aggregator.IdReq
	(*FixedTimeCondition)(nil),             // 6: aggregator.FixedTimeCondition
	(*CronCondition)(nil),                  // 7: aggregator.CronCondition
	(*BlockCondition)(nil),                 // 8: aggregator.BlockCondition
	(*EventCondition)(nil),                 // 9: aggregator.EventCondition
	(*TaskTrigger)(nil),                    // 10: aggregator.TaskTrigger
	(*ETHTransferNode)(nil),                // 11: aggregator.ETHTransferNode
	(*ContractWriteNode)(nil),              // 12: aggregator.ContractWriteNode
	(*ContractReadNode)(nil),               // 13: aggregator.ContractReadNode
	(*GraphQLQueryNode)(nil),               // 14: aggregator.GraphQLQueryNode
	(*RestAPINode)(nil),                    // 15: aggregator.RestAPINode
	(*CustomCodeNode)(nil),                 // 16: aggregator.CustomCodeNode
	(*Condition)(nil),                      // 17: aggregator.Condition
	(*BranchNode)(nil),                     // 18: aggregator.BranchNode
	(*FilterNode)(nil),                     // 19: aggregator.FilterNode
	(*LoopNode)(nil),                       // 20: aggregator.LoopNode
	(*TaskEdge)(nil),                       // 21: aggregator.TaskEdge
	(*TaskNode)(nil),                       // 22: aggregator.TaskNode
	(*Execution)(nil),                      // 23: aggregator.Execution
	(*Task)(nil),                           // 24: aggregator.Task
	(*CreateTaskReq)(nil),                  // 25: aggregator.CreateTaskReq
	(*CreateTaskResp)(nil),                 // 26: aggregator.CreateTaskResp
	(*NonceRequest)(nil),                   // 27: aggregator.NonceRequest
	(*NonceResp)(nil),                      // 28: aggregator.NonceResp
	(*ListWalletReq)(nil),                  // 29: aggregator.ListWalletReq
	(*SmartWallet)(nil),                    // 30: aggregator.SmartWallet
	(*ListWalletResp)(nil),                 // 31: aggregator.ListWalletResp
	(*ListTasksReq)(nil),                   // 32: aggregator.ListTasksReq
	(*ListTasksResp)(nil),                  // 33: aggregator.ListTasksResp
	(*ListExecutionsReq)(nil),              // 34: aggregator.ListExecutionsReq
	(*ListExecutionsResp)(nil),             // 35: aggregator.ListExecutionsResp
	(*ExecutionReq)(nil),                   // 36: aggregator.ExecutionReq
	(*ExecutionStatusResp)(nil),            // 37: aggregator.ExecutionStatusResp
	(*GetKeyReq)(nil),                      // 38: aggregator.GetKeyReq
	(*KeyResp)(nil),                        // 39: aggregator.KeyResp
	(*TriggerReason)(nil),                  // 40: aggregator.TriggerReason
	(*GetWalletReq)(nil),                   // 41: aggregator.GetWalletReq
	(*GetWalletResp)(nil),                  // 42: aggregator.GetWalletResp
	(*UserTriggerTaskReq)(nil),             // 43: aggregator.UserTriggerTaskReq
	(*UserTriggerTaskResp)(nil),            // 44: aggregator.UserTriggerTaskResp
	(*CreateOrUpdateSecretReq)(nil),        // 45: aggregator.CreateOrUpdateSecretReq
	(*ListSecretsReq)(nil),                 // 46: aggregator.ListSecretsReq
	(*ListSecretsResp)(nil),                // 47: aggregator.ListSecretsResp
	(*DeleteSecretReq)(nil),                // 48: aggregator.DeleteSecretReq
	(*GetWorkflowCountReq)(nil),            // 49: aggregator.GetWorkflowCountReq
	(*GetWorkflowCountResp)(nil),           // 50: aggregator.GetWorkflowCountResp
	(*GetExecutionCountReq)(nil),           // 51: aggregator.GetExecutionCountReq
	(*GetExecutionCountResp)(nil),          // 52: aggregator.GetExecutionCountResp
	(*GetExecutionStatsReq)(nil),           // 53: aggregator.GetExecutionStatsReq
	(*GetExecutionStatsResp)(nil),          // 54: aggregator.GetExecutionStatsResp
	(*Evm)(nil),                            // 55: aggregator.Evm
	(*EventCondition_Matcher)(nil),         // 56: aggregator.EventCondition.Matcher
	(*ETHTransferNode_Output)(nil),         // 57: aggregator.ETHTransferNode.Output
	(*ContractWriteNode_Output)(nil),       // 58: aggregator.ContractWriteNode.Output
	(*ContractReadNode_Output)(nil),        // 59: aggregator.ContractReadNode.Output
	nil,                                    // 60: aggregator.GraphQLQueryNode.VariablesEntry
	(*GraphQLQueryNode_Output)(nil),        // 61: aggregator.GraphQLQueryNode.Output
	nil,                                    // 62: aggregator.RestAPINode.HeadersEntry
	(*RestAPINode_Output)(nil),             // 63: aggregator.RestAPINode.Output
	(*CustomCodeNode_Output)(nil),          // 64: aggregator.CustomCodeNode.Output
	(*BranchNode_Output)(nil),              // 65: aggregator.BranchNode.Output
	(*FilterNode_Output)(nil),              // 66: aggregator.FilterNode.Output
	(*LoopNode_Output)(nil),                // 67: aggregator.LoopNode.Output
	(*Execution_Step)(nil),                 // 68: aggregator.Execution.Step
	(*Execution_TransferLogOutput)(nil),    // 69: aggregator.Execution.TransferLogOutput
	(*Execution_BlockOutput)(nil),          // 70: aggregator.Execution.BlockOutput
	(*Execution_TimeOutput)(nil),           // 71: aggregator.Execution.TimeOutput
	(*ListTasksResp_Item)(nil),             // 72: aggregator.ListTasksResp.Item
	(*ListSecretsResp_ResponseSecret)(nil), // 73: aggregator.ListSecretsResp.ResponseSecret
	(*Evm_Log)(nil),                        // 74: aggregator.Evm.Log
	(*Evm_TransactionReceipt)(nil),         // 75: aggregator.Evm.TransactionReceipt
	(*Evm_UserOp)(nil),                     // 76: aggregator.Evm.UserOp
	(*timestamp.Timestamp)(nil),            // 77: google.protobuf.Timestamp
	(*_struct.Value)(nil),                  // 78: google.protobuf.Value
	(*any1.Any)(nil),                       // 79: google.protobuf.Any
	(*wrappers.BoolValue)(nil),             // 80: google.protobuf.BoolValue
}
var file_avs_proto_depIdxs = []int32{
	56, // 0: aggregator.EventCondition.matcher:type_name -> aggregator.EventCondition.Matcher
	6,  // 1: aggregator.TaskTrigger.fixed_time:type_name -> aggregator.FixedTimeCondition
	7,  // 2: aggregator.TaskTrigger.cron:type_name -> aggregator.CronCondition
	8,  // 3: aggregator.TaskTrigger.block:type_name -> aggregator.BlockCondition
	9,  // 4: aggregator.TaskTrigger.event:type_name -> aggregator.EventCondition
	60, // 5: aggregator.GraphQLQueryNode.variables:type_name -> aggregator.GraphQLQueryNode.VariablesEntry
	62, // 6: aggregator.RestAPINode.headers:type_name -> aggregator.RestAPINode.HeadersEntry
	3,  // 7: aggregator.CustomCodeNode.lang:type_name -> aggregator.CustomCodeLang
	17, // 8: aggregator.BranchNode.conditions:type_name -> aggregator.Condition
	11, // 9: aggregator.LoopNode.eth_transfer:type_name -> aggregator.ETHTransferNode
	12, // 10: aggregator.LoopNode.contract_write:type_name -> aggregator.ContractWriteNode
	13, // 11: aggregator.LoopNode.contract_read:type_name -> aggregator.ContractReadNode
	14, // 12: aggregator.LoopNode.graphql_data_query:type_name -> aggregator.GraphQLQueryNode
	15, // 13: aggregator.LoopNode.rest_api:type_name -> aggregator.RestAPINode
	16, // 14: aggregator.LoopNode.custom_code:type_name -> aggregator.CustomCodeNode
	11, // 15: aggregator.TaskNode.eth_transfer:type_name -> aggregator.ETHTransferNode
	12, // 16: aggregator.TaskNode.contract_write:type_name -> aggregator.ContractWriteNode
	13, // 17: aggregator.TaskNode.contract_read:type_name -> aggregator.ContractReadNode
	14, // 18: aggregator.TaskNode.graphql_query:type_name -> aggregator.GraphQLQueryNode
	15, // 19: aggregator.TaskNode.rest_api:type_name -> aggregator.RestAPINode
	18, // 20: aggregator.TaskNode.branch:type_name -> aggregator.BranchNode
	19, // 21: aggregator.TaskNode.filter:type_name -> aggregator.FilterNode
	20, // 22: aggregator.TaskNode.loop:type_name -> aggregator.LoopNode
	16, // 23: aggregator.TaskNode.custom_code:type_name -> aggregator.CustomCodeNode
	40, // 24: aggregator.Execution.reason:type_name -> aggregator.TriggerReason
	68, // 25: aggregator.Execution.steps:type_name -> aggregator.Execution.Step
	69, // 26: aggregator.Execution.transfer_log:type_name -> aggregator.Execution.TransferLogOutput
	74, // 27: aggregator.Execution.evm_log:type_name -> aggregator.Evm.Log
	70, // 28: aggregator.Execution.block:type_name -> aggregator.Execution.BlockOutput
	71, // 29: aggregator.Execution.time:type_name -> aggregator.Execution.TimeOutput
	1,  // 30: aggregator.Task.status:type_name -> aggregator.TaskStatus
	10, // 31: aggregator.Task.trigger:type_name -> aggregator.TaskTrigger
	22, // 32: aggregator.Task.nodes:type_name -> aggregator.TaskNode
	21, // 33: aggregator.Task.edges:type_name -> aggregator.TaskEdge
	10, // 34: aggregator.CreateTaskReq.trigger:type_name -> aggregator.TaskTrigger
	22, // 35: aggregator.CreateTaskReq.nodes:type_name -> aggregator.TaskNode
	21, // 36: aggregator.CreateTaskReq.edges:type_name -> aggregator.TaskEdge
	30, // 37: aggregator.ListWalletResp.items:type_name -> aggregator.SmartWallet
	72, // 38: aggregator.ListTasksResp.items:type_name -> aggregator.ListTasksResp.Item
	23, // 39: aggregator.ListExecutionsResp.items:type_name -> aggregator.Execution
	2,  // 40: aggregator.ExecutionStatusResp.status:type_name -> aggregator.ExecutionStatus
	77, // 41: aggregator.GetKeyReq.issued_at:type_name -> google.protobuf.Timestamp
	77, // 42: aggregator.GetKeyReq.expired_at:type_name -> google.protobuf.Timestamp
	4,  // 43: aggregator.TriggerReason.type:type_name -> aggregator.TriggerReason.TriggerType
	40, // 44: aggregator.UserTriggerTaskReq.reason:type_name -> aggregator.TriggerReason
	2,  // 45: aggregator.UserTriggerTaskResp.status:type_name -> aggregator.ExecutionStatus
	73, // 46: aggregator.ListSecretsResp.items:type_name -> aggregator.ListSecretsResp.ResponseSecret
	76, // 47: aggregator.ContractWriteNode.Output.user_op:type_name -> aggregator.Evm.UserOp
	75, // 48: aggregator.ContractWriteNode.Output.tx_receipt:type_name -> aggregator.Evm.TransactionReceipt
	78, // 49: aggregator.ContractReadNode.Output.data:type_name -> google.protobuf.Value
	79, // 50: aggregator.GraphQLQueryNode.Output.data:type_name -> google.protobuf.Any
	79, // 51: aggregator.RestAPINode.Output.data:type_name -> google.protobuf.Any
	79, // 52: aggregator.CustomCodeNode.Output.data:type_name -> google.protobuf.Any
	79, // 53: aggregator.FilterNode.Output.data:type_name -> google.protobuf.Any
	57, // 54: aggregator.Execution.Step.eth_transfer:type_name -> aggregator.ETHTransferNode.Output
	61, // 55: aggregator.Execution.Step.graphql:type_name -> aggregator.GraphQLQueryNode.Output
	59, // 56: aggregator.Execution.Step.contract_read:type_name -> aggregator.ContractReadNode.Output
	58, // 57: aggregator.Execution.Step.contract_write:type_name -> aggregator.ContractWriteNode.Output
	64, // 58: aggregator.Execution.Step.custom_code:type_name -> aggregator.CustomCodeNode.Output
	63, // 59: aggregator.Execution.Step.rest_api:type_name -> aggregator.RestAPINode.Output
	65, // 60: aggregator.Execution.Step.branch:type_name -> aggregator.BranchNode.Output
	66, // 61: aggregator.Execution.Step.filter:type_name -> aggregator.FilterNode.Output
	67, // 62: aggregator.Execution.Step.loop:type_name -> aggregator.LoopNode.Output
	1,  // 63: aggregator.ListTasksResp.Item.status:type_name -> aggregator.TaskStatus
	10, // 64: aggregator.ListTasksResp.Item.trigger:type_name -> aggregator.TaskTrigger
	38, // 65: aggregator.Aggregator.GetKey:input_type -> aggregator.GetKeyReq
	27, // 66: aggregator.Aggregator.GetNonce:input_type -> aggregator.NonceRequest
	41, // 67: aggregator.Aggregator.GetWallet:input_type -> aggregator.GetWalletReq
	29, // 68: aggregator.Aggregator.ListWallets:input_type -> aggregator.ListWalletReq
	25, // 69: aggregator.Aggregator.CreateTask:input_type -> aggregator.CreateTaskReq
	32, // 70: aggregator.Aggregator.ListTasks:input_type -> aggregator.ListTasksReq
	5,  // 71: aggregator.Aggregator.GetTask:input_type -> aggregator.IdReq
	34, // 72: aggregator.Aggregator.ListExecutions:input_type -> aggregator.ListExecutionsReq
	36, // 73: aggregator.Aggregator.GetExecution:input_type -> aggregator.ExecutionReq
	36, // 74: aggregator.Aggregator.GetExecutionStatus:input_type -> aggregator.ExecutionReq
	5,  // 75: aggregator.Aggregator.CancelTask:input_type -> aggregator.IdReq
	5,  // 76: aggregator.Aggregator.DeleteTask:input_type -> aggregator.IdReq
	43, // 77: aggregator.Aggregator.TriggerTask:input_type -> aggregator.UserTriggerTaskReq
	45, // 78: aggregator.Aggregator.CreateSecret:input_type -> aggregator.CreateOrUpdateSecretReq
	48, // 79: aggregator.Aggregator.DeleteSecret:input_type -> aggregator.DeleteSecretReq
	46, // 80: aggregator.Aggregator.ListSecrets:input_type -> aggregator.ListSecretsReq
	45, // 81: aggregator.Aggregator.UpdateSecret:input_type -> aggregator.CreateOrUpdateSecretReq
	49, // 82: aggregator.Aggregator.GetWorkflowCount:input_type -> aggregator.GetWorkflowCountReq
	51, // 83: aggregator.Aggregator.GetExecutionCount:input_type -> aggregator.GetExecutionCountReq
	53, // 84: aggregator.Aggregator.GetExecutionStats:input_type -> aggregator.GetExecutionStatsReq
	39, // 85: aggregator.Aggregator.GetKey:output_type -> aggregator.KeyResp
	28, // 86: aggregator.Aggregator.GetNonce:output_type -> aggregator.NonceResp
	42, // 87: aggregator.Aggregator.GetWallet:output_type -> aggregator.GetWalletResp
	31, // 88: aggregator.Aggregator.ListWallets:output_type -> aggregator.ListWalletResp
	26, // 89: aggregator.Aggregator.CreateTask:output_type -> aggregator.CreateTaskResp
	33, // 90: aggregator.Aggregator.ListTasks:output_type -> aggregator.ListTasksResp
	24, // 91: aggregator.Aggregator.GetTask:output_type -> aggregator.Task
	35, // 92: aggregator.Aggregator.ListExecutions:output_type -> aggregator.ListExecutionsResp
	23, // 93: aggregator.Aggregator.GetExecution:output_type -> aggregator.Execution
	37, // 94: aggregator.Aggregator.GetExecutionStatus:output_type -> aggregator.ExecutionStatusResp
	80, // 95: aggregator.Aggregator.CancelTask:output_type -> google.protobuf.BoolValue
	80, // 96: aggregator.Aggregator.DeleteTask:output_type -> google.protobuf.BoolValue
	44, // 97: aggregator.Aggregator.TriggerTask:output_type -> aggregator.UserTriggerTaskResp
	80, // 98: aggregator.Aggregator.CreateSecret:output_type -> google.protobuf.BoolValue
	80, // 99: aggregator.Aggregator.DeleteSecret:output_type -> google.protobuf.BoolValue
	47, // 100: aggregator.Aggregator.ListSecrets:output_type -> aggregator.ListSecretsResp
	80, // 101: aggregator.Aggregator.UpdateSecret:output_type -> google.protobuf.BoolValue
	50, // 102: aggregator.Aggregator.GetWorkflowCount:output_type -> aggregator.GetWorkflowCountResp
	52, // 103: aggregator.Aggregator.GetExecutionCount:output_type -> aggregator.GetExecutionCountResp
	54, // 104: aggregator.Aggregator.GetExecutionStats:output_type -> aggregator.GetExecutionStatsResp
	85, // [85:105] is the sub-list for method output_type
	65, // [65:85] is the sub-list for method input_type
	65, // [65:65] is the sub-list for extension type_name
	65, // [65:65] is the sub-list for extension extendee
	0,  // [0:65] is the sub-list for field type_name
}

func init() { file_avs_proto_init() }
func file_avs_proto_init() {
	if File_avs_proto != nil {
		return
	}
	file_avs_proto_msgTypes[5].OneofWrappers = []any{
		(*TaskTrigger_Manual)(nil),
		(*TaskTrigger_FixedTime)(nil),
		(*TaskTrigger_Cron)(nil),
		(*TaskTrigger_Block)(nil),
		(*TaskTrigger_Event)(nil),
	}
	file_avs_proto_msgTypes[15].OneofWrappers = []any{
		(*LoopNode_EthTransfer)(nil),
		(*LoopNode_ContractWrite)(nil),
		(*LoopNode_ContractRead)(nil),
		(*LoopNode_GraphqlDataQuery)(nil),
		(*LoopNode_RestApi)(nil),
		(*LoopNode_CustomCode)(nil),
	}
	file_avs_proto_msgTypes[17].OneofWrappers = []any{
		(*TaskNode_EthTransfer)(nil),
		(*TaskNode_ContractWrite)(nil),
		(*TaskNode_ContractRead)(nil),
		(*TaskNode_GraphqlQuery)(nil),
		(*TaskNode_RestApi)(nil),
		(*TaskNode_Branch)(nil),
		(*TaskNode_Filter)(nil),
		(*TaskNode_Loop)(nil),
		(*TaskNode_CustomCode)(nil),
	}
	file_avs_proto_msgTypes[18].OneofWrappers = []any{
		(*Execution_TransferLog)(nil),
		(*Execution_EvmLog)(nil),
		(*Execution_Block)(nil),
		(*Execution_Time)(nil),
	}
	file_avs_proto_msgTypes[63].OneofWrappers = []any{
		(*Execution_Step_EthTransfer)(nil),
		(*Execution_Step_Graphql)(nil),
		(*Execution_Step_ContractRead)(nil),
		(*Execution_Step_ContractWrite)(nil),
		(*Execution_Step_CustomCode)(nil),
		(*Execution_Step_RestApi)(nil),
		(*Execution_Step_Branch)(nil),
		(*Execution_Step_Filter)(nil),
		(*Execution_Step_Loop)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_avs_proto_rawDesc), len(file_avs_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   72,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_avs_proto_goTypes,
		DependencyIndexes: file_avs_proto_depIdxs,
		EnumInfos:         file_avs_proto_enumTypes,
		MessageInfos:      file_avs_proto_msgTypes,
	}.Build()
	File_avs_proto = out.File
	file_avs_proto_goTypes = nil
	file_avs_proto_depIdxs = nil
}
