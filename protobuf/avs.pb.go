// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.27.0
// source: protobuf/avs.proto

package avsproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TriggerType int32

const (
	TriggerType_TimeTrigger          TriggerType = 0
	TriggerType_ContractQueryTrigger TriggerType = 1
	TriggerType_ExpressionTrigger    TriggerType = 2
)

// Enum value maps for TriggerType.
var (
	TriggerType_name = map[int32]string{
		0: "TimeTrigger",
		1: "ContractQueryTrigger",
		2: "ExpressionTrigger",
	}
	TriggerType_value = map[string]int32{
		"TimeTrigger":          0,
		"ContractQueryTrigger": 1,
		"ExpressionTrigger":    2,
	}
)

func (x TriggerType) Enum() *TriggerType {
	p := new(TriggerType)
	*p = x
	return p
}

func (x TriggerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriggerType) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_avs_proto_enumTypes[0].Descriptor()
}

func (TriggerType) Type() protoreflect.EnumType {
	return &file_protobuf_avs_proto_enumTypes[0]
}

func (x TriggerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriggerType.Descriptor instead.
func (TriggerType) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{0}
}

// gRPC internal error code use up to 17, we extend and start from 1000 to avoid any conflict
// Guide: https://grpc.io/docs/guides/error/
// Go: https://github.com/grpc/grpc-go/blob/master/codes/codes.go#L199
type Error int32

const (
	// An error that happen when the app can be recovered but the cause is unknow, rarely use, we try to use specific error as much as we can
	Error_UnknowError Error = 0
	// internal rpc node error
	Error_RpcNodeError Error = 1000
	// storage system isn't available to respond to query
	Error_StorageUnavailable Error = 2000
	Error_StorageWriteError  Error = 2001
	// target chain of smart wallet is error and cannot used to determine smartwallet info
	Error_SmartWalletRpcError      Error = 6000
	Error_SmartWalletNotFoundError Error = 6001
	// Error occurs when we failed to migrat task data and it cannot be decoden
	Error_TaskDataCorrupted Error = 7000
)

// Enum value maps for Error.
var (
	Error_name = map[int32]string{
		0:    "UnknowError",
		1000: "RpcNodeError",
		2000: "StorageUnavailable",
		2001: "StorageWriteError",
		6000: "SmartWalletRpcError",
		6001: "SmartWalletNotFoundError",
		7000: "TaskDataCorrupted",
	}
	Error_value = map[string]int32{
		"UnknowError":              0,
		"RpcNodeError":             1000,
		"StorageUnavailable":       2000,
		"StorageWriteError":        2001,
		"SmartWalletRpcError":      6000,
		"SmartWalletNotFoundError": 6001,
		"TaskDataCorrupted":        7000,
	}
)

func (x Error) Enum() *Error {
	p := new(Error)
	*p = x
	return p
}

func (x Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Error) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_avs_proto_enumTypes[1].Descriptor()
}

func (Error) Type() protoreflect.EnumType {
	return &file_protobuf_avs_proto_enumTypes[1]
}

func (x Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Error.Descriptor instead.
func (Error) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{1}
}

// TaskType represents what kind of work the task will perform
type TaskType int32

const (
	// Handle default/missing data
	TaskType_ETHTransferTask TaskType = 0
	// Generic contract execution which can be used for:
	// ERC20 Transfer, NFT Transfer, auto reclaim, auto restaking etc
	// When executing a contract we need at least 2 things:
	// - target contract address
	// - the message to send to that contract
	TaskType_ContractExecutionTask TaskType = 1
	TaskType_GraphQLDataQueryTask  TaskType = 2
	// Make call to a HTTP endpoint
	TaskType_HTTPAPICallTask TaskType = 3
	// CustomCode allow to run arbitraty JavaScript.
	TaskType_CustomCodeTask   TaskType = 4
	TaskType_BranchActionTask TaskType = 5
)

// Enum value maps for TaskType.
var (
	TaskType_name = map[int32]string{
		0: "ETHTransferTask",
		1: "ContractExecutionTask",
		2: "GraphQLDataQueryTask",
		3: "HTTPAPICallTask",
		4: "CustomCodeTask",
		5: "BranchActionTask",
	}
	TaskType_value = map[string]int32{
		"ETHTransferTask":       0,
		"ContractExecutionTask": 1,
		"GraphQLDataQueryTask":  2,
		"HTTPAPICallTask":       3,
		"CustomCodeTask":        4,
		"BranchActionTask":      5,
	}
)

func (x TaskType) Enum() *TaskType {
	p := new(TaskType)
	*p = x
	return p
}

func (x TaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_avs_proto_enumTypes[2].Descriptor()
}

func (TaskType) Type() protoreflect.EnumType {
	return &file_protobuf_avs_proto_enumTypes[2]
}

func (x TaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskType.Descriptor instead.
func (TaskType) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{2}
}

// TaskStatus represents status of the task. The transition is as follow
type TaskStatus int32

const (
	TaskStatus_Active    TaskStatus = 0
	TaskStatus_Completed TaskStatus = 1
	TaskStatus_Failed    TaskStatus = 2
	TaskStatus_Canceled  TaskStatus = 3
	TaskStatus_Executing TaskStatus = 4
)

// Enum value maps for TaskStatus.
var (
	TaskStatus_name = map[int32]string{
		0: "Active",
		1: "Completed",
		2: "Failed",
		3: "Canceled",
		4: "Executing",
	}
	TaskStatus_value = map[string]int32{
		"Active":    0,
		"Completed": 1,
		"Failed":    2,
		"Canceled":  3,
		"Executing": 4,
	}
)

func (x TaskStatus) Enum() *TaskStatus {
	p := new(TaskStatus)
	*p = x
	return p
}

func (x TaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_avs_proto_enumTypes[3].Descriptor()
}

func (TaskStatus) Type() protoreflect.EnumType {
	return &file_protobuf_avs_proto_enumTypes[3]
}

func (x TaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatus.Descriptor instead.
func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{3}
}

type CustomCodeType int32

const (
	CustomCodeType_JavaScript CustomCodeType = 0
)

// Enum value maps for CustomCodeType.
var (
	CustomCodeType_name = map[int32]string{
		0: "JavaScript",
	}
	CustomCodeType_value = map[string]int32{
		"JavaScript": 0,
	}
)

func (x CustomCodeType) Enum() *CustomCodeType {
	p := new(CustomCodeType)
	*p = x
	return p
}

func (x CustomCodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CustomCodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_avs_proto_enumTypes[4].Descriptor()
}

func (CustomCodeType) Type() protoreflect.EnumType {
	return &file_protobuf_avs_proto_enumTypes[4]
}

func (x CustomCodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CustomCodeType.Descriptor instead.
func (CustomCodeType) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{4}
}

type UUID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bytes string `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *UUID) Reset() {
	*x = UUID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UUID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UUID) ProtoMessage() {}

func (x *UUID) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UUID.ProtoReflect.Descriptor instead.
func (*UUID) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{0}
}

func (x *UUID) GetBytes() string {
	if x != nil {
		return x.Bytes
	}
	return ""
}

type Checkin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address     string          `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Signature   string          `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	Status      *Checkin_Status `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Version     string          `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	MetricsPort int32           `protobuf:"varint,6,opt,name=metricsPort,proto3" json:"metricsPort,omitempty"`
	RemoteIP    string          `protobuf:"bytes,7,opt,name=remoteIP,proto3" json:"remoteIP,omitempty"`
}

func (x *Checkin) Reset() {
	*x = Checkin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Checkin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Checkin) ProtoMessage() {}

func (x *Checkin) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Checkin.ProtoReflect.Descriptor instead.
func (*Checkin) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{1}
}

func (x *Checkin) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Checkin) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Checkin) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *Checkin) GetStatus() *Checkin_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Checkin) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Checkin) GetMetricsPort() int32 {
	if x != nil {
		return x.MetricsPort
	}
	return 0
}

func (x *Checkin) GetRemoteIP() string {
	if x != nil {
		return x.RemoteIP
	}
	return ""
}

type CheckinResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *CheckinResp) Reset() {
	*x = CheckinResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckinResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckinResp) ProtoMessage() {}

func (x *CheckinResp) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckinResp.ProtoReflect.Descriptor instead.
func (*CheckinResp) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{2}
}

func (x *CheckinResp) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type SyncTasksReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address        string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Signature      string `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	MonotonicClock int64  `protobuf:"varint,4,opt,name=monotonic_clock,json=monotonicClock,proto3" json:"monotonic_clock,omitempty"`
}

func (x *SyncTasksReq) Reset() {
	*x = SyncTasksReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncTasksReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncTasksReq) ProtoMessage() {}

func (x *SyncTasksReq) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncTasksReq.ProtoReflect.Descriptor instead.
func (*SyncTasksReq) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{3}
}

func (x *SyncTasksReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SyncTasksReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SyncTasksReq) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *SyncTasksReq) GetMonotonicClock() int64 {
	if x != nil {
		return x.MonotonicClock
	}
	return 0
}

type TaskTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerType   TriggerType             `protobuf:"varint,1,opt,name=trigger_type,json=triggerType,proto3,enum=aggregator.TriggerType" json:"trigger_type,omitempty"`
	Schedule      *TimeCondition          `protobuf:"bytes,2,opt,name=schedule,proto3" json:"schedule,omitempty"`
	ContractQuery *ContractQueryCondition `protobuf:"bytes,3,opt,name=contract_query,json=contractQuery,proto3" json:"contract_query,omitempty"`
	Expression    *ExpressionCondition    `protobuf:"bytes,4,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *TaskTrigger) Reset() {
	*x = TaskTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskTrigger) ProtoMessage() {}

func (x *TaskTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskTrigger.ProtoReflect.Descriptor instead.
func (*TaskTrigger) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{4}
}

func (x *TaskTrigger) GetTriggerType() TriggerType {
	if x != nil {
		return x.TriggerType
	}
	return TriggerType_TimeTrigger
}

func (x *TaskTrigger) GetSchedule() *TimeCondition {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *TaskTrigger) GetContractQuery() *ContractQueryCondition {
	if x != nil {
		return x.ContractQuery
	}
	return nil
}

func (x *TaskTrigger) GetExpression() *ExpressionCondition {
	if x != nil {
		return x.Expression
	}
	return nil
}

// Simple timebase or cron syntax.
type TimeCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fixed []int64 `protobuf:"varint,1,rep,packed,name=fixed,proto3" json:"fixed,omitempty"`
	Cron  string  `protobuf:"bytes,2,opt,name=cron,proto3" json:"cron,omitempty"`
}

func (x *TimeCondition) Reset() {
	*x = TimeCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeCondition) ProtoMessage() {}

func (x *TimeCondition) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeCondition.ProtoReflect.Descriptor instead.
func (*TimeCondition) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{5}
}

func (x *TimeCondition) GetFixed() []int64 {
	if x != nil {
		return x.Fixed
	}
	return nil
}

func (x *TimeCondition) GetCron() string {
	if x != nil {
		return x.Cron
	}
	return ""
}

// A contract method that return true/false
// Ideally to use when we already have an existing contract that perform the
// check.
// This method will be evaluate every block
type ContractQueryCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Callmsg         string `protobuf:"bytes,2,opt,name=callmsg,proto3" json:"callmsg,omitempty"`
}

func (x *ContractQueryCondition) Reset() {
	*x = ContractQueryCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractQueryCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractQueryCondition) ProtoMessage() {}

func (x *ContractQueryCondition) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractQueryCondition.ProtoReflect.Descriptor instead.
func (*ContractQueryCondition) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{6}
}

func (x *ContractQueryCondition) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *ContractQueryCondition) GetCallmsg() string {
	if x != nil {
		return x.Callmsg
	}
	return ""
}

// An arbitrary expression to express the condition.
// People can define condition example
//
//	chainlinkPrice("address-of-eth-usd-pair") > 2644500 && queryContract("contractaddress", "callmsg")[2] < = 5
//
// By allow arbitrary expression, people can mix and match to create conplex
// condition that match their workload
//
// The function to be used need to be pre-defined on our task egnine runtime.
// When a new block is build, our engine will execute these check
//
// The expression language is re-present by https://expr-lang.org/
type ExpressionCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression string `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *ExpressionCondition) Reset() {
	*x = ExpressionCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpressionCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpressionCondition) ProtoMessage() {}

func (x *ExpressionCondition) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpressionCondition.ProtoReflect.Descriptor instead.
func (*ExpressionCondition) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{7}
}

func (x *ExpressionCondition) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

type SyncTasksResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CheckType string       `protobuf:"bytes,2,opt,name=checkType,proto3" json:"checkType,omitempty"`
	Trigger   *TaskTrigger `protobuf:"bytes,3,opt,name=trigger,proto3" json:"trigger,omitempty"`
}

func (x *SyncTasksResp) Reset() {
	*x = SyncTasksResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncTasksResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncTasksResp) ProtoMessage() {}

func (x *SyncTasksResp) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncTasksResp.ProtoReflect.Descriptor instead.
func (*SyncTasksResp) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{8}
}

func (x *SyncTasksResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SyncTasksResp) GetCheckType() string {
	if x != nil {
		return x.CheckType
	}
	return ""
}

func (x *SyncTasksResp) GetTrigger() *TaskTrigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

type ETHTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destination string `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	Amount      string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *ETHTransfer) Reset() {
	*x = ETHTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ETHTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ETHTransfer) ProtoMessage() {}

func (x *ETHTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ETHTransfer.ProtoReflect.Descriptor instead.
func (*ETHTransfer) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{9}
}

func (x *ETHTransfer) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *ETHTransfer) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type ContractExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	CallData        string `protobuf:"bytes,2,opt,name=call_data,json=callData,proto3" json:"call_data,omitempty"`
	Method          string `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	EncodedParams   string `protobuf:"bytes,4,opt,name=encoded_params,json=encodedParams,proto3" json:"encoded_params,omitempty"`
}

func (x *ContractExecution) Reset() {
	*x = ContractExecution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractExecution) ProtoMessage() {}

func (x *ContractExecution) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractExecution.ProtoReflect.Descriptor instead.
func (*ContractExecution) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{10}
}

func (x *ContractExecution) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *ContractExecution) GetCallData() string {
	if x != nil {
		return x.CallData
	}
	return ""
}

func (x *ContractExecution) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *ContractExecution) GetEncodedParams() string {
	if x != nil {
		return x.EncodedParams
	}
	return ""
}

type GraphQLDataQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: support graphql variable
	Url   string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *GraphQLDataQuery) Reset() {
	*x = GraphQLDataQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQLDataQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLDataQuery) ProtoMessage() {}

func (x *GraphQLDataQuery) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLDataQuery.ProtoReflect.Descriptor instead.
func (*GraphQLDataQuery) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{11}
}

func (x *GraphQLDataQuery) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GraphQLDataQuery) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type HTTPAPICall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url     string            `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Headers map[string]string `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Body    string            `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *HTTPAPICall) Reset() {
	*x = HTTPAPICall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPAPICall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPAPICall) ProtoMessage() {}

func (x *HTTPAPICall) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPAPICall.ProtoReflect.Descriptor instead.
func (*HTTPAPICall) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{12}
}

func (x *HTTPAPICall) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *HTTPAPICall) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HTTPAPICall) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

type CustomCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type CustomCodeType `protobuf:"varint,1,opt,name=type,proto3,enum=aggregator.CustomCodeType" json:"type,omitempty"`
	Body string         `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *CustomCode) Reset() {
	*x = CustomCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomCode) ProtoMessage() {}

func (x *CustomCode) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomCode.ProtoReflect.Descriptor instead.
func (*CustomCode) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{13}
}

func (x *CustomCode) GetType() CustomCodeType {
	if x != nil {
		return x.Type
	}
	return CustomCodeType_JavaScript
}

func (x *CustomCode) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

type ConditionJump struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression string `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	Next       string `protobuf:"bytes,2,opt,name=next,proto3" json:"next,omitempty"`
}

func (x *ConditionJump) Reset() {
	*x = ConditionJump{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionJump) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionJump) ProtoMessage() {}

func (x *ConditionJump) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionJump.ProtoReflect.Descriptor instead.
func (*ConditionJump) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{14}
}

func (x *ConditionJump) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *ConditionJump) GetNext() string {
	if x != nil {
		return x.Next
	}
	return ""
}

type BranchAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	If      *ConditionJump   `protobuf:"bytes,1,opt,name=If,proto3" json:"If,omitempty"`
	ElseIfs []*ConditionJump `protobuf:"bytes,2,rep,name=ElseIfs,proto3" json:"ElseIfs,omitempty"`
	Else    *ConditionJump   `protobuf:"bytes,3,opt,name=Else,proto3" json:"Else,omitempty"`
}

func (x *BranchAction) Reset() {
	*x = BranchAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchAction) ProtoMessage() {}

func (x *BranchAction) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchAction.ProtoReflect.Descriptor instead.
func (*BranchAction) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{15}
}

func (x *BranchAction) GetIf() *ConditionJump {
	if x != nil {
		return x.If
	}
	return nil
}

func (x *BranchAction) GetElseIfs() []*ConditionJump {
	if x != nil {
		return x.ElseIfs
	}
	return nil
}

func (x *BranchAction) GetElse() *ConditionJump {
	if x != nil {
		return x.Else
	}
	return nil
}

type TaskAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskType TaskType `protobuf:"varint,1,opt,name=task_type,json=taskType,proto3,enum=aggregator.TaskType" json:"task_type,omitempty"`
	Id       string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name     string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Next can be empty. In some kind of block, such as branching, the next is
	// based on branching condition
	Next []string `protobuf:"bytes,4,rep,name=next,proto3" json:"next,omitempty"`
	// Transfer eth
	EthTransfer *ETHTransfer `protobuf:"bytes,10,opt,name=eth_transfer,json=ethTransfer,proto3" json:"eth_transfer,omitempty"`
	// Run one ore more contracts. The call call also be batched with tool like
	// multicall to wrap many calls
	ContractExecution *ContractExecution `protobuf:"bytes,11,opt,name=contract_execution,json=contractExecution,proto3" json:"contract_execution,omitempty"`
	// Make call to a graphql endpoint
	GraphqlDataQuery *GraphQLDataQuery `protobuf:"bytes,12,opt,name=graphql_data_query,json=graphqlDataQuery,proto3" json:"graphql_data_query,omitempty"`
	// Make call to a HTTP endpoint
	HttpDataQuery *HTTPAPICall `protobuf:"bytes,13,opt,name=http_data_query,json=httpDataQuery,proto3" json:"http_data_query,omitempty"`
	// CustomCode allow to run arbitraty JavaScript.
	CustomCode *CustomCode   `protobuf:"bytes,14,opt,name=custom_code,json=customCode,proto3" json:"custom_code,omitempty"`
	Branch     *BranchAction `protobuf:"bytes,15,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *TaskAction) Reset() {
	*x = TaskAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAction) ProtoMessage() {}

func (x *TaskAction) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAction.ProtoReflect.Descriptor instead.
func (*TaskAction) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{16}
}

func (x *TaskAction) GetTaskType() TaskType {
	if x != nil {
		return x.TaskType
	}
	return TaskType_ETHTransferTask
}

func (x *TaskAction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskAction) GetNext() []string {
	if x != nil {
		return x.Next
	}
	return nil
}

func (x *TaskAction) GetEthTransfer() *ETHTransfer {
	if x != nil {
		return x.EthTransfer
	}
	return nil
}

func (x *TaskAction) GetContractExecution() *ContractExecution {
	if x != nil {
		return x.ContractExecution
	}
	return nil
}

func (x *TaskAction) GetGraphqlDataQuery() *GraphQLDataQuery {
	if x != nil {
		return x.GraphqlDataQuery
	}
	return nil
}

func (x *TaskAction) GetHttpDataQuery() *HTTPAPICall {
	if x != nil {
		return x.HttpDataQuery
	}
	return nil
}

func (x *TaskAction) GetCustomCode() *CustomCode {
	if x != nil {
		return x.CustomCode
	}
	return nil
}

func (x *TaskAction) GetBranch() *BranchAction {
	if x != nil {
		return x.Branch
	}
	return nil
}

type Execution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch      int64  `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	UserOpHash string `protobuf:"bytes,2,opt,name=user_op_hash,json=userOpHash,proto3" json:"user_op_hash,omitempty"`
	Error      string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *Execution) Reset() {
	*x = Execution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Execution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Execution) ProtoMessage() {}

func (x *Execution) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Execution.ProtoReflect.Descriptor instead.
func (*Execution) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{17}
}

func (x *Execution) GetEpoch() int64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *Execution) GetUserOpHash() string {
	if x != nil {
		return x.UserOpHash
	}
	return ""
}

func (x *Execution) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 *UUID         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner              string        `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	SmartWalletAddress string        `protobuf:"bytes,3,opt,name=smart_wallet_address,json=smartWalletAddress,proto3" json:"smart_wallet_address,omitempty"`
	Trigger            *TaskTrigger  `protobuf:"bytes,4,opt,name=trigger,proto3" json:"trigger,omitempty"`
	Nodes              []*TaskAction `protobuf:"bytes,5,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// task won't be check before this
	StartAt int64 `protobuf:"varint,6,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	// task won't be run/check after this
	ExpiredAt int64 `protobuf:"varint,7,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`
	// arbitrary data about this task
	Memo        string     `protobuf:"bytes,8,opt,name=memo,proto3" json:"memo,omitempty"`
	CompletedAt int64      `protobuf:"varint,9,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	Status      TaskStatus `protobuf:"varint,10,opt,name=status,proto3,enum=aggregator.TaskStatus" json:"status,omitempty"`
	// repeatable means a task can continue to run even after the first execution
	Repeatable bool         `protobuf:"varint,11,opt,name=repeatable,proto3" json:"repeatable,omitempty"`
	Executions []*Execution `protobuf:"bytes,12,rep,name=executions,proto3" json:"executions,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{18}
}

func (x *Task) GetId() *UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Task) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Task) GetSmartWalletAddress() string {
	if x != nil {
		return x.SmartWalletAddress
	}
	return ""
}

func (x *Task) GetTrigger() *TaskTrigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

func (x *Task) GetNodes() []*TaskAction {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Task) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *Task) GetExpiredAt() int64 {
	if x != nil {
		return x.ExpiredAt
	}
	return 0
}

func (x *Task) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *Task) GetCompletedAt() int64 {
	if x != nil {
		return x.CompletedAt
	}
	return 0
}

func (x *Task) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_Active
}

func (x *Task) GetRepeatable() bool {
	if x != nil {
		return x.Repeatable
	}
	return false
}

func (x *Task) GetExecutions() []*Execution {
	if x != nil {
		return x.Executions
	}
	return nil
}

type CreateTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trigger   *TaskTrigger  `protobuf:"bytes,1,opt,name=trigger,proto3" json:"trigger,omitempty"`
	Actions   []*TaskAction `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty"`
	StartAt   int64         `protobuf:"varint,3,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	ExpiredAt int64         `protobuf:"varint,4,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`
	Memo      string        `protobuf:"bytes,5,opt,name=memo,proto3" json:"memo,omitempty"`
	// A repeatable task will continue to be run
	Repeatable bool `protobuf:"varint,6,opt,name=repeatable,proto3" json:"repeatable,omitempty"`
	// the smart wallet address that will be used to run this task
	// When leaving out, we will use the default(salt=0) wallet
	SmartWalletAddress string `protobuf:"bytes,7,opt,name=smart_wallet_address,json=smartWalletAddress,proto3" json:"smart_wallet_address,omitempty"`
}

func (x *CreateTaskReq) Reset() {
	*x = CreateTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskReq) ProtoMessage() {}

func (x *CreateTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskReq.ProtoReflect.Descriptor instead.
func (*CreateTaskReq) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{19}
}

func (x *CreateTaskReq) GetTrigger() *TaskTrigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

func (x *CreateTaskReq) GetActions() []*TaskAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *CreateTaskReq) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *CreateTaskReq) GetExpiredAt() int64 {
	if x != nil {
		return x.ExpiredAt
	}
	return 0
}

func (x *CreateTaskReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *CreateTaskReq) GetRepeatable() bool {
	if x != nil {
		return x.Repeatable
	}
	return false
}

func (x *CreateTaskReq) GetSmartWalletAddress() string {
	if x != nil {
		return x.SmartWalletAddress
	}
	return ""
}

type CreateTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateTaskResp) Reset() {
	*x = CreateTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskResp) ProtoMessage() {}

func (x *CreateTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskResp.ProtoReflect.Descriptor instead.
func (*CreateTaskResp) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{20}
}

func (x *CreateTaskResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type NonceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *NonceRequest) Reset() {
	*x = NonceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonceRequest) ProtoMessage() {}

func (x *NonceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonceRequest.ProtoReflect.Descriptor instead.
func (*NonceRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{21}
}

func (x *NonceRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

type NonceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce string `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *NonceResp) Reset() {
	*x = NonceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonceResp) ProtoMessage() {}

func (x *NonceResp) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonceResp.ProtoReflect.Descriptor instead.
func (*NonceResp) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{22}
}

func (x *NonceResp) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

type AddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// filter out by factory address or salt
	// otherwise return all the wallet
	Factory string `protobuf:"bytes,1,opt,name=factory,proto3" json:"factory,omitempty"`
	Salt    string `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
}

func (x *AddressRequest) Reset() {
	*x = AddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressRequest) ProtoMessage() {}

func (x *AddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressRequest.ProtoReflect.Descriptor instead.
func (*AddressRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{23}
}

func (x *AddressRequest) GetFactory() string {
	if x != nil {
		return x.Factory
	}
	return ""
}

func (x *AddressRequest) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

type SmartWallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Salt    string `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
	Factory string `protobuf:"bytes,3,opt,name=factory,proto3" json:"factory,omitempty"`
}

func (x *SmartWallet) Reset() {
	*x = SmartWallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartWallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartWallet) ProtoMessage() {}

func (x *SmartWallet) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartWallet.ProtoReflect.Descriptor instead.
func (*SmartWallet) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{24}
}

func (x *SmartWallet) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SmartWallet) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *SmartWallet) GetFactory() string {
	if x != nil {
		return x.Factory
	}
	return ""
}

type AddressResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wallets []*SmartWallet `protobuf:"bytes,1,rep,name=wallets,proto3" json:"wallets,omitempty"`
}

func (x *AddressResp) Reset() {
	*x = AddressResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressResp) ProtoMessage() {}

func (x *AddressResp) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressResp.ProtoReflect.Descriptor instead.
func (*AddressResp) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{25}
}

func (x *AddressResp) GetWallets() []*SmartWallet {
	if x != nil {
		return x.Wallets
	}
	return nil
}

type ListTasksReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter out by the smart_wallet_address
	SmartWalletAddress string `protobuf:"bytes,1,opt,name=smart_wallet_address,json=smartWalletAddress,proto3" json:"smart_wallet_address,omitempty"`
}

func (x *ListTasksReq) Reset() {
	*x = ListTasksReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTasksReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksReq) ProtoMessage() {}

func (x *ListTasksReq) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksReq.ProtoReflect.Descriptor instead.
func (*ListTasksReq) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{26}
}

func (x *ListTasksReq) GetSmartWalletAddress() string {
	if x != nil {
		return x.SmartWalletAddress
	}
	return ""
}

type ListTasksResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*Task `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *ListTasksResp) Reset() {
	*x = ListTasksResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTasksResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksResp) ProtoMessage() {}

func (x *ListTasksResp) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksResp.ProtoReflect.Descriptor instead.
func (*ListTasksResp) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{27}
}

func (x *ListTasksResp) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type GetKeyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner     string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	ExpiredAt int64  `protobuf:"varint,2,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`
	Signature string `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *GetKeyReq) Reset() {
	*x = GetKeyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyReq) ProtoMessage() {}

func (x *GetKeyReq) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyReq.ProtoReflect.Descriptor instead.
func (*GetKeyReq) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{28}
}

func (x *GetKeyReq) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *GetKeyReq) GetExpiredAt() int64 {
	if x != nil {
		return x.ExpiredAt
	}
	return 0
}

func (x *GetKeyReq) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type KeyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *KeyResp) Reset() {
	*x = KeyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyResp) ProtoMessage() {}

func (x *KeyResp) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyResp.ProtoReflect.Descriptor instead.
func (*KeyResp) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{29}
}

func (x *KeyResp) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type UpdateChecksReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address   string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Signature string   `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Id        []string `protobuf:"bytes,3,rep,name=id,proto3" json:"id,omitempty"`
}

func (x *UpdateChecksReq) Reset() {
	*x = UpdateChecksReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChecksReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChecksReq) ProtoMessage() {}

func (x *UpdateChecksReq) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChecksReq.ProtoReflect.Descriptor instead.
func (*UpdateChecksReq) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{30}
}

func (x *UpdateChecksReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UpdateChecksReq) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *UpdateChecksReq) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

type UpdateChecksResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *UpdateChecksResp) Reset() {
	*x = UpdateChecksResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChecksResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChecksResp) ProtoMessage() {}

func (x *UpdateChecksResp) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChecksResp.ProtoReflect.Descriptor instead.
func (*UpdateChecksResp) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{31}
}

func (x *UpdateChecksResp) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type CreateWalletReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salt string `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	// this is the factory address for the wallet, when leaving its empty, we will use our default factory address
	FactoryAddress string `protobuf:"bytes,2,opt,name=factory_address,json=factoryAddress,proto3" json:"factory_address,omitempty"`
}

func (x *CreateWalletReq) Reset() {
	*x = CreateWalletReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWalletReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWalletReq) ProtoMessage() {}

func (x *CreateWalletReq) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWalletReq.ProtoReflect.Descriptor instead.
func (*CreateWalletReq) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{32}
}

func (x *CreateWalletReq) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *CreateWalletReq) GetFactoryAddress() string {
	if x != nil {
		return x.FactoryAddress
	}
	return ""
}

type CreateWalletResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *CreateWalletResp) Reset() {
	*x = CreateWalletResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWalletResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWalletResp) ProtoMessage() {}

func (x *CreateWalletResp) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWalletResp.ProtoReflect.Descriptor instead.
func (*CreateWalletResp) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{33}
}

func (x *CreateWalletResp) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type Checkin_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uptime        int64                  `protobuf:"varint,1,opt,name=uptime,proto3" json:"uptime,omitempty"`
	QueueDepth    int64                  `protobuf:"varint,2,opt,name=queueDepth,proto3" json:"queueDepth,omitempty"`
	LastHeartbeat *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_heartbeat,json=lastHeartbeat,proto3" json:"last_heartbeat,omitempty"`
}

func (x *Checkin_Status) Reset() {
	*x = Checkin_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Checkin_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Checkin_Status) ProtoMessage() {}

func (x *Checkin_Status) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Checkin_Status.ProtoReflect.Descriptor instead.
func (*Checkin_Status) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Checkin_Status) GetUptime() int64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *Checkin_Status) GetQueueDepth() int64 {
	if x != nil {
		return x.QueueDepth
	}
	return 0
}

func (x *Checkin_Status) GetLastHeartbeat() *timestamppb.Timestamp {
	if x != nil {
		return x.LastHeartbeat
	}
	return nil
}

var File_protobuf_avs_proto protoreflect.FileDescriptor

var file_protobuf_avs_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x76, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x1c, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22,
	0xe3, 0x02, 0x0a, 0x07, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x6f, 0x72, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x50, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x50, 0x1a,
	0x83, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x70, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x70,
	0x74, 0x68, 0x12, 0x41, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x22, 0x48, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x7f, 0x0a, 0x0c, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x6f, 0x6e, 0x6f, 0x74,
	0x6f, 0x6e, 0x69, 0x63, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x6d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x43, 0x6c, 0x6f, 0x63, 0x6b,
	0x22, 0x8c, 0x02, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x12, 0x3a, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x08,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3f,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x39, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x22, 0x5d, 0x0a, 0x16, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x6d, 0x73, 0x67, 0x22, 0x35, 0x0a, 0x13, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x70, 0x0a, 0x0d, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x31, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x22, 0x47, 0x0a, 0x0b, 0x45, 0x54, 0x48, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x11,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x3a, 0x0a, 0x10, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x51, 0x4c, 0x44, 0x61, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x22, 0xaf, 0x01, 0x0a, 0x0b, 0x48, 0x54, 0x54, 0x50, 0x41, 0x50, 0x49,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3e, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x41, 0x50, 0x49, 0x43, 0x61, 0x6c, 0x6c,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x50, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x43, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x75, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x22, 0x9d, 0x01,
	0x0a, 0x0c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x0a, 0x02, 0x49, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4a, 0x75, 0x6d, 0x70, 0x52, 0x02, 0x49, 0x66, 0x12, 0x33, 0x0a, 0x07, 0x45, 0x6c, 0x73,
	0x65, 0x49, 0x66, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4a, 0x75, 0x6d, 0x70, 0x52, 0x07, 0x45, 0x6c, 0x73, 0x65, 0x49, 0x66, 0x73, 0x12, 0x2d,
	0x0a, 0x04, 0x45, 0x6c, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4a, 0x75, 0x6d, 0x70, 0x52, 0x04, 0x45, 0x6c, 0x73, 0x65, 0x22, 0xf9, 0x03,
	0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x09,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x65, 0x74, 0x68, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x54, 0x48, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x0b, 0x65, 0x74, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4a, 0x0a, 0x12, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x51, 0x4c, 0x44, 0x61, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x10, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3f, 0x0a,
	0x0f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x41, 0x50, 0x49, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x0d, 0x68, 0x74, 0x74, 0x70, 0x44, 0x61, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x37,
	0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x59, 0x0a, 0x09, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x0c,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0xc9, 0x03, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x20, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x94, 0x02, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x12, 0x31, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x07, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x20, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x24, 0x0a, 0x0c, 0x4e, 0x6f, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22,
	0x21, 0x0a, 0x09, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x22, 0x3e, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x61,
	0x6c, 0x74, 0x22, 0x55, 0x0a, 0x0b, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x61, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x40, 0x0a, 0x0b, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x07, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x52, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x22, 0x40, 0x0a, 0x0c, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x12, 0x30, 0x0a, 0x14, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x37, 0x0a,
	0x0d, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x26,
	0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x5e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x1b, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x22, 0x59, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4d,
	0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x4e, 0x0a,
	0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x61, 0x6c, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x2c, 0x0a,
	0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2a, 0x4f, 0x0a, 0x0b, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x69,
	0x6d, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x10, 0x02, 0x2a, 0xad, 0x01, 0x0a,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0c, 0x52, 0x70, 0x63, 0x4e, 0x6f,
	0x64, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xe8, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x10, 0xd0, 0x0f, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xd1, 0x0f, 0x12, 0x18, 0x0a, 0x13, 0x53,
	0x6d, 0x61, 0x72, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x70, 0x63, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0xf0, 0x2e, 0x12, 0x1d, 0x0a, 0x18, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0xf1, 0x2e, 0x12, 0x16, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x65, 0x64, 0x10, 0xd8, 0x36, 0x2a, 0x93, 0x01, 0x0a,
	0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x54, 0x48,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x51, 0x4c, 0x44, 0x61, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73,
	0x6b, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x54, 0x54, 0x50, 0x41, 0x50, 0x49, 0x43, 0x61,
	0x6c, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x10, 0x05, 0x2a, 0x50, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x10, 0x04, 0x2a, 0x20, 0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4a, 0x61, 0x76, 0x61, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x10, 0x00, 0x32, 0xa4, 0x06, 0x0a, 0x0a, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x15, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3d, 0x0a,
	0x08, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x2e, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4b, 0x0a,
	0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x1b, 0x2e,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x19, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x42, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x18,
	0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x10, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x1a, 0x10, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x10, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x10, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x55, 0x55, 0x49, 0x44, 0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x00, 0x12, 0x36, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x13, 0x2e, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x1a,
	0x17, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x09, 0x53, 0x79,
	0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x18, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x19, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x4b, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x12, 0x1b, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x0c, 0x5a,
	0x0a, 0x2e, 0x2f, 0x61, 0x76, 0x73, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_protobuf_avs_proto_rawDescOnce sync.Once
	file_protobuf_avs_proto_rawDescData = file_protobuf_avs_proto_rawDesc
)

func file_protobuf_avs_proto_rawDescGZIP() []byte {
	file_protobuf_avs_proto_rawDescOnce.Do(func() {
		file_protobuf_avs_proto_rawDescData = protoimpl.X.CompressGZIP(file_protobuf_avs_proto_rawDescData)
	})
	return file_protobuf_avs_proto_rawDescData
}

var file_protobuf_avs_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_protobuf_avs_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_protobuf_avs_proto_goTypes = []interface{}{
	(TriggerType)(0),               // 0: aggregator.TriggerType
	(Error)(0),                     // 1: aggregator.Error
	(TaskType)(0),                  // 2: aggregator.TaskType
	(TaskStatus)(0),                // 3: aggregator.TaskStatus
	(CustomCodeType)(0),            // 4: aggregator.CustomCodeType
	(*UUID)(nil),                   // 5: aggregator.UUID
	(*Checkin)(nil),                // 6: aggregator.Checkin
	(*CheckinResp)(nil),            // 7: aggregator.CheckinResp
	(*SyncTasksReq)(nil),           // 8: aggregator.SyncTasksReq
	(*TaskTrigger)(nil),            // 9: aggregator.TaskTrigger
	(*TimeCondition)(nil),          // 10: aggregator.TimeCondition
	(*ContractQueryCondition)(nil), // 11: aggregator.ContractQueryCondition
	(*ExpressionCondition)(nil),    // 12: aggregator.ExpressionCondition
	(*SyncTasksResp)(nil),          // 13: aggregator.SyncTasksResp
	(*ETHTransfer)(nil),            // 14: aggregator.ETHTransfer
	(*ContractExecution)(nil),      // 15: aggregator.ContractExecution
	(*GraphQLDataQuery)(nil),       // 16: aggregator.GraphQLDataQuery
	(*HTTPAPICall)(nil),            // 17: aggregator.HTTPAPICall
	(*CustomCode)(nil),             // 18: aggregator.CustomCode
	(*ConditionJump)(nil),          // 19: aggregator.ConditionJump
	(*BranchAction)(nil),           // 20: aggregator.BranchAction
	(*TaskAction)(nil),             // 21: aggregator.TaskAction
	(*Execution)(nil),              // 22: aggregator.Execution
	(*Task)(nil),                   // 23: aggregator.Task
	(*CreateTaskReq)(nil),          // 24: aggregator.CreateTaskReq
	(*CreateTaskResp)(nil),         // 25: aggregator.CreateTaskResp
	(*NonceRequest)(nil),           // 26: aggregator.NonceRequest
	(*NonceResp)(nil),              // 27: aggregator.NonceResp
	(*AddressRequest)(nil),         // 28: aggregator.AddressRequest
	(*SmartWallet)(nil),            // 29: aggregator.SmartWallet
	(*AddressResp)(nil),            // 30: aggregator.AddressResp
	(*ListTasksReq)(nil),           // 31: aggregator.ListTasksReq
	(*ListTasksResp)(nil),          // 32: aggregator.ListTasksResp
	(*GetKeyReq)(nil),              // 33: aggregator.GetKeyReq
	(*KeyResp)(nil),                // 34: aggregator.KeyResp
	(*UpdateChecksReq)(nil),        // 35: aggregator.UpdateChecksReq
	(*UpdateChecksResp)(nil),       // 36: aggregator.UpdateChecksResp
	(*CreateWalletReq)(nil),        // 37: aggregator.CreateWalletReq
	(*CreateWalletResp)(nil),       // 38: aggregator.CreateWalletResp
	(*Checkin_Status)(nil),         // 39: aggregator.Checkin.Status
	nil,                            // 40: aggregator.HTTPAPICall.HeadersEntry
	(*timestamppb.Timestamp)(nil),  // 41: google.protobuf.Timestamp
	(*wrapperspb.BoolValue)(nil),   // 42: google.protobuf.BoolValue
}
var file_protobuf_avs_proto_depIdxs = []int32{
	39, // 0: aggregator.Checkin.status:type_name -> aggregator.Checkin.Status
	41, // 1: aggregator.CheckinResp.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 2: aggregator.TaskTrigger.trigger_type:type_name -> aggregator.TriggerType
	10, // 3: aggregator.TaskTrigger.schedule:type_name -> aggregator.TimeCondition
	11, // 4: aggregator.TaskTrigger.contract_query:type_name -> aggregator.ContractQueryCondition
	12, // 5: aggregator.TaskTrigger.expression:type_name -> aggregator.ExpressionCondition
	9,  // 6: aggregator.SyncTasksResp.trigger:type_name -> aggregator.TaskTrigger
	40, // 7: aggregator.HTTPAPICall.headers:type_name -> aggregator.HTTPAPICall.HeadersEntry
	4,  // 8: aggregator.CustomCode.type:type_name -> aggregator.CustomCodeType
	19, // 9: aggregator.BranchAction.If:type_name -> aggregator.ConditionJump
	19, // 10: aggregator.BranchAction.ElseIfs:type_name -> aggregator.ConditionJump
	19, // 11: aggregator.BranchAction.Else:type_name -> aggregator.ConditionJump
	2,  // 12: aggregator.TaskAction.task_type:type_name -> aggregator.TaskType
	14, // 13: aggregator.TaskAction.eth_transfer:type_name -> aggregator.ETHTransfer
	15, // 14: aggregator.TaskAction.contract_execution:type_name -> aggregator.ContractExecution
	16, // 15: aggregator.TaskAction.graphql_data_query:type_name -> aggregator.GraphQLDataQuery
	17, // 16: aggregator.TaskAction.http_data_query:type_name -> aggregator.HTTPAPICall
	18, // 17: aggregator.TaskAction.custom_code:type_name -> aggregator.CustomCode
	20, // 18: aggregator.TaskAction.branch:type_name -> aggregator.BranchAction
	5,  // 19: aggregator.Task.id:type_name -> aggregator.UUID
	9,  // 20: aggregator.Task.trigger:type_name -> aggregator.TaskTrigger
	21, // 21: aggregator.Task.nodes:type_name -> aggregator.TaskAction
	3,  // 22: aggregator.Task.status:type_name -> aggregator.TaskStatus
	22, // 23: aggregator.Task.executions:type_name -> aggregator.Execution
	9,  // 24: aggregator.CreateTaskReq.trigger:type_name -> aggregator.TaskTrigger
	21, // 25: aggregator.CreateTaskReq.actions:type_name -> aggregator.TaskAction
	29, // 26: aggregator.AddressResp.wallets:type_name -> aggregator.SmartWallet
	23, // 27: aggregator.ListTasksResp.tasks:type_name -> aggregator.Task
	41, // 28: aggregator.UpdateChecksResp.updated_at:type_name -> google.protobuf.Timestamp
	41, // 29: aggregator.Checkin.Status.last_heartbeat:type_name -> google.protobuf.Timestamp
	33, // 30: aggregator.Aggregator.GetKey:input_type -> aggregator.GetKeyReq
	26, // 31: aggregator.Aggregator.GetNonce:input_type -> aggregator.NonceRequest
	28, // 32: aggregator.Aggregator.GetSmartAccountAddress:input_type -> aggregator.AddressRequest
	37, // 33: aggregator.Aggregator.CreateWallet:input_type -> aggregator.CreateWalletReq
	24, // 34: aggregator.Aggregator.CreateTask:input_type -> aggregator.CreateTaskReq
	31, // 35: aggregator.Aggregator.ListTasks:input_type -> aggregator.ListTasksReq
	5,  // 36: aggregator.Aggregator.GetTask:input_type -> aggregator.UUID
	5,  // 37: aggregator.Aggregator.CancelTask:input_type -> aggregator.UUID
	5,  // 38: aggregator.Aggregator.DeleteTask:input_type -> aggregator.UUID
	6,  // 39: aggregator.Aggregator.Ping:input_type -> aggregator.Checkin
	8,  // 40: aggregator.Aggregator.SyncTasks:input_type -> aggregator.SyncTasksReq
	35, // 41: aggregator.Aggregator.UpdateChecks:input_type -> aggregator.UpdateChecksReq
	34, // 42: aggregator.Aggregator.GetKey:output_type -> aggregator.KeyResp
	27, // 43: aggregator.Aggregator.GetNonce:output_type -> aggregator.NonceResp
	30, // 44: aggregator.Aggregator.GetSmartAccountAddress:output_type -> aggregator.AddressResp
	38, // 45: aggregator.Aggregator.CreateWallet:output_type -> aggregator.CreateWalletResp
	25, // 46: aggregator.Aggregator.CreateTask:output_type -> aggregator.CreateTaskResp
	32, // 47: aggregator.Aggregator.ListTasks:output_type -> aggregator.ListTasksResp
	23, // 48: aggregator.Aggregator.GetTask:output_type -> aggregator.Task
	42, // 49: aggregator.Aggregator.CancelTask:output_type -> google.protobuf.BoolValue
	42, // 50: aggregator.Aggregator.DeleteTask:output_type -> google.protobuf.BoolValue
	7,  // 51: aggregator.Aggregator.Ping:output_type -> aggregator.CheckinResp
	13, // 52: aggregator.Aggregator.SyncTasks:output_type -> aggregator.SyncTasksResp
	36, // 53: aggregator.Aggregator.UpdateChecks:output_type -> aggregator.UpdateChecksResp
	42, // [42:54] is the sub-list for method output_type
	30, // [30:42] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_protobuf_avs_proto_init() }
func file_protobuf_avs_proto_init() {
	if File_protobuf_avs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protobuf_avs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UUID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Checkin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckinResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncTasksReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractQueryCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpressionCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncTasksResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ETHTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractExecution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQLDataQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPAPICall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionJump); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Execution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmartWallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTasksReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTasksResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChecksReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChecksResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWalletReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWalletResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Checkin_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protobuf_avs_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protobuf_avs_proto_goTypes,
		DependencyIndexes: file_protobuf_avs_proto_depIdxs,
		EnumInfos:         file_protobuf_avs_proto_enumTypes,
		MessageInfos:      file_protobuf_avs_proto_msgTypes,
	}.Build()
	File_protobuf_avs_proto = out.File
	file_protobuf_avs_proto_rawDesc = nil
	file_protobuf_avs_proto_goTypes = nil
	file_protobuf_avs_proto_depIdxs = nil
}
