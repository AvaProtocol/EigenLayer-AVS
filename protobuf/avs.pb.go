// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.2
// source: avs.proto

package avsproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TriggerType defines all supported trigger types
// This enum provides a single source of truth for trigger types used across the system
type TriggerType int32

const (
	TriggerType_TRIGGER_TYPE_UNSPECIFIED TriggerType = 0 // Default unspecified value
	TriggerType_TRIGGER_TYPE_MANUAL      TriggerType = 1 // Manual trigger
	TriggerType_TRIGGER_TYPE_FIXED_TIME  TriggerType = 2 // Fixed time trigger
	TriggerType_TRIGGER_TYPE_CRON        TriggerType = 3 // Cron-based trigger
	TriggerType_TRIGGER_TYPE_BLOCK       TriggerType = 4 // Block-based trigger
	TriggerType_TRIGGER_TYPE_EVENT       TriggerType = 5 // Event-based trigger
)

// Enum value maps for TriggerType.
var (
	TriggerType_name = map[int32]string{
		0: "TRIGGER_TYPE_UNSPECIFIED",
		1: "TRIGGER_TYPE_MANUAL",
		2: "TRIGGER_TYPE_FIXED_TIME",
		3: "TRIGGER_TYPE_CRON",
		4: "TRIGGER_TYPE_BLOCK",
		5: "TRIGGER_TYPE_EVENT",
	}
	TriggerType_value = map[string]int32{
		"TRIGGER_TYPE_UNSPECIFIED": 0,
		"TRIGGER_TYPE_MANUAL":      1,
		"TRIGGER_TYPE_FIXED_TIME":  2,
		"TRIGGER_TYPE_CRON":        3,
		"TRIGGER_TYPE_BLOCK":       4,
		"TRIGGER_TYPE_EVENT":       5,
	}
)

func (x TriggerType) Enum() *TriggerType {
	p := new(TriggerType)
	*p = x
	return p
}

func (x TriggerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriggerType) Descriptor() protoreflect.EnumDescriptor {
	return file_avs_proto_enumTypes[0].Descriptor()
}

func (TriggerType) Type() protoreflect.EnumType {
	return &file_avs_proto_enumTypes[0]
}

func (x TriggerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriggerType.Descriptor instead.
func (TriggerType) EnumDescriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{0}
}

// NodeType defines all supported node types
// This enum provides a single source of truth for node types used across the system
type NodeType int32

const (
	NodeType_NODE_TYPE_UNSPECIFIED    NodeType = 0 // Default unspecified value
	NodeType_NODE_TYPE_ETH_TRANSFER   NodeType = 1 // Ethereum transfer node
	NodeType_NODE_TYPE_CONTRACT_WRITE NodeType = 2 // Contract write node
	NodeType_NODE_TYPE_CONTRACT_READ  NodeType = 3 // Contract read node
	NodeType_NODE_TYPE_GRAPHQL_QUERY  NodeType = 4 // GraphQL query node
	NodeType_NODE_TYPE_REST_API       NodeType = 5 // REST API node
	NodeType_NODE_TYPE_CUSTOM_CODE    NodeType = 6 // Custom code node
	NodeType_NODE_TYPE_BRANCH         NodeType = 7 // Branch node
	NodeType_NODE_TYPE_FILTER         NodeType = 8 // Filter node
	NodeType_NODE_TYPE_LOOP           NodeType = 9 // Loop node
)

// Enum value maps for NodeType.
var (
	NodeType_name = map[int32]string{
		0: "NODE_TYPE_UNSPECIFIED",
		1: "NODE_TYPE_ETH_TRANSFER",
		2: "NODE_TYPE_CONTRACT_WRITE",
		3: "NODE_TYPE_CONTRACT_READ",
		4: "NODE_TYPE_GRAPHQL_QUERY",
		5: "NODE_TYPE_REST_API",
		6: "NODE_TYPE_CUSTOM_CODE",
		7: "NODE_TYPE_BRANCH",
		8: "NODE_TYPE_FILTER",
		9: "NODE_TYPE_LOOP",
	}
	NodeType_value = map[string]int32{
		"NODE_TYPE_UNSPECIFIED":    0,
		"NODE_TYPE_ETH_TRANSFER":   1,
		"NODE_TYPE_CONTRACT_WRITE": 2,
		"NODE_TYPE_CONTRACT_READ":  3,
		"NODE_TYPE_GRAPHQL_QUERY":  4,
		"NODE_TYPE_REST_API":       5,
		"NODE_TYPE_CUSTOM_CODE":    6,
		"NODE_TYPE_BRANCH":         7,
		"NODE_TYPE_FILTER":         8,
		"NODE_TYPE_LOOP":           9,
	}
)

func (x NodeType) Enum() *NodeType {
	p := new(NodeType)
	*p = x
	return p
}

func (x NodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_avs_proto_enumTypes[1].Descriptor()
}

func (NodeType) Type() protoreflect.EnumType {
	return &file_avs_proto_enumTypes[1]
}

func (x NodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeType.Descriptor instead.
func (NodeType) EnumDescriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{1}
}

type Lang int32

const (
	Lang_JavaScript Lang = 0
)

// Enum value maps for Lang.
var (
	Lang_name = map[int32]string{
		0: "JavaScript",
	}
	Lang_value = map[string]int32{
		"JavaScript": 0,
	}
)

func (x Lang) Enum() *Lang {
	p := new(Lang)
	*p = x
	return p
}

func (x Lang) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Lang) Descriptor() protoreflect.EnumDescriptor {
	return file_avs_proto_enumTypes[2].Descriptor()
}

func (Lang) Type() protoreflect.EnumType {
	return &file_avs_proto_enumTypes[2]
}

func (x Lang) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Lang.Descriptor instead.
func (Lang) EnumDescriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{2}
}

// gRPC internal error code use up to 17, we extend and start from 1000 to avoid any conflict
// Guide: https://grpc.io/docs/guides/error/
// Go: https://github.com/grpc/grpc-go/blob/master/codes/codes.go#L199
type Error int32

const (
	// An error that happen when the app can be recovered but the cause is unknow, rarely use, we try to use specific error as much as we can
	Error_UnknowError Error = 0
	// internal rpc node error
	Error_RpcNodeError Error = 1000
	// storage system isn't available to respond to query
	Error_StorageUnavailable Error = 2000
	Error_StorageWriteError  Error = 2001
	// target chain of smart wallet is error and cannot used to determine smartwallet info
	Error_SmartWalletRpcError      Error = 6000
	Error_SmartWalletNotFoundError Error = 6001
	// Error occurs when we failed to migrate task data and it cannot be decode
	Error_TaskDataCorrupted    Error = 7000
	Error_TaskDataMissingError Error = 7001
	// Trigger Task failed
	Error_TaskTriggerError Error = 7003
)

// Enum value maps for Error.
var (
	Error_name = map[int32]string{
		0:    "UnknowError",
		1000: "RpcNodeError",
		2000: "StorageUnavailable",
		2001: "StorageWriteError",
		6000: "SmartWalletRpcError",
		6001: "SmartWalletNotFoundError",
		7000: "TaskDataCorrupted",
		7001: "TaskDataMissingError",
		7003: "TaskTriggerError",
	}
	Error_value = map[string]int32{
		"UnknowError":              0,
		"RpcNodeError":             1000,
		"StorageUnavailable":       2000,
		"StorageWriteError":        2001,
		"SmartWalletRpcError":      6000,
		"SmartWalletNotFoundError": 6001,
		"TaskDataCorrupted":        7000,
		"TaskDataMissingError":     7001,
		"TaskTriggerError":         7003,
	}
)

func (x Error) Enum() *Error {
	p := new(Error)
	*p = x
	return p
}

func (x Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Error) Descriptor() protoreflect.EnumDescriptor {
	return file_avs_proto_enumTypes[3].Descriptor()
}

func (Error) Type() protoreflect.EnumType {
	return &file_avs_proto_enumTypes[3]
}

func (x Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Error.Descriptor instead.
func (Error) EnumDescriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{3}
}

// TaskStatus represents status of the task. The transition is as follow
type TaskStatus int32

const (
	TaskStatus_Active TaskStatus = 0
	// Task is completd when it's reaching its max_execution or its expiration time
	TaskStatus_Completed TaskStatus = 1
	TaskStatus_Failed    TaskStatus = 2
	TaskStatus_Canceled  TaskStatus = 3
	TaskStatus_Executing TaskStatus = 4
)

// Enum value maps for TaskStatus.
var (
	TaskStatus_name = map[int32]string{
		0: "Active",
		1: "Completed",
		2: "Failed",
		3: "Canceled",
		4: "Executing",
	}
	TaskStatus_value = map[string]int32{
		"Active":    0,
		"Completed": 1,
		"Failed":    2,
		"Canceled":  3,
		"Executing": 4,
	}
)

func (x TaskStatus) Enum() *TaskStatus {
	p := new(TaskStatus)
	*p = x
	return p
}

func (x TaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_avs_proto_enumTypes[4].Descriptor()
}

func (TaskStatus) Type() protoreflect.EnumType {
	return &file_avs_proto_enumTypes[4]
}

func (x TaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatus.Descriptor instead.
func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{4}
}

// Execution Status re-present a run of the task
type ExecutionStatus int32

const (
	ExecutionStatus_EXECUTION_STATUS_UNSPECIFIED ExecutionStatus = 0
	ExecutionStatus_EXECUTION_STATUS_PENDING     ExecutionStatus = 1
	ExecutionStatus_EXECUTION_STATUS_COMPLETED   ExecutionStatus = 2
	ExecutionStatus_EXECUTION_STATUS_FAILED      ExecutionStatus = 3
)

// Enum value maps for ExecutionStatus.
var (
	ExecutionStatus_name = map[int32]string{
		0: "EXECUTION_STATUS_UNSPECIFIED",
		1: "EXECUTION_STATUS_PENDING",
		2: "EXECUTION_STATUS_COMPLETED",
		3: "EXECUTION_STATUS_FAILED",
	}
	ExecutionStatus_value = map[string]int32{
		"EXECUTION_STATUS_UNSPECIFIED": 0,
		"EXECUTION_STATUS_PENDING":     1,
		"EXECUTION_STATUS_COMPLETED":   2,
		"EXECUTION_STATUS_FAILED":      3,
	}
)

func (x ExecutionStatus) Enum() *ExecutionStatus {
	p := new(ExecutionStatus)
	*p = x
	return p
}

func (x ExecutionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_avs_proto_enumTypes[5].Descriptor()
}

func (ExecutionStatus) Type() protoreflect.EnumType {
	return &file_avs_proto_enumTypes[5]
}

func (x ExecutionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionStatus.Descriptor instead.
func (ExecutionStatus) EnumDescriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{5}
}

// TokenMetadata represents ERC20 token information
type TokenMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`    // Contract address (lowercase, normalized)
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`          // Token name (e.g., "USD Coin")
	Symbol        string                 `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`      // Token symbol (e.g., "USDC")
	Decimals      uint32                 `protobuf:"varint,4,opt,name=decimals,proto3" json:"decimals,omitempty"` // Number of decimal places
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenMetadata) Reset() {
	*x = TokenMetadata{}
	mi := &file_avs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenMetadata) ProtoMessage() {}

func (x *TokenMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenMetadata.ProtoReflect.Descriptor instead.
func (*TokenMetadata) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{0}
}

func (x *TokenMetadata) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TokenMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TokenMetadata) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TokenMetadata) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

// GetTokenMetadataReq is the request for token metadata lookup
type GetTokenMetadataReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` // Contract address to look up
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTokenMetadataReq) Reset() {
	*x = GetTokenMetadataReq{}
	mi := &file_avs_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTokenMetadataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenMetadataReq) ProtoMessage() {}

func (x *GetTokenMetadataReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenMetadataReq.ProtoReflect.Descriptor instead.
func (*GetTokenMetadataReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{1}
}

func (x *GetTokenMetadataReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// GetTokenMetadataResp is the response containing token metadata
type GetTokenMetadataResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         *TokenMetadata         `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`   // Token metadata information
	Found         bool                   `protobuf:"varint,2,opt,name=found,proto3" json:"found,omitempty"`  // Whether the token was found
	Source        string                 `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"` // Source of data: "whitelist", "rpc", or "cache"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTokenMetadataResp) Reset() {
	*x = GetTokenMetadataResp{}
	mi := &file_avs_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTokenMetadataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenMetadataResp) ProtoMessage() {}

func (x *GetTokenMetadataResp) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenMetadataResp.ProtoReflect.Descriptor instead.
func (*GetTokenMetadataResp) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{2}
}

func (x *GetTokenMetadataResp) GetToken() *TokenMetadata {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *GetTokenMetadataResp) GetFound() bool {
	if x != nil {
		return x.Found
	}
	return false
}

func (x *GetTokenMetadataResp) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type IdReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IdReq) Reset() {
	*x = IdReq{}
	mi := &file_avs_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdReq) ProtoMessage() {}

func (x *IdReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdReq.ProtoReflect.Descriptor instead.
func (*IdReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{3}
}

func (x *IdReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type FixedTimeTrigger struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Include Config as field so it is generated in Go
	Config *FixedTimeTrigger_Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Input data provided by user for this trigger
	Input         *structpb.Value `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FixedTimeTrigger) Reset() {
	*x = FixedTimeTrigger{}
	mi := &file_avs_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FixedTimeTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixedTimeTrigger) ProtoMessage() {}

func (x *FixedTimeTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixedTimeTrigger.ProtoReflect.Descriptor instead.
func (*FixedTimeTrigger) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{4}
}

func (x *FixedTimeTrigger) GetConfig() *FixedTimeTrigger_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *FixedTimeTrigger) GetInput() *structpb.Value {
	if x != nil {
		return x.Input
	}
	return nil
}

// Simple timebase or cron syntax.
type CronTrigger struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Include Config as field so it is generated in Go
	Config *CronTrigger_Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Input data provided by user for this trigger
	Input         *structpb.Value `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CronTrigger) Reset() {
	*x = CronTrigger{}
	mi := &file_avs_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CronTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronTrigger) ProtoMessage() {}

func (x *CronTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronTrigger.ProtoReflect.Descriptor instead.
func (*CronTrigger) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{5}
}

func (x *CronTrigger) GetConfig() *CronTrigger_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *CronTrigger) GetInput() *structpb.Value {
	if x != nil {
		return x.Input
	}
	return nil
}

type BlockTrigger struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Include Config as field so it is generated in Go
	Config *BlockTrigger_Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Input data provided by user for this trigger
	Input         *structpb.Value `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockTrigger) Reset() {
	*x = BlockTrigger{}
	mi := &file_avs_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockTrigger) ProtoMessage() {}

func (x *BlockTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockTrigger.ProtoReflect.Descriptor instead.
func (*BlockTrigger) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{6}
}

func (x *BlockTrigger) GetConfig() *BlockTrigger_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *BlockTrigger) GetInput() *structpb.Value {
	if x != nil {
		return x.Input
	}
	return nil
}

// EventTrigger monitors blockchain events using direct RPC filter queries.
// Clients provide an array of ethereum.FilterQuery structures that map directly to RPC calls.
// This approach eliminates parsing overhead and provides maximum flexibility and performance.
type EventTrigger struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Include Config as field so it is generated in Go
	Config *EventTrigger_Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Input data provided by user for this trigger
	Input         *structpb.Value `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventTrigger) Reset() {
	*x = EventTrigger{}
	mi := &file_avs_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTrigger) ProtoMessage() {}

func (x *EventTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTrigger.ProtoReflect.Descriptor instead.
func (*EventTrigger) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{7}
}

func (x *EventTrigger) GetConfig() *EventTrigger_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *EventTrigger) GetInput() *structpb.Value {
	if x != nil {
		return x.Input
	}
	return nil
}

type ManualTrigger struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Include Config as field so it is generated in Go
	Config *ManualTrigger_Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Input data provided by user for this trigger
	Input         *structpb.Value `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ManualTrigger) Reset() {
	*x = ManualTrigger{}
	mi := &file_avs_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManualTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualTrigger) ProtoMessage() {}

func (x *ManualTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualTrigger.ProtoReflect.Descriptor instead.
func (*ManualTrigger) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{8}
}

func (x *ManualTrigger) GetConfig() *ManualTrigger_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ManualTrigger) GetInput() *structpb.Value {
	if x != nil {
		return x.Input
	}
	return nil
}

type TaskTrigger struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// NEW: Use the enum for type identification (Phase 1: add alongside existing)
	Type TriggerType `protobuf:"varint,8,opt,name=type,proto3,enum=aggregator.TriggerType" json:"type,omitempty"`
	// Types that are valid to be assigned to TriggerType:
	//
	//	*TaskTrigger_Manual
	//	*TaskTrigger_FixedTime
	//	*TaskTrigger_Cron
	//	*TaskTrigger_Block
	//	*TaskTrigger_Event
	TriggerType isTaskTrigger_TriggerType `protobuf_oneof:"trigger_type"`
	Id          string                    `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
	// Input data provided by user for this trigger
	Input         *structpb.Value `protobuf:"bytes,9,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskTrigger) Reset() {
	*x = TaskTrigger{}
	mi := &file_avs_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskTrigger) ProtoMessage() {}

func (x *TaskTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskTrigger.ProtoReflect.Descriptor instead.
func (*TaskTrigger) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{9}
}

func (x *TaskTrigger) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskTrigger) GetType() TriggerType {
	if x != nil {
		return x.Type
	}
	return TriggerType_TRIGGER_TYPE_UNSPECIFIED
}

func (x *TaskTrigger) GetTriggerType() isTaskTrigger_TriggerType {
	if x != nil {
		return x.TriggerType
	}
	return nil
}

func (x *TaskTrigger) GetManual() bool {
	if x != nil {
		if x, ok := x.TriggerType.(*TaskTrigger_Manual); ok {
			return x.Manual
		}
	}
	return false
}

func (x *TaskTrigger) GetFixedTime() *FixedTimeTrigger {
	if x != nil {
		if x, ok := x.TriggerType.(*TaskTrigger_FixedTime); ok {
			return x.FixedTime
		}
	}
	return nil
}

func (x *TaskTrigger) GetCron() *CronTrigger {
	if x != nil {
		if x, ok := x.TriggerType.(*TaskTrigger_Cron); ok {
			return x.Cron
		}
	}
	return nil
}

func (x *TaskTrigger) GetBlock() *BlockTrigger {
	if x != nil {
		if x, ok := x.TriggerType.(*TaskTrigger_Block); ok {
			return x.Block
		}
	}
	return nil
}

func (x *TaskTrigger) GetEvent() *EventTrigger {
	if x != nil {
		if x, ok := x.TriggerType.(*TaskTrigger_Event); ok {
			return x.Event
		}
	}
	return nil
}

func (x *TaskTrigger) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskTrigger) GetInput() *structpb.Value {
	if x != nil {
		return x.Input
	}
	return nil
}

type isTaskTrigger_TriggerType interface {
	isTaskTrigger_TriggerType()
}

type TaskTrigger_Manual struct {
	// manual task will not be check to be trigger, instead it can be trigger adhoc
	Manual bool `protobuf:"varint,2,opt,name=manual,proto3,oneof"`
}

type TaskTrigger_FixedTime struct {
	// run at a specific epoch, name inspired by unix `at` utility
	FixedTime *FixedTimeTrigger `protobuf:"bytes,3,opt,name=fixed_time,json=fixedTime,proto3,oneof"`
}

type TaskTrigger_Cron struct {
	// interval such as every hour/day/ etc can be converted to cronsyntax by the sdk/studio
	Cron *CronTrigger `protobuf:"bytes,4,opt,name=cron,proto3,oneof"`
}

type TaskTrigger_Block struct {
	// currently the only support syntax is every <x> blocks
	Block *BlockTrigger `protobuf:"bytes,5,opt,name=block,proto3,oneof"`
}

type TaskTrigger_Event struct {
	// support filter by event expression such as topic0, topic1, topoc2 and event_data and contract_address
	Event *EventTrigger `protobuf:"bytes,6,opt,name=event,proto3,oneof"`
}

func (*TaskTrigger_Manual) isTaskTrigger_TriggerType() {}

func (*TaskTrigger_FixedTime) isTaskTrigger_TriggerType() {}

func (*TaskTrigger_Cron) isTaskTrigger_TriggerType() {}

func (*TaskTrigger_Block) isTaskTrigger_TriggerType() {}

func (*TaskTrigger_Event) isTaskTrigger_TriggerType() {}

type ETHTransferNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Include Config and Input as fields so they are generated in Go
	Config *ETHTransferNode_Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Input data provided by user for this node
	Input         *structpb.Value `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ETHTransferNode) Reset() {
	*x = ETHTransferNode{}
	mi := &file_avs_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ETHTransferNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ETHTransferNode) ProtoMessage() {}

func (x *ETHTransferNode) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ETHTransferNode.ProtoReflect.Descriptor instead.
func (*ETHTransferNode) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{10}
}

func (x *ETHTransferNode) GetConfig() *ETHTransferNode_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ETHTransferNode) GetInput() *structpb.Value {
	if x != nil {
		return x.Input
	}
	return nil
}

type ContractWriteNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Include Config and Input as fields so they are generated in Go
	Config *ContractWriteNode_Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Input data provided by user for this node
	Input         *structpb.Value `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractWriteNode) Reset() {
	*x = ContractWriteNode{}
	mi := &file_avs_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractWriteNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractWriteNode) ProtoMessage() {}

func (x *ContractWriteNode) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractWriteNode.ProtoReflect.Descriptor instead.
func (*ContractWriteNode) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{11}
}

func (x *ContractWriteNode) GetConfig() *ContractWriteNode_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ContractWriteNode) GetInput() *structpb.Value {
	if x != nil {
		return x.Input
	}
	return nil
}

type ContractReadNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Include Config and Input as fields so they are generated in Go
	Config *ContractReadNode_Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Input data provided by user for this node
	Input         *structpb.Value `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractReadNode) Reset() {
	*x = ContractReadNode{}
	mi := &file_avs_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractReadNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractReadNode) ProtoMessage() {}

func (x *ContractReadNode) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractReadNode.ProtoReflect.Descriptor instead.
func (*ContractReadNode) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{12}
}

func (x *ContractReadNode) GetConfig() *ContractReadNode_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ContractReadNode) GetInput() *structpb.Value {
	if x != nil {
		return x.Input
	}
	return nil
}

type GraphQLQueryNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Include Config and Input as fields so they are generated in Go
	Config *GraphQLQueryNode_Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Input data provided by user for this node
	Input         *structpb.Value `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GraphQLQueryNode) Reset() {
	*x = GraphQLQueryNode{}
	mi := &file_avs_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GraphQLQueryNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLQueryNode) ProtoMessage() {}

func (x *GraphQLQueryNode) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLQueryNode.ProtoReflect.Descriptor instead.
func (*GraphQLQueryNode) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{13}
}

func (x *GraphQLQueryNode) GetConfig() *GraphQLQueryNode_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *GraphQLQueryNode) GetInput() *structpb.Value {
	if x != nil {
		return x.Input
	}
	return nil
}

type RestAPINode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Include Config and Input as fields so they are generated in Go
	Config *RestAPINode_Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Input data provided by user for this node
	Input         *structpb.Value `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RestAPINode) Reset() {
	*x = RestAPINode{}
	mi := &file_avs_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestAPINode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestAPINode) ProtoMessage() {}

func (x *RestAPINode) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestAPINode.ProtoReflect.Descriptor instead.
func (*RestAPINode) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{14}
}

func (x *RestAPINode) GetConfig() *RestAPINode_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RestAPINode) GetInput() *structpb.Value {
	if x != nil {
		return x.Input
	}
	return nil
}

type CustomCodeNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Include Config and Input as fields so they are generated in Go
	Config *CustomCodeNode_Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Input data provided by user for this node
	Input         *structpb.Value `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomCodeNode) Reset() {
	*x = CustomCodeNode{}
	mi := &file_avs_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomCodeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomCodeNode) ProtoMessage() {}

func (x *CustomCodeNode) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomCodeNode.ProtoReflect.Descriptor instead.
func (*CustomCodeNode) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{15}
}

func (x *CustomCodeNode) GetConfig() *CustomCodeNode_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *CustomCodeNode) GetInput() *structpb.Value {
	if x != nil {
		return x.Input
	}
	return nil
}

type BranchNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Include Config and Input as fields so they are generated in Go
	Config *BranchNode_Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Input data provided by user for this node
	Input         *structpb.Value `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BranchNode) Reset() {
	*x = BranchNode{}
	mi := &file_avs_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BranchNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchNode) ProtoMessage() {}

func (x *BranchNode) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchNode.ProtoReflect.Descriptor instead.
func (*BranchNode) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{16}
}

func (x *BranchNode) GetConfig() *BranchNode_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *BranchNode) GetInput() *structpb.Value {
	if x != nil {
		return x.Input
	}
	return nil
}

type FilterNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Include Config and Input as fields so they are generated in Go
	Config *FilterNode_Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Input data provided by user for this node
	Input         *structpb.Value `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilterNode) Reset() {
	*x = FilterNode{}
	mi := &file_avs_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterNode) ProtoMessage() {}

func (x *FilterNode) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterNode.ProtoReflect.Descriptor instead.
func (*FilterNode) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{17}
}

func (x *FilterNode) GetConfig() *FilterNode_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *FilterNode) GetInput() *structpb.Value {
	if x != nil {
		return x.Input
	}
	return nil
}

// LoopNode currently not support, but we pre-defined to reverse the field id
type LoopNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// inside the runner, it can access to the current value of the loop iteration through the iter_val/iter_key above
	//
	// Types that are valid to be assigned to Runner:
	//
	//	*LoopNode_EthTransfer
	//	*LoopNode_ContractWrite
	//	*LoopNode_ContractRead
	//	*LoopNode_GraphqlDataQuery
	//	*LoopNode_RestApi
	//	*LoopNode_CustomCode
	Runner isLoopNode_Runner `protobuf_oneof:"runner"`
	// Include Config and Input as fields so they are generated in Go
	Config *LoopNode_Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Input data provided by user for this node
	Input         *structpb.Value `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoopNode) Reset() {
	*x = LoopNode{}
	mi := &file_avs_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoopNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoopNode) ProtoMessage() {}

func (x *LoopNode) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoopNode.ProtoReflect.Descriptor instead.
func (*LoopNode) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{18}
}

func (x *LoopNode) GetRunner() isLoopNode_Runner {
	if x != nil {
		return x.Runner
	}
	return nil
}

func (x *LoopNode) GetEthTransfer() *ETHTransferNode {
	if x != nil {
		if x, ok := x.Runner.(*LoopNode_EthTransfer); ok {
			return x.EthTransfer
		}
	}
	return nil
}

func (x *LoopNode) GetContractWrite() *ContractWriteNode {
	if x != nil {
		if x, ok := x.Runner.(*LoopNode_ContractWrite); ok {
			return x.ContractWrite
		}
	}
	return nil
}

func (x *LoopNode) GetContractRead() *ContractReadNode {
	if x != nil {
		if x, ok := x.Runner.(*LoopNode_ContractRead); ok {
			return x.ContractRead
		}
	}
	return nil
}

func (x *LoopNode) GetGraphqlDataQuery() *GraphQLQueryNode {
	if x != nil {
		if x, ok := x.Runner.(*LoopNode_GraphqlDataQuery); ok {
			return x.GraphqlDataQuery
		}
	}
	return nil
}

func (x *LoopNode) GetRestApi() *RestAPINode {
	if x != nil {
		if x, ok := x.Runner.(*LoopNode_RestApi); ok {
			return x.RestApi
		}
	}
	return nil
}

func (x *LoopNode) GetCustomCode() *CustomCodeNode {
	if x != nil {
		if x, ok := x.Runner.(*LoopNode_CustomCode); ok {
			return x.CustomCode
		}
	}
	return nil
}

func (x *LoopNode) GetConfig() *LoopNode_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *LoopNode) GetInput() *structpb.Value {
	if x != nil {
		return x.Input
	}
	return nil
}

type isLoopNode_Runner interface {
	isLoopNode_Runner()
}

type LoopNode_EthTransfer struct {
	// Transfer eth require no calldata etc, just a destination address and an eth amount to be sent
	EthTransfer *ETHTransferNode `protobuf:"bytes,10,opt,name=eth_transfer,json=ethTransfer,proto3,oneof"`
}

type LoopNode_ContractWrite struct {
	// Run one ore more contracts. The call call also be batched with tool like
	// multicall to wrap many calls. in a contract write, we need to generate signature and send as userops.
	ContractWrite *ContractWriteNode `protobuf:"bytes,11,opt,name=contract_write,json=contractWrite,proto3,oneof"`
}

type LoopNode_ContractRead struct {
	// read data fron a target contract
	ContractRead *ContractReadNode `protobuf:"bytes,12,opt,name=contract_read,json=contractRead,proto3,oneof"`
}

type LoopNode_GraphqlDataQuery struct {
	// Make call to a graphql endpoint
	GraphqlDataQuery *GraphQLQueryNode `protobuf:"bytes,13,opt,name=graphql_data_query,json=graphqlDataQuery,proto3,oneof"`
}

type LoopNode_RestApi struct {
	// Make call to a HTTP endpoint
	RestApi *RestAPINode `protobuf:"bytes,14,opt,name=rest_api,json=restApi,proto3,oneof"`
}

type LoopNode_CustomCode struct {
	CustomCode *CustomCodeNode `protobuf:"bytes,15,opt,name=custom_code,json=customCode,proto3,oneof"`
}

func (*LoopNode_EthTransfer) isLoopNode_Runner() {}

func (*LoopNode_ContractWrite) isLoopNode_Runner() {}

func (*LoopNode_ContractRead) isLoopNode_Runner() {}

func (*LoopNode_GraphqlDataQuery) isLoopNode_Runner() {}

func (*LoopNode_RestApi) isLoopNode_Runner() {}

func (*LoopNode_CustomCode) isLoopNode_Runner() {}

// The edge is relationship or direct between node
type TaskEdge struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Source        string                 `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Target        string                 `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskEdge) Reset() {
	*x = TaskEdge{}
	mi := &file_avs_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskEdge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskEdge) ProtoMessage() {}

func (x *TaskEdge) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskEdge.ProtoReflect.Descriptor instead.
func (*TaskEdge) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{19}
}

func (x *TaskEdge) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskEdge) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *TaskEdge) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type TaskNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name  string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// NEW: Use the enum for type identification (Phase 1: add alongside existing)
	Type NodeType `protobuf:"varint,1,opt,name=type,proto3,enum=aggregator.NodeType" json:"type,omitempty"`
	// based on node_type one and only one of these field are set
	//
	// Types that are valid to be assigned to TaskType:
	//
	//	*TaskNode_EthTransfer
	//	*TaskNode_ContractWrite
	//	*TaskNode_ContractRead
	//	*TaskNode_GraphqlQuery
	//	*TaskNode_RestApi
	//	*TaskNode_Branch
	//	*TaskNode_Filter
	//	*TaskNode_Loop
	//	*TaskNode_CustomCode
	TaskType isTaskNode_TaskType `protobuf_oneof:"task_type"`
	// Input data provided by user for this node
	Input         *structpb.Value `protobuf:"bytes,19,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskNode) Reset() {
	*x = TaskNode{}
	mi := &file_avs_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskNode) ProtoMessage() {}

func (x *TaskNode) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskNode.ProtoReflect.Descriptor instead.
func (*TaskNode) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{20}
}

func (x *TaskNode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskNode) GetType() NodeType {
	if x != nil {
		return x.Type
	}
	return NodeType_NODE_TYPE_UNSPECIFIED
}

func (x *TaskNode) GetTaskType() isTaskNode_TaskType {
	if x != nil {
		return x.TaskType
	}
	return nil
}

func (x *TaskNode) GetEthTransfer() *ETHTransferNode {
	if x != nil {
		if x, ok := x.TaskType.(*TaskNode_EthTransfer); ok {
			return x.EthTransfer
		}
	}
	return nil
}

func (x *TaskNode) GetContractWrite() *ContractWriteNode {
	if x != nil {
		if x, ok := x.TaskType.(*TaskNode_ContractWrite); ok {
			return x.ContractWrite
		}
	}
	return nil
}

func (x *TaskNode) GetContractRead() *ContractReadNode {
	if x != nil {
		if x, ok := x.TaskType.(*TaskNode_ContractRead); ok {
			return x.ContractRead
		}
	}
	return nil
}

func (x *TaskNode) GetGraphqlQuery() *GraphQLQueryNode {
	if x != nil {
		if x, ok := x.TaskType.(*TaskNode_GraphqlQuery); ok {
			return x.GraphqlQuery
		}
	}
	return nil
}

func (x *TaskNode) GetRestApi() *RestAPINode {
	if x != nil {
		if x, ok := x.TaskType.(*TaskNode_RestApi); ok {
			return x.RestApi
		}
	}
	return nil
}

func (x *TaskNode) GetBranch() *BranchNode {
	if x != nil {
		if x, ok := x.TaskType.(*TaskNode_Branch); ok {
			return x.Branch
		}
	}
	return nil
}

func (x *TaskNode) GetFilter() *FilterNode {
	if x != nil {
		if x, ok := x.TaskType.(*TaskNode_Filter); ok {
			return x.Filter
		}
	}
	return nil
}

func (x *TaskNode) GetLoop() *LoopNode {
	if x != nil {
		if x, ok := x.TaskType.(*TaskNode_Loop); ok {
			return x.Loop
		}
	}
	return nil
}

func (x *TaskNode) GetCustomCode() *CustomCodeNode {
	if x != nil {
		if x, ok := x.TaskType.(*TaskNode_CustomCode); ok {
			return x.CustomCode
		}
	}
	return nil
}

func (x *TaskNode) GetInput() *structpb.Value {
	if x != nil {
		return x.Input
	}
	return nil
}

type isTaskNode_TaskType interface {
	isTaskNode_TaskType()
}

type TaskNode_EthTransfer struct {
	// Transfer eth require no calldata etc, just a destination address and an eth amount to be sent
	EthTransfer *ETHTransferNode `protobuf:"bytes,10,opt,name=eth_transfer,json=ethTransfer,proto3,oneof"`
}

type TaskNode_ContractWrite struct {
	// Run one ore more contracts. The call call also be batched with tool like
	// multicall to wrap many calls. in a contract write, we need to generate signature and send as userops.
	ContractWrite *ContractWriteNode `protobuf:"bytes,11,opt,name=contract_write,json=contractWrite,proto3,oneof"`
}

type TaskNode_ContractRead struct {
	// read data fron a target contract
	ContractRead *ContractReadNode `protobuf:"bytes,12,opt,name=contract_read,json=contractRead,proto3,oneof"`
}

type TaskNode_GraphqlQuery struct {
	// Make call to a graphql endpoint
	GraphqlQuery *GraphQLQueryNode `protobuf:"bytes,13,opt,name=graphql_query,json=graphqlQuery,proto3,oneof"`
}

type TaskNode_RestApi struct {
	// Make call to a HTTP endpoint
	RestApi *RestAPINode `protobuf:"bytes,14,opt,name=rest_api,json=restApi,proto3,oneof"`
}

type TaskNode_Branch struct {
	// CustomCode allow to run arbitraty JavaScript.
	Branch *BranchNode `protobuf:"bytes,15,opt,name=branch,proto3,oneof"`
}

type TaskNode_Filter struct {
	Filter *FilterNode `protobuf:"bytes,16,opt,name=filter,proto3,oneof"`
}

type TaskNode_Loop struct {
	Loop *LoopNode `protobuf:"bytes,17,opt,name=loop,proto3,oneof"`
}

type TaskNode_CustomCode struct {
	CustomCode *CustomCodeNode `protobuf:"bytes,18,opt,name=custom_code,json=customCode,proto3,oneof"`
}

func (*TaskNode_EthTransfer) isTaskNode_TaskType() {}

func (*TaskNode_ContractWrite) isTaskNode_TaskType() {}

func (*TaskNode_ContractRead) isTaskNode_TaskType() {}

func (*TaskNode_GraphqlQuery) isTaskNode_TaskType() {}

func (*TaskNode_RestApi) isTaskNode_TaskType() {}

func (*TaskNode_Branch) isTaskNode_TaskType() {}

func (*TaskNode_Filter) isTaskNode_TaskType() {}

func (*TaskNode_Loop) isTaskNode_TaskType() {}

func (*TaskNode_CustomCode) isTaskNode_TaskType() {}

type Execution struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StartAt       int64                  `protobuf:"varint,2,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"` // timestamp when execution started (in milliseconds)
	EndAt         int64                  `protobuf:"varint,3,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`       // timestamp when execution ended (in milliseconds)
	Success       bool                   `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	Error         string                 `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	Steps         []*Execution_Step      `protobuf:"bytes,8,rep,name=steps,proto3" json:"steps,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Execution) Reset() {
	*x = Execution{}
	mi := &file_avs_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Execution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Execution) ProtoMessage() {}

func (x *Execution) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Execution.ProtoReflect.Descriptor instead.
func (*Execution) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{21}
}

func (x *Execution) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Execution) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *Execution) GetEndAt() int64 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

func (x *Execution) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Execution) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Execution) GetSteps() []*Execution_Step {
	if x != nil {
		return x.Steps
	}
	return nil
}

type Task struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner              string                 `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	SmartWalletAddress string                 `protobuf:"bytes,3,opt,name=smart_wallet_address,json=smartWalletAddress,proto3" json:"smart_wallet_address,omitempty"`
	// task won't be check before this (timestamp in milliseconds)
	StartAt int64 `protobuf:"varint,4,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	// task won't be run/check after this (timestamp in milliseconds)
	ExpiredAt int64 `protobuf:"varint,5,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`
	// arbitrary data about this task. has a limit of 255 character
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// timestamp when task was completed (in milliseconds)
	CompletedAt int64 `protobuf:"varint,7,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	// limit on how many time this task can run. Set to 0 will make it run unlimited until cancelling or reaching its expired time
	MaxExecution int64 `protobuf:"varint,8,opt,name=max_execution,json=maxExecution,proto3" json:"max_execution,omitempty"`
	// return how many time this task has run
	ExecutionCount int64 `protobuf:"varint,9,opt,name=execution_count,json=executionCount,proto3" json:"execution_count,omitempty"`
	// timestamp when task was last executed (in milliseconds)
	LastRanAt     int64        `protobuf:"varint,10,opt,name=last_ran_at,json=lastRanAt,proto3" json:"last_ran_at,omitempty"`
	Status        TaskStatus   `protobuf:"varint,11,opt,name=status,proto3,enum=aggregator.TaskStatus" json:"status,omitempty"`
	Trigger       *TaskTrigger `protobuf:"bytes,12,opt,name=trigger,proto3" json:"trigger,omitempty"`
	Nodes         []*TaskNode  `protobuf:"bytes,13,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Edges         []*TaskEdge  `protobuf:"bytes,14,rep,name=edges,proto3" json:"edges,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_avs_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{22}
}

func (x *Task) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Task) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Task) GetSmartWalletAddress() string {
	if x != nil {
		return x.SmartWalletAddress
	}
	return ""
}

func (x *Task) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *Task) GetExpiredAt() int64 {
	if x != nil {
		return x.ExpiredAt
	}
	return 0
}

func (x *Task) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Task) GetCompletedAt() int64 {
	if x != nil {
		return x.CompletedAt
	}
	return 0
}

func (x *Task) GetMaxExecution() int64 {
	if x != nil {
		return x.MaxExecution
	}
	return 0
}

func (x *Task) GetExecutionCount() int64 {
	if x != nil {
		return x.ExecutionCount
	}
	return 0
}

func (x *Task) GetLastRanAt() int64 {
	if x != nil {
		return x.LastRanAt
	}
	return 0
}

func (x *Task) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_Active
}

func (x *Task) GetTrigger() *TaskTrigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

func (x *Task) GetNodes() []*TaskNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Task) GetEdges() []*TaskEdge {
	if x != nil {
		return x.Edges
	}
	return nil
}

type CreateTaskReq struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	Trigger      *TaskTrigger           `protobuf:"bytes,1,opt,name=trigger,proto3" json:"trigger,omitempty"`
	StartAt      int64                  `protobuf:"varint,2,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	ExpiredAt    int64                  `protobuf:"varint,3,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`
	MaxExecution int64                  `protobuf:"varint,4,opt,name=max_execution,json=maxExecution,proto3" json:"max_execution,omitempty"`
	// the smart wallet address that will be used to run this task
	// When leaving out, we will use the default(salt=0) wallet
	SmartWalletAddress string      `protobuf:"bytes,5,opt,name=smart_wallet_address,json=smartWalletAddress,proto3" json:"smart_wallet_address,omitempty"`
	Name               string      `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Nodes              []*TaskNode `protobuf:"bytes,7,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Edges              []*TaskEdge `protobuf:"bytes,8,rep,name=edges,proto3" json:"edges,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CreateTaskReq) Reset() {
	*x = CreateTaskReq{}
	mi := &file_avs_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskReq) ProtoMessage() {}

func (x *CreateTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskReq.ProtoReflect.Descriptor instead.
func (*CreateTaskReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{23}
}

func (x *CreateTaskReq) GetTrigger() *TaskTrigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

func (x *CreateTaskReq) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *CreateTaskReq) GetExpiredAt() int64 {
	if x != nil {
		return x.ExpiredAt
	}
	return 0
}

func (x *CreateTaskReq) GetMaxExecution() int64 {
	if x != nil {
		return x.MaxExecution
	}
	return 0
}

func (x *CreateTaskReq) GetSmartWalletAddress() string {
	if x != nil {
		return x.SmartWalletAddress
	}
	return ""
}

func (x *CreateTaskReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTaskReq) GetNodes() []*TaskNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *CreateTaskReq) GetEdges() []*TaskEdge {
	if x != nil {
		return x.Edges
	}
	return nil
}

type CreateTaskResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTaskResp) Reset() {
	*x = CreateTaskResp{}
	mi := &file_avs_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskResp) ProtoMessage() {}

func (x *CreateTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskResp.ProtoReflect.Descriptor instead.
func (*CreateTaskResp) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{24}
}

func (x *CreateTaskResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type NonceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Owner         string                 `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NonceRequest) Reset() {
	*x = NonceRequest{}
	mi := &file_avs_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NonceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonceRequest) ProtoMessage() {}

func (x *NonceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonceRequest.ProtoReflect.Descriptor instead.
func (*NonceRequest) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{25}
}

func (x *NonceRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

type NonceResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nonce         string                 `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NonceResp) Reset() {
	*x = NonceResp{}
	mi := &file_avs_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NonceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonceResp) ProtoMessage() {}

func (x *NonceResp) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonceResp.ProtoReflect.Descriptor instead.
func (*NonceResp) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{26}
}

func (x *NonceResp) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

type ListWalletReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// filter out by factory address or salt
	// otherwise return all the wallet
	FactoryAddress string `protobuf:"bytes,1,opt,name=factory_address,json=factoryAddress,proto3" json:"factory_address,omitempty"` // TODO: Consider renaming to factoryAddress for consistency if this is used as a filter key matching SmartWallet.factoryAddress
	Salt           string `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListWalletReq) Reset() {
	*x = ListWalletReq{}
	mi := &file_avs_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListWalletReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletReq) ProtoMessage() {}

func (x *ListWalletReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletReq.ProtoReflect.Descriptor instead.
func (*ListWalletReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{27}
}

func (x *ListWalletReq) GetFactoryAddress() string {
	if x != nil {
		return x.FactoryAddress
	}
	return ""
}

func (x *ListWalletReq) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

type SmartWallet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Salt          string                 `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
	Factory       string                 `protobuf:"bytes,3,opt,name=factory,proto3" json:"factory,omitempty"`
	IsHidden      bool                   `protobuf:"varint,4,opt,name=is_hidden,json=isHidden,proto3" json:"is_hidden,omitempty"` // Whether the wallet is hidden
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SmartWallet) Reset() {
	*x = SmartWallet{}
	mi := &file_avs_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmartWallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartWallet) ProtoMessage() {}

func (x *SmartWallet) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartWallet.ProtoReflect.Descriptor instead.
func (*SmartWallet) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{28}
}

func (x *SmartWallet) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SmartWallet) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *SmartWallet) GetFactory() string {
	if x != nil {
		return x.Factory
	}
	return ""
}

func (x *SmartWallet) GetIsHidden() bool {
	if x != nil {
		return x.IsHidden
	}
	return false
}

type ListWalletResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*SmartWallet         `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListWalletResp) Reset() {
	*x = ListWalletResp{}
	mi := &file_avs_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListWalletResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletResp) ProtoMessage() {}

func (x *ListWalletResp) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletResp.ProtoReflect.Descriptor instead.
func (*ListWalletResp) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{29}
}

func (x *ListWalletResp) GetItems() []*SmartWallet {
	if x != nil {
		return x.Items
	}
	return nil
}

type ListTasksReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filter out by the smart_wallet_address
	SmartWalletAddress []string `protobuf:"bytes,1,rep,name=smart_wallet_address,json=smartWalletAddress,proto3" json:"smart_wallet_address,omitempty"`
	// Get items before this cursor value (for backward pagination)
	Before string `protobuf:"bytes,2,opt,name=before,proto3" json:"before,omitempty"`
	// Get items after this cursor value (for forward pagination)
	After string `protobuf:"bytes,3,opt,name=after,proto3" json:"after,omitempty"`
	Limit int64  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// Field control options for flexible response content
	IncludeNodes  bool `protobuf:"varint,5,opt,name=include_nodes,json=includeNodes,proto3" json:"include_nodes,omitempty"` // Include task nodes (expensive field)
	IncludeEdges  bool `protobuf:"varint,6,opt,name=include_edges,json=includeEdges,proto3" json:"include_edges,omitempty"` // Include task edges (expensive field)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTasksReq) Reset() {
	*x = ListTasksReq{}
	mi := &file_avs_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTasksReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksReq) ProtoMessage() {}

func (x *ListTasksReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksReq.ProtoReflect.Descriptor instead.
func (*ListTasksReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{30}
}

func (x *ListTasksReq) GetSmartWalletAddress() []string {
	if x != nil {
		return x.SmartWalletAddress
	}
	return nil
}

func (x *ListTasksReq) GetBefore() string {
	if x != nil {
		return x.Before
	}
	return ""
}

func (x *ListTasksReq) GetAfter() string {
	if x != nil {
		return x.After
	}
	return ""
}

func (x *ListTasksReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListTasksReq) GetIncludeNodes() bool {
	if x != nil {
		return x.IncludeNodes
	}
	return false
}

func (x *ListTasksReq) GetIncludeEdges() bool {
	if x != nil {
		return x.IncludeEdges
	}
	return false
}

type ListTasksResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Task                `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	PageInfo      *PageInfo              `protobuf:"bytes,2,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTasksResp) Reset() {
	*x = ListTasksResp{}
	mi := &file_avs_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTasksResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksResp) ProtoMessage() {}

func (x *ListTasksResp) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksResp.ProtoReflect.Descriptor instead.
func (*ListTasksResp) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{31}
}

func (x *ListTasksResp) GetItems() []*Task {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListTasksResp) GetPageInfo() *PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

type ListExecutionsReq struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	TaskIds []string               `protobuf:"bytes,1,rep,name=task_ids,json=taskIds,proto3" json:"task_ids,omitempty"`
	// Get items before this cursor value (for backward pagination)
	Before string `protobuf:"bytes,2,opt,name=before,proto3" json:"before,omitempty"`
	// Get items after this cursor value (for forward pagination)
	After         string `protobuf:"bytes,3,opt,name=after,proto3" json:"after,omitempty"`
	Limit         int64  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListExecutionsReq) Reset() {
	*x = ListExecutionsReq{}
	mi := &file_avs_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListExecutionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExecutionsReq) ProtoMessage() {}

func (x *ListExecutionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExecutionsReq.ProtoReflect.Descriptor instead.
func (*ListExecutionsReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{32}
}

func (x *ListExecutionsReq) GetTaskIds() []string {
	if x != nil {
		return x.TaskIds
	}
	return nil
}

func (x *ListExecutionsReq) GetBefore() string {
	if x != nil {
		return x.Before
	}
	return ""
}

func (x *ListExecutionsReq) GetAfter() string {
	if x != nil {
		return x.After
	}
	return ""
}

func (x *ListExecutionsReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListExecutionsResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Execution           `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	PageInfo      *PageInfo              `protobuf:"bytes,2,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListExecutionsResp) Reset() {
	*x = ListExecutionsResp{}
	mi := &file_avs_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListExecutionsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExecutionsResp) ProtoMessage() {}

func (x *ListExecutionsResp) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExecutionsResp.ProtoReflect.Descriptor instead.
func (*ListExecutionsResp) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{33}
}

func (x *ListExecutionsResp) GetItems() []*Execution {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListExecutionsResp) GetPageInfo() *PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

type ExecutionReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	ExecutionId   string                 `protobuf:"bytes,2,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecutionReq) Reset() {
	*x = ExecutionReq{}
	mi := &file_avs_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionReq) ProtoMessage() {}

func (x *ExecutionReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionReq.ProtoReflect.Descriptor instead.
func (*ExecutionReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{34}
}

func (x *ExecutionReq) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ExecutionReq) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

type ExecutionStatusResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        ExecutionStatus        `protobuf:"varint,1,opt,name=status,proto3,enum=aggregator.ExecutionStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecutionStatusResp) Reset() {
	*x = ExecutionStatusResp{}
	mi := &file_avs_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutionStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionStatusResp) ProtoMessage() {}

func (x *ExecutionStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionStatusResp.ProtoReflect.Descriptor instead.
func (*ExecutionStatusResp) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{35}
}

func (x *ExecutionStatusResp) GetStatus() ExecutionStatus {
	if x != nil {
		return x.Status
	}
	return ExecutionStatus_EXECUTION_STATUS_UNSPECIFIED
}

type GetKeyReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The message to sign, provided by GetSignatureFormat
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// The signature of the message
	Signature     string `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKeyReq) Reset() {
	*x = GetKeyReq{}
	mi := &file_avs_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKeyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyReq) ProtoMessage() {}

func (x *GetKeyReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyReq.ProtoReflect.Descriptor instead.
func (*GetKeyReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{36}
}

func (x *GetKeyReq) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetKeyReq) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type KeyResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The user's address derived from the signature
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The auth key to include in all future requests
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// The message that was signed to produce the signature
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// Expiry of the auth key in seconds since epoch
	Expiry        uint64 `protobuf:"varint,4,opt,name=expiry,proto3" json:"expiry,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyResp) Reset() {
	*x = KeyResp{}
	mi := &file_avs_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyResp) ProtoMessage() {}

func (x *KeyResp) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyResp.ProtoReflect.Descriptor instead.
func (*KeyResp) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{37}
}

func (x *KeyResp) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *KeyResp) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *KeyResp) GetExpiry() uint64 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

type GetWalletReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Salt  string                 `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	// this is the factory address for the wallet, when leaving its empty, we will use our default factory address
	FactoryAddress string `protobuf:"bytes,2,opt,name=factory_address,json=factoryAddress,proto3" json:"factory_address,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetWalletReq) Reset() {
	*x = GetWalletReq{}
	mi := &file_avs_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWalletReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletReq) ProtoMessage() {}

func (x *GetWalletReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletReq.ProtoReflect.Descriptor instead.
func (*GetWalletReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{38}
}

func (x *GetWalletReq) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *GetWalletReq) GetFactoryAddress() string {
	if x != nil {
		return x.FactoryAddress
	}
	return ""
}

type GetWalletResp struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Address            string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Salt               string                 `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
	FactoryAddress     string                 `protobuf:"bytes,3,opt,name=factory_address,json=factoryAddress,proto3" json:"factory_address,omitempty"`
	IsHidden           bool                   `protobuf:"varint,4,opt,name=is_hidden,json=isHidden,proto3" json:"is_hidden,omitempty"`
	TotalTaskCount     uint64                 `protobuf:"varint,5,opt,name=total_task_count,json=totalTaskCount,proto3" json:"total_task_count,omitempty"`
	ActiveTaskCount    uint64                 `protobuf:"varint,6,opt,name=active_task_count,json=activeTaskCount,proto3" json:"active_task_count,omitempty"`
	CompletedTaskCount uint64                 `protobuf:"varint,7,opt,name=completed_task_count,json=completedTaskCount,proto3" json:"completed_task_count,omitempty"`
	FailedTaskCount    uint64                 `protobuf:"varint,8,opt,name=failed_task_count,json=failedTaskCount,proto3" json:"failed_task_count,omitempty"`
	CanceledTaskCount  uint64                 `protobuf:"varint,9,opt,name=canceled_task_count,json=canceledTaskCount,proto3" json:"canceled_task_count,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetWalletResp) Reset() {
	*x = GetWalletResp{}
	mi := &file_avs_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWalletResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletResp) ProtoMessage() {}

func (x *GetWalletResp) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletResp.ProtoReflect.Descriptor instead.
func (*GetWalletResp) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{39}
}

func (x *GetWalletResp) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetWalletResp) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *GetWalletResp) GetFactoryAddress() string {
	if x != nil {
		return x.FactoryAddress
	}
	return ""
}

func (x *GetWalletResp) GetIsHidden() bool {
	if x != nil {
		return x.IsHidden
	}
	return false
}

func (x *GetWalletResp) GetTotalTaskCount() uint64 {
	if x != nil {
		return x.TotalTaskCount
	}
	return 0
}

func (x *GetWalletResp) GetActiveTaskCount() uint64 {
	if x != nil {
		return x.ActiveTaskCount
	}
	return 0
}

func (x *GetWalletResp) GetCompletedTaskCount() uint64 {
	if x != nil {
		return x.CompletedTaskCount
	}
	return 0
}

func (x *GetWalletResp) GetFailedTaskCount() uint64 {
	if x != nil {
		return x.FailedTaskCount
	}
	return 0
}

func (x *GetWalletResp) GetCanceledTaskCount() uint64 {
	if x != nil {
		return x.CanceledTaskCount
	}
	return 0
}

type SetWalletReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Salt  string                 `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	// this is the factory address for the wallet, when leaving its empty, we will use our default factory address
	FactoryAddress string `protobuf:"bytes,2,opt,name=factory_address,json=factoryAddress,proto3" json:"factory_address,omitempty"`
	// whether the wallet should be hidden in getWallets results
	IsHidden      bool `protobuf:"varint,3,opt,name=is_hidden,json=isHidden,proto3" json:"is_hidden,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetWalletReq) Reset() {
	*x = SetWalletReq{}
	mi := &file_avs_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetWalletReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetWalletReq) ProtoMessage() {}

func (x *SetWalletReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetWalletReq.ProtoReflect.Descriptor instead.
func (*SetWalletReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{40}
}

func (x *SetWalletReq) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *SetWalletReq) GetFactoryAddress() string {
	if x != nil {
		return x.FactoryAddress
	}
	return ""
}

func (x *SetWalletReq) GetIsHidden() bool {
	if x != nil {
		return x.IsHidden
	}
	return false
}

type TriggerTaskReq struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	TaskId string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Flattened from TriggerReason: Use the top-level TriggerType enum for consistency
	TriggerType TriggerType `protobuf:"varint,2,opt,name=trigger_type,json=triggerType,proto3,enum=aggregator.TriggerType" json:"trigger_type,omitempty"`
	// Flattened from TriggerReason: trigger output data based on type
	//
	// Types that are valid to be assigned to TriggerOutput:
	//
	//	*TriggerTaskReq_BlockTrigger
	//	*TriggerTaskReq_FixedTimeTrigger
	//	*TriggerTaskReq_CronTrigger
	//	*TriggerTaskReq_EventTrigger
	//	*TriggerTaskReq_ManualTrigger
	TriggerOutput isTriggerTaskReq_TriggerOutput `protobuf_oneof:"trigger_output"`
	// when setting is_blocking=true, the execution run in the same request. the request is blocked until the execution is done
	// setting to false, the task will be execute in our normal queueu system, and the request won't block.
	// default value is false, for interact testing, set this to true
	IsBlocking    bool `protobuf:"varint,8,opt,name=is_blocking,json=isBlocking,proto3" json:"is_blocking,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TriggerTaskReq) Reset() {
	*x = TriggerTaskReq{}
	mi := &file_avs_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TriggerTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerTaskReq) ProtoMessage() {}

func (x *TriggerTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerTaskReq.ProtoReflect.Descriptor instead.
func (*TriggerTaskReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{41}
}

func (x *TriggerTaskReq) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TriggerTaskReq) GetTriggerType() TriggerType {
	if x != nil {
		return x.TriggerType
	}
	return TriggerType_TRIGGER_TYPE_UNSPECIFIED
}

func (x *TriggerTaskReq) GetTriggerOutput() isTriggerTaskReq_TriggerOutput {
	if x != nil {
		return x.TriggerOutput
	}
	return nil
}

func (x *TriggerTaskReq) GetBlockTrigger() *BlockTrigger_Output {
	if x != nil {
		if x, ok := x.TriggerOutput.(*TriggerTaskReq_BlockTrigger); ok {
			return x.BlockTrigger
		}
	}
	return nil
}

func (x *TriggerTaskReq) GetFixedTimeTrigger() *FixedTimeTrigger_Output {
	if x != nil {
		if x, ok := x.TriggerOutput.(*TriggerTaskReq_FixedTimeTrigger); ok {
			return x.FixedTimeTrigger
		}
	}
	return nil
}

func (x *TriggerTaskReq) GetCronTrigger() *CronTrigger_Output {
	if x != nil {
		if x, ok := x.TriggerOutput.(*TriggerTaskReq_CronTrigger); ok {
			return x.CronTrigger
		}
	}
	return nil
}

func (x *TriggerTaskReq) GetEventTrigger() *EventTrigger_Output {
	if x != nil {
		if x, ok := x.TriggerOutput.(*TriggerTaskReq_EventTrigger); ok {
			return x.EventTrigger
		}
	}
	return nil
}

func (x *TriggerTaskReq) GetManualTrigger() *ManualTrigger_Output {
	if x != nil {
		if x, ok := x.TriggerOutput.(*TriggerTaskReq_ManualTrigger); ok {
			return x.ManualTrigger
		}
	}
	return nil
}

func (x *TriggerTaskReq) GetIsBlocking() bool {
	if x != nil {
		return x.IsBlocking
	}
	return false
}

type isTriggerTaskReq_TriggerOutput interface {
	isTriggerTaskReq_TriggerOutput()
}

type TriggerTaskReq_BlockTrigger struct {
	BlockTrigger *BlockTrigger_Output `protobuf:"bytes,3,opt,name=block_trigger,json=blockTrigger,proto3,oneof"`
}

type TriggerTaskReq_FixedTimeTrigger struct {
	FixedTimeTrigger *FixedTimeTrigger_Output `protobuf:"bytes,4,opt,name=fixed_time_trigger,json=fixedTimeTrigger,proto3,oneof"`
}

type TriggerTaskReq_CronTrigger struct {
	CronTrigger *CronTrigger_Output `protobuf:"bytes,5,opt,name=cron_trigger,json=cronTrigger,proto3,oneof"`
}

type TriggerTaskReq_EventTrigger struct {
	EventTrigger *EventTrigger_Output `protobuf:"bytes,6,opt,name=event_trigger,json=eventTrigger,proto3,oneof"`
}

type TriggerTaskReq_ManualTrigger struct {
	ManualTrigger *ManualTrigger_Output `protobuf:"bytes,7,opt,name=manual_trigger,json=manualTrigger,proto3,oneof"`
}

func (*TriggerTaskReq_BlockTrigger) isTriggerTaskReq_TriggerOutput() {}

func (*TriggerTaskReq_FixedTimeTrigger) isTriggerTaskReq_TriggerOutput() {}

func (*TriggerTaskReq_CronTrigger) isTriggerTaskReq_TriggerOutput() {}

func (*TriggerTaskReq_EventTrigger) isTriggerTaskReq_TriggerOutput() {}

func (*TriggerTaskReq_ManualTrigger) isTriggerTaskReq_TriggerOutput() {}

type TriggerTaskResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Regardless whether it is a block or async, we always get back the same kind of id for this trigger.
	// The caller then make a second request to GetExecution to check for the execution status and data.
	// In the blocking mode, the execution_id is materialized and has been created, we can then call GetExecution on it immediately to receive result
	// In async mode, the execution_id is created ahead of time and not materialized, calling GetExecutionStatus on it will return Status=Pending for example. Once Status=Completed you can call GetExecution to get all log and detail. Call GetExecution before it is completed will result in "Execution Not Found"
	ExecutionId   string          `protobuf:"bytes,1,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	Status        ExecutionStatus `protobuf:"varint,2,opt,name=status,proto3,enum=aggregator.ExecutionStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TriggerTaskResp) Reset() {
	*x = TriggerTaskResp{}
	mi := &file_avs_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TriggerTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerTaskResp) ProtoMessage() {}

func (x *TriggerTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerTaskResp.ProtoReflect.Descriptor instead.
func (*TriggerTaskResp) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{42}
}

func (x *TriggerTaskResp) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *TriggerTaskResp) GetStatus() ExecutionStatus {
	if x != nil {
		return x.Status
	}
	return ExecutionStatus_EXECUTION_STATUS_UNSPECIFIED
}

type CreateOrUpdateSecretReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// name of the secret. it should be [a-zA-Z0-9_]+
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// value can be any valid unicode string
	// Secret is the only thing we can change in an update. workflow and org id cannot be change
	Secret string `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	// A secret when define can be at these level
	// - org: available to everything in the org. Currently this isn't supported yet. reserve for future use
	// - user: available to all workflow of an user. This is the default level
	// - workflow: available to a single workflow. To make a secret available to multiple workflow, either use org/user level or define them on other workflow.
	WorkflowId    string `protobuf:"bytes,3,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	OrgId         string `protobuf:"bytes,4,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOrUpdateSecretReq) Reset() {
	*x = CreateOrUpdateSecretReq{}
	mi := &file_avs_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrUpdateSecretReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateSecretReq) ProtoMessage() {}

func (x *CreateOrUpdateSecretReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateSecretReq.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateSecretReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{43}
}

func (x *CreateOrUpdateSecretReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateOrUpdateSecretReq) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *CreateOrUpdateSecretReq) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *CreateOrUpdateSecretReq) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

type ListSecretsReq struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	WorkflowId string                 `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// Get items before this cursor value (for backward pagination)
	Before string `protobuf:"bytes,2,opt,name=before,proto3" json:"before,omitempty"`
	// Get items after this cursor value (for forward pagination)
	After string `protobuf:"bytes,3,opt,name=after,proto3" json:"after,omitempty"`
	Limit int64  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// Field control options for flexible response content
	IncludeTimestamps  bool `protobuf:"varint,5,opt,name=include_timestamps,json=includeTimestamps,proto3" json:"include_timestamps,omitempty"`    // Include created_at and updated_at fields
	IncludeCreatedBy   bool `protobuf:"varint,6,opt,name=include_created_by,json=includeCreatedBy,proto3" json:"include_created_by,omitempty"`     // Include created_by field
	IncludeDescription bool `protobuf:"varint,7,opt,name=include_description,json=includeDescription,proto3" json:"include_description,omitempty"` // Include description field
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ListSecretsReq) Reset() {
	*x = ListSecretsReq{}
	mi := &file_avs_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSecretsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecretsReq) ProtoMessage() {}

func (x *ListSecretsReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecretsReq.ProtoReflect.Descriptor instead.
func (*ListSecretsReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{44}
}

func (x *ListSecretsReq) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *ListSecretsReq) GetBefore() string {
	if x != nil {
		return x.Before
	}
	return ""
}

func (x *ListSecretsReq) GetAfter() string {
	if x != nil {
		return x.After
	}
	return ""
}

func (x *ListSecretsReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListSecretsReq) GetIncludeTimestamps() bool {
	if x != nil {
		return x.IncludeTimestamps
	}
	return false
}

func (x *ListSecretsReq) GetIncludeCreatedBy() bool {
	if x != nil {
		return x.IncludeCreatedBy
	}
	return false
}

func (x *ListSecretsReq) GetIncludeDescription() bool {
	if x != nil {
		return x.IncludeDescription
	}
	return false
}

// Standard pagination info following GraphQL cursor-based pagination
type PageInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	StartCursor     string                 `protobuf:"bytes,1,opt,name=start_cursor,json=startCursor,proto3" json:"start_cursor,omitempty"`                // Cursor pointing to the first item in the current page
	EndCursor       string                 `protobuf:"bytes,2,opt,name=end_cursor,json=endCursor,proto3" json:"end_cursor,omitempty"`                      // Cursor pointing to the last item in the current page
	HasPreviousPage bool                   `protobuf:"varint,3,opt,name=has_previous_page,json=hasPreviousPage,proto3" json:"has_previous_page,omitempty"` // Whether there are more items before the current page
	HasNextPage     bool                   `protobuf:"varint,4,opt,name=has_next_page,json=hasNextPage,proto3" json:"has_next_page,omitempty"`             // Whether there are more items after the current page
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PageInfo) Reset() {
	*x = PageInfo{}
	mi := &file_avs_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfo) ProtoMessage() {}

func (x *PageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfo.ProtoReflect.Descriptor instead.
func (*PageInfo) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{45}
}

func (x *PageInfo) GetStartCursor() string {
	if x != nil {
		return x.StartCursor
	}
	return ""
}

func (x *PageInfo) GetEndCursor() string {
	if x != nil {
		return x.EndCursor
	}
	return ""
}

func (x *PageInfo) GetHasPreviousPage() bool {
	if x != nil {
		return x.HasPreviousPage
	}
	return false
}

func (x *PageInfo) GetHasNextPage() bool {
	if x != nil {
		return x.HasNextPage
	}
	return false
}

// Secret represents a secret configuration without the actual secret value
type Secret struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// when listing secret, we don't return its value, just secret and last update
	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Scope      string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	WorkflowId string `protobuf:"bytes,3,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	OrgId      string `protobuf:"bytes,4,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Additional fields that can be controlled via field masks
	CreatedAt     int64  `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // Unix timestamp when secret was created
	UpdatedAt     int64  `protobuf:"varint,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // Unix timestamp when secret was last updated
	CreatedBy     string `protobuf:"bytes,7,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`  // User ID who created the secret
	Description   string `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`               // Optional description of the secret
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Secret) Reset() {
	*x = Secret{}
	mi := &file_avs_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Secret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secret) ProtoMessage() {}

func (x *Secret) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secret.ProtoReflect.Descriptor instead.
func (*Secret) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{46}
}

func (x *Secret) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Secret) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *Secret) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *Secret) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *Secret) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Secret) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Secret) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Secret) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ListSecretsResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Secret              `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	PageInfo      *PageInfo              `protobuf:"bytes,2,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSecretsResp) Reset() {
	*x = ListSecretsResp{}
	mi := &file_avs_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSecretsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecretsResp) ProtoMessage() {}

func (x *ListSecretsResp) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecretsResp.ProtoReflect.Descriptor instead.
func (*ListSecretsResp) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{47}
}

func (x *ListSecretsResp) GetItems() []*Secret {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListSecretsResp) GetPageInfo() *PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

type DeleteSecretReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Delete the secret belong to the specific workflow. Without its, we delete the one belong to user
	WorkflowId string `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// Delete the secret belong to the specific prg. Without its, we delete the one belong to user
	OrgId         string `protobuf:"bytes,3,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSecretReq) Reset() {
	*x = DeleteSecretReq{}
	mi := &file_avs_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSecretReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSecretReq) ProtoMessage() {}

func (x *DeleteSecretReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSecretReq.ProtoReflect.Descriptor instead.
func (*DeleteSecretReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{48}
}

func (x *DeleteSecretReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteSecretReq) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *DeleteSecretReq) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

type GetSignatureFormatReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The wallet address to include in the signature format
	Wallet        string `protobuf:"bytes,1,opt,name=wallet,proto3" json:"wallet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSignatureFormatReq) Reset() {
	*x = GetSignatureFormatReq{}
	mi := &file_avs_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSignatureFormatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignatureFormatReq) ProtoMessage() {}

func (x *GetSignatureFormatReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignatureFormatReq.ProtoReflect.Descriptor instead.
func (*GetSignatureFormatReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{49}
}

func (x *GetSignatureFormatReq) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

type GetSignatureFormatResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The formatted signature message with server-side values filled in
	Message       string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSignatureFormatResp) Reset() {
	*x = GetSignatureFormatResp{}
	mi := &file_avs_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSignatureFormatResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignatureFormatResp) ProtoMessage() {}

func (x *GetSignatureFormatResp) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignatureFormatResp.ProtoReflect.Descriptor instead.
func (*GetSignatureFormatResp) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{50}
}

func (x *GetSignatureFormatResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Request message for GetWorkflowCount
type GetWorkflowCountReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Addresses     []string               `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"` // Optional array of smart wallet addresses
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWorkflowCountReq) Reset() {
	*x = GetWorkflowCountReq{}
	mi := &file_avs_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWorkflowCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowCountReq) ProtoMessage() {}

func (x *GetWorkflowCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowCountReq.ProtoReflect.Descriptor instead.
func (*GetWorkflowCountReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{51}
}

func (x *GetWorkflowCountReq) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

// Response message for GetWorkflowCount
type GetWorkflowCountResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TODO: eventually to support active, cancel and other metrics
	Total         int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` // the total count of workflow
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWorkflowCountResp) Reset() {
	*x = GetWorkflowCountResp{}
	mi := &file_avs_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWorkflowCountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowCountResp) ProtoMessage() {}

func (x *GetWorkflowCountResp) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowCountResp.ProtoReflect.Descriptor instead.
func (*GetWorkflowCountResp) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{52}
}

func (x *GetWorkflowCountResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetExecutionCountReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkflowIds   []string               `protobuf:"bytes,1,rep,name=workflow_ids,json=workflowIds,proto3" json:"workflow_ids,omitempty"` // Optional array of workflow IDs, count all executions of the owner if not provided
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExecutionCountReq) Reset() {
	*x = GetExecutionCountReq{}
	mi := &file_avs_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExecutionCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExecutionCountReq) ProtoMessage() {}

func (x *GetExecutionCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExecutionCountReq.ProtoReflect.Descriptor instead.
func (*GetExecutionCountReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{53}
}

func (x *GetExecutionCountReq) GetWorkflowIds() []string {
	if x != nil {
		return x.WorkflowIds
	}
	return nil
}

// Response message for GetExecutionCount
type GetExecutionCountResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TODO: eventually to support success, error count execution
	Total         int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` // The total count of executions
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExecutionCountResp) Reset() {
	*x = GetExecutionCountResp{}
	mi := &file_avs_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExecutionCountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExecutionCountResp) ProtoMessage() {}

func (x *GetExecutionCountResp) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExecutionCountResp.ProtoReflect.Descriptor instead.
func (*GetExecutionCountResp) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{54}
}

func (x *GetExecutionCountResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// Request message for GetExecutionStats
type GetExecutionStatsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkflowIds   []string               `protobuf:"bytes,1,rep,name=workflow_ids,json=workflowIds,proto3" json:"workflow_ids,omitempty"` // Optional array of workflow IDs
	Days          int64                  `protobuf:"varint,2,opt,name=days,proto3" json:"days,omitempty"`                                 // Number of days to look back (default: 7)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExecutionStatsReq) Reset() {
	*x = GetExecutionStatsReq{}
	mi := &file_avs_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExecutionStatsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExecutionStatsReq) ProtoMessage() {}

func (x *GetExecutionStatsReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExecutionStatsReq.ProtoReflect.Descriptor instead.
func (*GetExecutionStatsReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{55}
}

func (x *GetExecutionStatsReq) GetWorkflowIds() []string {
	if x != nil {
		return x.WorkflowIds
	}
	return nil
}

func (x *GetExecutionStatsReq) GetDays() int64 {
	if x != nil {
		return x.Days
	}
	return 0
}

// Response message for GetExecutionStats
type GetExecutionStatsResp struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Total            int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`                                                  // Total number of executions
	Succeeded        int64                  `protobuf:"varint,2,opt,name=succeeded,proto3" json:"succeeded,omitempty"`                                          // Number of successful executions
	Failed           int64                  `protobuf:"varint,3,opt,name=failed,proto3" json:"failed,omitempty"`                                                // Number of failed executions
	AvgExecutionTime float64                `protobuf:"fixed64,4,opt,name=avg_execution_time,json=avgExecutionTime,proto3" json:"avg_execution_time,omitempty"` // Average execution time in milliseconds
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetExecutionStatsResp) Reset() {
	*x = GetExecutionStatsResp{}
	mi := &file_avs_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExecutionStatsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExecutionStatsResp) ProtoMessage() {}

func (x *GetExecutionStatsResp) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExecutionStatsResp.ProtoReflect.Descriptor instead.
func (*GetExecutionStatsResp) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{56}
}

func (x *GetExecutionStatsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetExecutionStatsResp) GetSucceeded() int64 {
	if x != nil {
		return x.Succeeded
	}
	return 0
}

func (x *GetExecutionStatsResp) GetFailed() int64 {
	if x != nil {
		return x.Failed
	}
	return 0
}

func (x *GetExecutionStatsResp) GetAvgExecutionTime() float64 {
	if x != nil {
		return x.AvgExecutionTime
	}
	return 0
}

// Request message for RunNodeWithInputs
type RunNodeWithInputsReq struct {
	state          protoimpl.MessageState     `protogen:"open.v1"`
	NodeType       NodeType                   `protobuf:"varint,1,opt,name=node_type,json=nodeType,proto3,enum=aggregator.NodeType" json:"node_type,omitempty"`                                                                   // Type of node to execute using the NodeType enum
	NodeConfig     map[string]*structpb.Value `protobuf:"bytes,2,rep,name=node_config,json=nodeConfig,proto3" json:"node_config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`             // Configuration for the node
	InputVariables map[string]*structpb.Value `protobuf:"bytes,3,rep,name=input_variables,json=inputVariables,proto3" json:"input_variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Input variables for the node
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RunNodeWithInputsReq) Reset() {
	*x = RunNodeWithInputsReq{}
	mi := &file_avs_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunNodeWithInputsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunNodeWithInputsReq) ProtoMessage() {}

func (x *RunNodeWithInputsReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunNodeWithInputsReq.ProtoReflect.Descriptor instead.
func (*RunNodeWithInputsReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{57}
}

func (x *RunNodeWithInputsReq) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NODE_TYPE_UNSPECIFIED
}

func (x *RunNodeWithInputsReq) GetNodeConfig() map[string]*structpb.Value {
	if x != nil {
		return x.NodeConfig
	}
	return nil
}

func (x *RunNodeWithInputsReq) GetInputVariables() map[string]*structpb.Value {
	if x != nil {
		return x.InputVariables
	}
	return nil
}

// Response message for RunNodeWithInputs
type RunNodeWithInputsResp struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Success bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`            // Whether the execution was successful
	Error   string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`                 // Error message if execution failed
	NodeId  string                 `protobuf:"bytes,4,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"` // ID of the executed node
	// Use specific output types for nodes only
	//
	// Types that are valid to be assigned to OutputData:
	//
	//	*RunNodeWithInputsResp_EthTransfer
	//	*RunNodeWithInputsResp_Graphql
	//	*RunNodeWithInputsResp_ContractRead
	//	*RunNodeWithInputsResp_ContractWrite
	//	*RunNodeWithInputsResp_CustomCode
	//	*RunNodeWithInputsResp_RestApi
	//	*RunNodeWithInputsResp_Branch
	//	*RunNodeWithInputsResp_Filter
	//	*RunNodeWithInputsResp_Loop
	OutputData    isRunNodeWithInputsResp_OutputData `protobuf_oneof:"output_data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunNodeWithInputsResp) Reset() {
	*x = RunNodeWithInputsResp{}
	mi := &file_avs_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunNodeWithInputsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunNodeWithInputsResp) ProtoMessage() {}

func (x *RunNodeWithInputsResp) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunNodeWithInputsResp.ProtoReflect.Descriptor instead.
func (*RunNodeWithInputsResp) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{58}
}

func (x *RunNodeWithInputsResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RunNodeWithInputsResp) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *RunNodeWithInputsResp) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *RunNodeWithInputsResp) GetOutputData() isRunNodeWithInputsResp_OutputData {
	if x != nil {
		return x.OutputData
	}
	return nil
}

func (x *RunNodeWithInputsResp) GetEthTransfer() *ETHTransferNode_Output {
	if x != nil {
		if x, ok := x.OutputData.(*RunNodeWithInputsResp_EthTransfer); ok {
			return x.EthTransfer
		}
	}
	return nil
}

func (x *RunNodeWithInputsResp) GetGraphql() *GraphQLQueryNode_Output {
	if x != nil {
		if x, ok := x.OutputData.(*RunNodeWithInputsResp_Graphql); ok {
			return x.Graphql
		}
	}
	return nil
}

func (x *RunNodeWithInputsResp) GetContractRead() *ContractReadNode_Output {
	if x != nil {
		if x, ok := x.OutputData.(*RunNodeWithInputsResp_ContractRead); ok {
			return x.ContractRead
		}
	}
	return nil
}

func (x *RunNodeWithInputsResp) GetContractWrite() *ContractWriteNode_Output {
	if x != nil {
		if x, ok := x.OutputData.(*RunNodeWithInputsResp_ContractWrite); ok {
			return x.ContractWrite
		}
	}
	return nil
}

func (x *RunNodeWithInputsResp) GetCustomCode() *CustomCodeNode_Output {
	if x != nil {
		if x, ok := x.OutputData.(*RunNodeWithInputsResp_CustomCode); ok {
			return x.CustomCode
		}
	}
	return nil
}

func (x *RunNodeWithInputsResp) GetRestApi() *RestAPINode_Output {
	if x != nil {
		if x, ok := x.OutputData.(*RunNodeWithInputsResp_RestApi); ok {
			return x.RestApi
		}
	}
	return nil
}

func (x *RunNodeWithInputsResp) GetBranch() *BranchNode_Output {
	if x != nil {
		if x, ok := x.OutputData.(*RunNodeWithInputsResp_Branch); ok {
			return x.Branch
		}
	}
	return nil
}

func (x *RunNodeWithInputsResp) GetFilter() *FilterNode_Output {
	if x != nil {
		if x, ok := x.OutputData.(*RunNodeWithInputsResp_Filter); ok {
			return x.Filter
		}
	}
	return nil
}

func (x *RunNodeWithInputsResp) GetLoop() *LoopNode_Output {
	if x != nil {
		if x, ok := x.OutputData.(*RunNodeWithInputsResp_Loop); ok {
			return x.Loop
		}
	}
	return nil
}

type isRunNodeWithInputsResp_OutputData interface {
	isRunNodeWithInputsResp_OutputData()
}

type RunNodeWithInputsResp_EthTransfer struct {
	// Node outputs
	EthTransfer *ETHTransferNode_Output `protobuf:"bytes,10,opt,name=eth_transfer,json=ethTransfer,proto3,oneof"`
}

type RunNodeWithInputsResp_Graphql struct {
	Graphql *GraphQLQueryNode_Output `protobuf:"bytes,11,opt,name=graphql,proto3,oneof"`
}

type RunNodeWithInputsResp_ContractRead struct {
	ContractRead *ContractReadNode_Output `protobuf:"bytes,12,opt,name=contract_read,json=contractRead,proto3,oneof"`
}

type RunNodeWithInputsResp_ContractWrite struct {
	ContractWrite *ContractWriteNode_Output `protobuf:"bytes,13,opt,name=contract_write,json=contractWrite,proto3,oneof"`
}

type RunNodeWithInputsResp_CustomCode struct {
	CustomCode *CustomCodeNode_Output `protobuf:"bytes,14,opt,name=custom_code,json=customCode,proto3,oneof"`
}

type RunNodeWithInputsResp_RestApi struct {
	RestApi *RestAPINode_Output `protobuf:"bytes,15,opt,name=rest_api,json=restApi,proto3,oneof"`
}

type RunNodeWithInputsResp_Branch struct {
	Branch *BranchNode_Output `protobuf:"bytes,16,opt,name=branch,proto3,oneof"`
}

type RunNodeWithInputsResp_Filter struct {
	Filter *FilterNode_Output `protobuf:"bytes,17,opt,name=filter,proto3,oneof"`
}

type RunNodeWithInputsResp_Loop struct {
	Loop *LoopNode_Output `protobuf:"bytes,18,opt,name=loop,proto3,oneof"`
}

func (*RunNodeWithInputsResp_EthTransfer) isRunNodeWithInputsResp_OutputData() {}

func (*RunNodeWithInputsResp_Graphql) isRunNodeWithInputsResp_OutputData() {}

func (*RunNodeWithInputsResp_ContractRead) isRunNodeWithInputsResp_OutputData() {}

func (*RunNodeWithInputsResp_ContractWrite) isRunNodeWithInputsResp_OutputData() {}

func (*RunNodeWithInputsResp_CustomCode) isRunNodeWithInputsResp_OutputData() {}

func (*RunNodeWithInputsResp_RestApi) isRunNodeWithInputsResp_OutputData() {}

func (*RunNodeWithInputsResp_Branch) isRunNodeWithInputsResp_OutputData() {}

func (*RunNodeWithInputsResp_Filter) isRunNodeWithInputsResp_OutputData() {}

func (*RunNodeWithInputsResp_Loop) isRunNodeWithInputsResp_OutputData() {}

// Request message for RunTrigger
type RunTriggerReq struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	TriggerType   TriggerType                `protobuf:"varint,1,opt,name=trigger_type,json=triggerType,proto3,enum=aggregator.TriggerType" json:"trigger_type,omitempty"`                                                    // Type of trigger to execute using the TriggerType enum
	TriggerConfig map[string]*structpb.Value `protobuf:"bytes,2,rep,name=trigger_config,json=triggerConfig,proto3" json:"trigger_config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Configuration for the trigger
	TriggerInput  map[string]*structpb.Value `protobuf:"bytes,3,rep,name=trigger_input,json=triggerInput,proto3" json:"trigger_input,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`    // Input data for the trigger
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunTriggerReq) Reset() {
	*x = RunTriggerReq{}
	mi := &file_avs_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunTriggerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunTriggerReq) ProtoMessage() {}

func (x *RunTriggerReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunTriggerReq.ProtoReflect.Descriptor instead.
func (*RunTriggerReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{59}
}

func (x *RunTriggerReq) GetTriggerType() TriggerType {
	if x != nil {
		return x.TriggerType
	}
	return TriggerType_TRIGGER_TYPE_UNSPECIFIED
}

func (x *RunTriggerReq) GetTriggerConfig() map[string]*structpb.Value {
	if x != nil {
		return x.TriggerConfig
	}
	return nil
}

func (x *RunTriggerReq) GetTriggerInput() map[string]*structpb.Value {
	if x != nil {
		return x.TriggerInput
	}
	return nil
}

// Response message for RunTrigger
type RunTriggerResp struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Success   bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`                     // Whether the execution was successful
	Error     string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`                          // Error message if execution failed
	TriggerId string                 `protobuf:"bytes,3,opt,name=trigger_id,json=triggerId,proto3" json:"trigger_id,omitempty"` // ID of the executed trigger
	// Use specific output types for triggers
	//
	// Types that are valid to be assigned to OutputData:
	//
	//	*RunTriggerResp_BlockTrigger
	//	*RunTriggerResp_FixedTimeTrigger
	//	*RunTriggerResp_CronTrigger
	//	*RunTriggerResp_EventTrigger
	//	*RunTriggerResp_ManualTrigger
	OutputData    isRunTriggerResp_OutputData `protobuf_oneof:"output_data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunTriggerResp) Reset() {
	*x = RunTriggerResp{}
	mi := &file_avs_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunTriggerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunTriggerResp) ProtoMessage() {}

func (x *RunTriggerResp) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunTriggerResp.ProtoReflect.Descriptor instead.
func (*RunTriggerResp) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{60}
}

func (x *RunTriggerResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RunTriggerResp) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *RunTriggerResp) GetTriggerId() string {
	if x != nil {
		return x.TriggerId
	}
	return ""
}

func (x *RunTriggerResp) GetOutputData() isRunTriggerResp_OutputData {
	if x != nil {
		return x.OutputData
	}
	return nil
}

func (x *RunTriggerResp) GetBlockTrigger() *BlockTrigger_Output {
	if x != nil {
		if x, ok := x.OutputData.(*RunTriggerResp_BlockTrigger); ok {
			return x.BlockTrigger
		}
	}
	return nil
}

func (x *RunTriggerResp) GetFixedTimeTrigger() *FixedTimeTrigger_Output {
	if x != nil {
		if x, ok := x.OutputData.(*RunTriggerResp_FixedTimeTrigger); ok {
			return x.FixedTimeTrigger
		}
	}
	return nil
}

func (x *RunTriggerResp) GetCronTrigger() *CronTrigger_Output {
	if x != nil {
		if x, ok := x.OutputData.(*RunTriggerResp_CronTrigger); ok {
			return x.CronTrigger
		}
	}
	return nil
}

func (x *RunTriggerResp) GetEventTrigger() *EventTrigger_Output {
	if x != nil {
		if x, ok := x.OutputData.(*RunTriggerResp_EventTrigger); ok {
			return x.EventTrigger
		}
	}
	return nil
}

func (x *RunTriggerResp) GetManualTrigger() *ManualTrigger_Output {
	if x != nil {
		if x, ok := x.OutputData.(*RunTriggerResp_ManualTrigger); ok {
			return x.ManualTrigger
		}
	}
	return nil
}

type isRunTriggerResp_OutputData interface {
	isRunTriggerResp_OutputData()
}

type RunTriggerResp_BlockTrigger struct {
	BlockTrigger *BlockTrigger_Output `protobuf:"bytes,10,opt,name=block_trigger,json=blockTrigger,proto3,oneof"`
}

type RunTriggerResp_FixedTimeTrigger struct {
	FixedTimeTrigger *FixedTimeTrigger_Output `protobuf:"bytes,11,opt,name=fixed_time_trigger,json=fixedTimeTrigger,proto3,oneof"`
}

type RunTriggerResp_CronTrigger struct {
	CronTrigger *CronTrigger_Output `protobuf:"bytes,12,opt,name=cron_trigger,json=cronTrigger,proto3,oneof"`
}

type RunTriggerResp_EventTrigger struct {
	EventTrigger *EventTrigger_Output `protobuf:"bytes,13,opt,name=event_trigger,json=eventTrigger,proto3,oneof"`
}

type RunTriggerResp_ManualTrigger struct {
	ManualTrigger *ManualTrigger_Output `protobuf:"bytes,14,opt,name=manual_trigger,json=manualTrigger,proto3,oneof"`
}

func (*RunTriggerResp_BlockTrigger) isRunTriggerResp_OutputData() {}

func (*RunTriggerResp_FixedTimeTrigger) isRunTriggerResp_OutputData() {}

func (*RunTriggerResp_CronTrigger) isRunTriggerResp_OutputData() {}

func (*RunTriggerResp_EventTrigger) isRunTriggerResp_OutputData() {}

func (*RunTriggerResp_ManualTrigger) isRunTriggerResp_OutputData() {}

type Evm struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Evm) Reset() {
	*x = Evm{}
	mi := &file_avs_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Evm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Evm) ProtoMessage() {}

func (x *Evm) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Evm.ProtoReflect.Descriptor instead.
func (*Evm) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{61}
}

// Request message for SimulateTask
type SimulateTaskReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Complete task definition for simulation (no need to save to storage first)
	Trigger        *TaskTrigger               `protobuf:"bytes,1,opt,name=trigger,proto3" json:"trigger,omitempty"`                                                                                                               // The trigger configuration
	Nodes          []*TaskNode                `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`                                                                                                                   // All workflow nodes
	Edges          []*TaskEdge                `protobuf:"bytes,3,rep,name=edges,proto3" json:"edges,omitempty"`                                                                                                                   // All edges connecting the nodes
	InputVariables map[string]*structpb.Value `protobuf:"bytes,6,rep,name=input_variables,json=inputVariables,proto3" json:"input_variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Input variables for the simulation
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SimulateTaskReq) Reset() {
	*x = SimulateTaskReq{}
	mi := &file_avs_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimulateTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimulateTaskReq) ProtoMessage() {}

func (x *SimulateTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimulateTaskReq.ProtoReflect.Descriptor instead.
func (*SimulateTaskReq) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{62}
}

func (x *SimulateTaskReq) GetTrigger() *TaskTrigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

func (x *SimulateTaskReq) GetNodes() []*TaskNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *SimulateTaskReq) GetEdges() []*TaskEdge {
	if x != nil {
		return x.Edges
	}
	return nil
}

func (x *SimulateTaskReq) GetInputVariables() map[string]*structpb.Value {
	if x != nil {
		return x.InputVariables
	}
	return nil
}

// EventCondition represents a condition to evaluate on decoded event data
type EventCondition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FieldName     string                 `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"` // Event field name (e.g., "answer", "roundId")
	Operator      string                 `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`                    // Comparison operator: "gt", "gte", "lt", "lte", "eq", "ne"
	Value         string                 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`                          // Value to compare against (as string, parsed based on type)
	FieldType     string                 `protobuf:"bytes,4,opt,name=field_type,json=fieldType,proto3" json:"field_type,omitempty"` // Field type: "uint256", "int256", "address", "bool", "bytes32", etc.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventCondition) Reset() {
	*x = EventCondition{}
	mi := &file_avs_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventCondition) ProtoMessage() {}

func (x *EventCondition) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventCondition.ProtoReflect.Descriptor instead.
func (*EventCondition) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{63}
}

func (x *EventCondition) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *EventCondition) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *EventCondition) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *EventCondition) GetFieldType() string {
	if x != nil {
		return x.FieldType
	}
	return ""
}

type FixedTimeTrigger_Config struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Epochs        []int64                `protobuf:"varint,1,rep,packed,name=epochs,proto3" json:"epochs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FixedTimeTrigger_Config) Reset() {
	*x = FixedTimeTrigger_Config{}
	mi := &file_avs_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FixedTimeTrigger_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixedTimeTrigger_Config) ProtoMessage() {}

func (x *FixedTimeTrigger_Config) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixedTimeTrigger_Config.ProtoReflect.Descriptor instead.
func (*FixedTimeTrigger_Config) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{4, 0}
}

func (x *FixedTimeTrigger_Config) GetEpochs() []int64 {
	if x != nil {
		return x.Epochs
	}
	return nil
}

type FixedTimeTrigger_Output struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     uint64                 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                          // Timestamp in milliseconds
	TimestampIso  string                 `protobuf:"bytes,2,opt,name=timestamp_iso,json=timestampIso,proto3" json:"timestamp_iso,omitempty"` // ISO representation of timestamp in UTC (e.g., "2025-05-31T10:30:00.000Z")
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FixedTimeTrigger_Output) Reset() {
	*x = FixedTimeTrigger_Output{}
	mi := &file_avs_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FixedTimeTrigger_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixedTimeTrigger_Output) ProtoMessage() {}

func (x *FixedTimeTrigger_Output) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixedTimeTrigger_Output.ProtoReflect.Descriptor instead.
func (*FixedTimeTrigger_Output) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{4, 1}
}

func (x *FixedTimeTrigger_Output) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *FixedTimeTrigger_Output) GetTimestampIso() string {
	if x != nil {
		return x.TimestampIso
	}
	return ""
}

type CronTrigger_Config struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Schedules     []string               `protobuf:"bytes,1,rep,name=schedules,proto3" json:"schedules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CronTrigger_Config) Reset() {
	*x = CronTrigger_Config{}
	mi := &file_avs_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CronTrigger_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronTrigger_Config) ProtoMessage() {}

func (x *CronTrigger_Config) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronTrigger_Config.ProtoReflect.Descriptor instead.
func (*CronTrigger_Config) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{5, 0}
}

func (x *CronTrigger_Config) GetSchedules() []string {
	if x != nil {
		return x.Schedules
	}
	return nil
}

type CronTrigger_Output struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     uint64                 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                          // Timestamp in milliseconds
	TimestampIso  string                 `protobuf:"bytes,2,opt,name=timestamp_iso,json=timestampIso,proto3" json:"timestamp_iso,omitempty"` // ISO representation of timestamp in UTC (e.g., "2025-05-31T10:30:00.000Z")
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CronTrigger_Output) Reset() {
	*x = CronTrigger_Output{}
	mi := &file_avs_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CronTrigger_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronTrigger_Output) ProtoMessage() {}

func (x *CronTrigger_Output) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronTrigger_Output.ProtoReflect.Descriptor instead.
func (*CronTrigger_Output) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{5, 1}
}

func (x *CronTrigger_Output) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *CronTrigger_Output) GetTimestampIso() string {
	if x != nil {
		return x.TimestampIso
	}
	return ""
}

type BlockTrigger_Config struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Interval      int64                  `protobuf:"varint,1,opt,name=interval,proto3" json:"interval,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockTrigger_Config) Reset() {
	*x = BlockTrigger_Config{}
	mi := &file_avs_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockTrigger_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockTrigger_Config) ProtoMessage() {}

func (x *BlockTrigger_Config) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockTrigger_Config.ProtoReflect.Descriptor instead.
func (*BlockTrigger_Config) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{6, 0}
}

func (x *BlockTrigger_Config) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

type BlockTrigger_Output struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockNumber   uint64                 `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	BlockHash     string                 `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Timestamp     uint64                 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ParentHash    string                 `protobuf:"bytes,4,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	Difficulty    string                 `protobuf:"bytes,5,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	GasLimit      uint64                 `protobuf:"varint,6,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	GasUsed       uint64                 `protobuf:"varint,7,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockTrigger_Output) Reset() {
	*x = BlockTrigger_Output{}
	mi := &file_avs_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockTrigger_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockTrigger_Output) ProtoMessage() {}

func (x *BlockTrigger_Output) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockTrigger_Output.ProtoReflect.Descriptor instead.
func (*BlockTrigger_Output) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{6, 1}
}

func (x *BlockTrigger_Output) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *BlockTrigger_Output) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *BlockTrigger_Output) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *BlockTrigger_Output) GetParentHash() string {
	if x != nil {
		return x.ParentHash
	}
	return ""
}

func (x *BlockTrigger_Output) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *BlockTrigger_Output) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *BlockTrigger_Output) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

// Query represents a single ethereum.FilterQuery for RPC filtering
type EventTrigger_Query struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Contract addresses to filter events from. Empty means any contract.
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// Topic filters structured as a 2D array matching ethereum.FilterQuery.Topics
	// Each inner array represents a topic position (topic[0], topic[1], topic[2], etc.)
	// Each string in the inner array represents a valid value for that topic position
	// Empty inner array means "any value" for that topic position
	//
	// Example for Transfer events FROM or TO a specific address:
	// [
	//
	//	["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"], // Transfer signature
	//	["0x000000000000000000000000fE66125343Aabda4A330DA667431eC1Acb7BbDA9"], // FROM address
	//	[]  // Any TO address
	//
	// ]
	Topics []*EventTrigger_Topics `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`
	// Maximum number of events this query should process per block/time window
	// Used for safety - if exceeded, operator notifies aggregator to cancel task
	MaxEventsPerBlock *uint32 `protobuf:"varint,3,opt,name=max_events_per_block,json=maxEventsPerBlock,proto3,oneof" json:"max_events_per_block,omitempty"`
	// Contract ABI JSON string for decoding event data (client-provided)
	ContractAbi string `protobuf:"bytes,4,opt,name=contract_abi,json=contractAbi,proto3" json:"contract_abi,omitempty"`
	// Event conditions to evaluate on decoded event data
	Conditions    []*EventCondition `protobuf:"bytes,5,rep,name=conditions,proto3" json:"conditions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventTrigger_Query) Reset() {
	*x = EventTrigger_Query{}
	mi := &file_avs_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventTrigger_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTrigger_Query) ProtoMessage() {}

func (x *EventTrigger_Query) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTrigger_Query.ProtoReflect.Descriptor instead.
func (*EventTrigger_Query) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{7, 0}
}

func (x *EventTrigger_Query) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *EventTrigger_Query) GetTopics() []*EventTrigger_Topics {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *EventTrigger_Query) GetMaxEventsPerBlock() uint32 {
	if x != nil && x.MaxEventsPerBlock != nil {
		return *x.MaxEventsPerBlock
	}
	return 0
}

func (x *EventTrigger_Query) GetContractAbi() string {
	if x != nil {
		return x.ContractAbi
	}
	return ""
}

func (x *EventTrigger_Query) GetConditions() []*EventCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

// Topics represents a single topic position filter (e.g., topic[0], topic[1], etc.)
type EventTrigger_Topics struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []string               `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"` // Valid values for this topic position
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventTrigger_Topics) Reset() {
	*x = EventTrigger_Topics{}
	mi := &file_avs_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventTrigger_Topics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTrigger_Topics) ProtoMessage() {}

func (x *EventTrigger_Topics) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTrigger_Topics.ProtoReflect.Descriptor instead.
func (*EventTrigger_Topics) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{7, 1}
}

func (x *EventTrigger_Topics) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type EventTrigger_Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Array of RPC filter queries. Each query creates a separate subscription.
	// For FROM-OR-TO scenarios, provide two queries: one for FROM, one for TO.
	Queries       []*EventTrigger_Query `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventTrigger_Config) Reset() {
	*x = EventTrigger_Config{}
	mi := &file_avs_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventTrigger_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTrigger_Config) ProtoMessage() {}

func (x *EventTrigger_Config) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTrigger_Config.ProtoReflect.Descriptor instead.
func (*EventTrigger_Config) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{7, 2}
}

func (x *EventTrigger_Config) GetQueries() []*EventTrigger_Query {
	if x != nil {
		return x.Queries
	}
	return nil
}

type EventTrigger_Output struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Use oneof to ensure exactly one field is set
	//
	// Types that are valid to be assigned to OutputType:
	//
	//	*EventTrigger_Output_EvmLog
	//	*EventTrigger_Output_TransferLog
	OutputType    isEventTrigger_Output_OutputType `protobuf_oneof:"output_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventTrigger_Output) Reset() {
	*x = EventTrigger_Output{}
	mi := &file_avs_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventTrigger_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTrigger_Output) ProtoMessage() {}

func (x *EventTrigger_Output) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTrigger_Output.ProtoReflect.Descriptor instead.
func (*EventTrigger_Output) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{7, 3}
}

func (x *EventTrigger_Output) GetOutputType() isEventTrigger_Output_OutputType {
	if x != nil {
		return x.OutputType
	}
	return nil
}

func (x *EventTrigger_Output) GetEvmLog() *Evm_Log {
	if x != nil {
		if x, ok := x.OutputType.(*EventTrigger_Output_EvmLog); ok {
			return x.EvmLog
		}
	}
	return nil
}

func (x *EventTrigger_Output) GetTransferLog() *EventTrigger_TransferLogOutput {
	if x != nil {
		if x, ok := x.OutputType.(*EventTrigger_Output_TransferLog); ok {
			return x.TransferLog
		}
	}
	return nil
}

type isEventTrigger_Output_OutputType interface {
	isEventTrigger_Output_OutputType()
}

type EventTrigger_Output_EvmLog struct {
	// When the trigger is not a transfer event, we will have a raw event output only
	// These shape of data is https://docs.ethers.org/v6/api/providers/#Log
	EvmLog *Evm_Log `protobuf:"bytes,1,opt,name=evm_log,json=evmLog,proto3,oneof"`
}

type EventTrigger_Output_TransferLog struct {
	// For transfer events specifically, we have enriched data
	TransferLog *EventTrigger_TransferLogOutput `protobuf:"bytes,2,opt,name=transfer_log,json=transferLog,proto3,oneof"`
}

func (*EventTrigger_Output_EvmLog) isEventTrigger_Output_OutputType() {}

func (*EventTrigger_Output_TransferLog) isEventTrigger_Output_OutputType() {}

type EventTrigger_TransferLogOutput struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TokenName       string                 `protobuf:"bytes,1,opt,name=token_name,json=tokenName,proto3" json:"token_name,omitempty"`
	TokenSymbol     string                 `protobuf:"bytes,2,opt,name=token_symbol,json=tokenSymbol,proto3" json:"token_symbol,omitempty"`
	TokenDecimals   uint32                 `protobuf:"varint,3,opt,name=token_decimals,json=tokenDecimals,proto3" json:"token_decimals,omitempty"`
	TransactionHash string                 `protobuf:"bytes,4,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	Address         string                 `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	BlockNumber     uint64                 `protobuf:"varint,6,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	// timestamp of the block (in milliseconds)
	BlockTimestamp   uint64 `protobuf:"varint,7,opt,name=block_timestamp,json=blockTimestamp,proto3" json:"block_timestamp,omitempty"`
	FromAddress      string `protobuf:"bytes,8,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	ToAddress        string `protobuf:"bytes,9,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	Value            string `protobuf:"bytes,10,opt,name=value,proto3" json:"value,omitempty"`
	ValueFormatted   string `protobuf:"bytes,11,opt,name=value_formatted,json=valueFormatted,proto3" json:"value_formatted,omitempty"`
	TransactionIndex uint32 `protobuf:"varint,12,opt,name=transaction_index,json=transactionIndex,proto3" json:"transaction_index,omitempty"`
	LogIndex         uint32 `protobuf:"varint,13,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *EventTrigger_TransferLogOutput) Reset() {
	*x = EventTrigger_TransferLogOutput{}
	mi := &file_avs_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventTrigger_TransferLogOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTrigger_TransferLogOutput) ProtoMessage() {}

func (x *EventTrigger_TransferLogOutput) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTrigger_TransferLogOutput.ProtoReflect.Descriptor instead.
func (*EventTrigger_TransferLogOutput) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{7, 4}
}

func (x *EventTrigger_TransferLogOutput) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

func (x *EventTrigger_TransferLogOutput) GetTokenSymbol() string {
	if x != nil {
		return x.TokenSymbol
	}
	return ""
}

func (x *EventTrigger_TransferLogOutput) GetTokenDecimals() uint32 {
	if x != nil {
		return x.TokenDecimals
	}
	return 0
}

func (x *EventTrigger_TransferLogOutput) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *EventTrigger_TransferLogOutput) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *EventTrigger_TransferLogOutput) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *EventTrigger_TransferLogOutput) GetBlockTimestamp() uint64 {
	if x != nil {
		return x.BlockTimestamp
	}
	return 0
}

func (x *EventTrigger_TransferLogOutput) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *EventTrigger_TransferLogOutput) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *EventTrigger_TransferLogOutput) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *EventTrigger_TransferLogOutput) GetValueFormatted() string {
	if x != nil {
		return x.ValueFormatted
	}
	return ""
}

func (x *EventTrigger_TransferLogOutput) GetTransactionIndex() uint32 {
	if x != nil {
		return x.TransactionIndex
	}
	return 0
}

func (x *EventTrigger_TransferLogOutput) GetLogIndex() uint32 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

type ManualTrigger_Config struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ManualTrigger_Config) Reset() {
	*x = ManualTrigger_Config{}
	mi := &file_avs_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManualTrigger_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualTrigger_Config) ProtoMessage() {}

func (x *ManualTrigger_Config) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualTrigger_Config.ProtoReflect.Descriptor instead.
func (*ManualTrigger_Config) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{8, 0}
}

type ManualTrigger_Output struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Manual triggers typically don't return data
	// but we keep this for consistency and future extensibility
	RunAt         uint64 `protobuf:"varint,1,opt,name=run_at,json=runAt,proto3" json:"run_at,omitempty"` // Timestamp when manually run
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ManualTrigger_Output) Reset() {
	*x = ManualTrigger_Output{}
	mi := &file_avs_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManualTrigger_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualTrigger_Output) ProtoMessage() {}

func (x *ManualTrigger_Output) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualTrigger_Output.ProtoReflect.Descriptor instead.
func (*ManualTrigger_Output) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{8, 1}
}

func (x *ManualTrigger_Output) GetRunAt() uint64 {
	if x != nil {
		return x.RunAt
	}
	return 0
}

type ETHTransferNode_Config struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Destination   string                 `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	Amount        string                 `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ETHTransferNode_Config) Reset() {
	*x = ETHTransferNode_Config{}
	mi := &file_avs_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ETHTransferNode_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ETHTransferNode_Config) ProtoMessage() {}

func (x *ETHTransferNode_Config) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ETHTransferNode_Config.ProtoReflect.Descriptor instead.
func (*ETHTransferNode_Config) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{10, 0}
}

func (x *ETHTransferNode_Config) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *ETHTransferNode_Config) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type ETHTransferNode_Output struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TransactionHash string                 `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ETHTransferNode_Output) Reset() {
	*x = ETHTransferNode_Output{}
	mi := &file_avs_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ETHTransferNode_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ETHTransferNode_Output) ProtoMessage() {}

func (x *ETHTransferNode_Output) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ETHTransferNode_Output.ProtoReflect.Descriptor instead.
func (*ETHTransferNode_Output) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{10, 1}
}

func (x *ETHTransferNode_Output) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

type ContractWriteNode_Config struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ContractAddress string                 `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	CallData        string                 `protobuf:"bytes,2,opt,name=call_data,json=callData,proto3" json:"call_data,omitempty"`
	// The ABI is required to decode events and return values for enhanced response structure
	ContractAbi string `protobuf:"bytes,3,opt,name=contract_abi,json=contractAbi,proto3" json:"contract_abi,omitempty"`
	// Support for multiple method calls in sequence (similar to ContractRead)
	MethodCalls   []*ContractWriteNode_MethodCall `protobuf:"bytes,4,rep,name=method_calls,json=methodCalls,proto3" json:"method_calls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractWriteNode_Config) Reset() {
	*x = ContractWriteNode_Config{}
	mi := &file_avs_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractWriteNode_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractWriteNode_Config) ProtoMessage() {}

func (x *ContractWriteNode_Config) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractWriteNode_Config.ProtoReflect.Descriptor instead.
func (*ContractWriteNode_Config) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{11, 0}
}

func (x *ContractWriteNode_Config) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *ContractWriteNode_Config) GetCallData() string {
	if x != nil {
		return x.CallData
	}
	return ""
}

func (x *ContractWriteNode_Config) GetContractAbi() string {
	if x != nil {
		return x.ContractAbi
	}
	return ""
}

func (x *ContractWriteNode_Config) GetMethodCalls() []*ContractWriteNode_MethodCall {
	if x != nil {
		return x.MethodCalls
	}
	return nil
}

type ContractWriteNode_MethodCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CallData      string                 `protobuf:"bytes,1,opt,name=call_data,json=callData,proto3" json:"call_data,omitempty"`       // Hex-encoded calldata for the method
	MethodName    string                 `protobuf:"bytes,2,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"` // Method name for clarity and response mapping
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractWriteNode_MethodCall) Reset() {
	*x = ContractWriteNode_MethodCall{}
	mi := &file_avs_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractWriteNode_MethodCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractWriteNode_MethodCall) ProtoMessage() {}

func (x *ContractWriteNode_MethodCall) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractWriteNode_MethodCall.ProtoReflect.Descriptor instead.
func (*ContractWriteNode_MethodCall) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{11, 1}
}

func (x *ContractWriteNode_MethodCall) GetCallData() string {
	if x != nil {
		return x.CallData
	}
	return ""
}

func (x *ContractWriteNode_MethodCall) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

type ContractWriteNode_Output struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Enhanced response structure matching Write_Contract_Spec.md
	Results       []*ContractWriteNode_MethodResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractWriteNode_Output) Reset() {
	*x = ContractWriteNode_Output{}
	mi := &file_avs_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractWriteNode_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractWriteNode_Output) ProtoMessage() {}

func (x *ContractWriteNode_Output) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractWriteNode_Output.ProtoReflect.Descriptor instead.
func (*ContractWriteNode_Output) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{11, 2}
}

func (x *ContractWriteNode_Output) GetResults() []*ContractWriteNode_MethodResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type ContractWriteNode_MethodResult struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	MethodName    string                             `protobuf:"bytes,1,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"` // The name of the method called
	Success       bool                               `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`                        // Whether this specific method call succeeded
	Transaction   *ContractWriteNode_TransactionData `protobuf:"bytes,3,opt,name=transaction,proto3" json:"transaction,omitempty"`                 // Transaction details
	Events        []*ContractWriteNode_EventData     `protobuf:"bytes,4,rep,name=events,proto3" json:"events,omitempty"`                           // Decoded events emitted
	Error         *ContractWriteNode_ErrorData       `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`                             // Error details if failed
	ReturnData    *ContractWriteNode_ReturnData      `protobuf:"bytes,6,opt,name=return_data,json=returnData,proto3" json:"return_data,omitempty"` // Decoded return value
	InputData     string                             `protobuf:"bytes,7,opt,name=input_data,json=inputData,proto3" json:"input_data,omitempty"`    // Raw input calldata for debugging
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractWriteNode_MethodResult) Reset() {
	*x = ContractWriteNode_MethodResult{}
	mi := &file_avs_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractWriteNode_MethodResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractWriteNode_MethodResult) ProtoMessage() {}

func (x *ContractWriteNode_MethodResult) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractWriteNode_MethodResult.ProtoReflect.Descriptor instead.
func (*ContractWriteNode_MethodResult) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{11, 3}
}

func (x *ContractWriteNode_MethodResult) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

func (x *ContractWriteNode_MethodResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ContractWriteNode_MethodResult) GetTransaction() *ContractWriteNode_TransactionData {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *ContractWriteNode_MethodResult) GetEvents() []*ContractWriteNode_EventData {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *ContractWriteNode_MethodResult) GetError() *ContractWriteNode_ErrorData {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ContractWriteNode_MethodResult) GetReturnData() *ContractWriteNode_ReturnData {
	if x != nil {
		return x.ReturnData
	}
	return nil
}

func (x *ContractWriteNode_MethodResult) GetInputData() string {
	if x != nil {
		return x.InputData
	}
	return ""
}

type ContractWriteNode_TransactionData struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Hash              string                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`                                                      // Transaction hash
	Status            string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`                                                  // "pending", "confirmed", "failed"
	BlockNumber       string                 `protobuf:"bytes,3,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`                     // Block number when mined (null for pending)
	BlockHash         string                 `protobuf:"bytes,4,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`                           // Block hash when mined
	GasUsed           string                 `protobuf:"bytes,5,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`                                 // Actual gas consumed (null for pending)
	GasLimit          string                 `protobuf:"bytes,6,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`                              // Gas limit set
	GasPrice          string                 `protobuf:"bytes,7,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`                              // Gas price paid
	EffectiveGasPrice string                 `protobuf:"bytes,8,opt,name=effective_gas_price,json=effectiveGasPrice,proto3" json:"effective_gas_price,omitempty"` // Effective gas price (EIP-1559)
	From              string                 `protobuf:"bytes,9,opt,name=from,proto3" json:"from,omitempty"`                                                      // Sender address (smart wallet)
	To                string                 `protobuf:"bytes,10,opt,name=to,proto3" json:"to,omitempty"`                                                         // Target contract address
	Value             string                 `protobuf:"bytes,11,opt,name=value,proto3" json:"value,omitempty"`                                                   // ETH value sent (usually "0" for contract calls)
	Nonce             string                 `protobuf:"bytes,12,opt,name=nonce,proto3" json:"nonce,omitempty"`                                                   // Transaction nonce
	TransactionIndex  string                 `protobuf:"bytes,13,opt,name=transaction_index,json=transactionIndex,proto3" json:"transaction_index,omitempty"`     // Index in block (null for pending)
	Confirmations     string                 `protobuf:"bytes,14,opt,name=confirmations,proto3" json:"confirmations,omitempty"`                                   // Number of confirmations
	Timestamp         int64                  `protobuf:"varint,15,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                          // Transaction timestamp
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ContractWriteNode_TransactionData) Reset() {
	*x = ContractWriteNode_TransactionData{}
	mi := &file_avs_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractWriteNode_TransactionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractWriteNode_TransactionData) ProtoMessage() {}

func (x *ContractWriteNode_TransactionData) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractWriteNode_TransactionData.ProtoReflect.Descriptor instead.
func (*ContractWriteNode_TransactionData) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{11, 4}
}

func (x *ContractWriteNode_TransactionData) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *ContractWriteNode_TransactionData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ContractWriteNode_TransactionData) GetBlockNumber() string {
	if x != nil {
		return x.BlockNumber
	}
	return ""
}

func (x *ContractWriteNode_TransactionData) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *ContractWriteNode_TransactionData) GetGasUsed() string {
	if x != nil {
		return x.GasUsed
	}
	return ""
}

func (x *ContractWriteNode_TransactionData) GetGasLimit() string {
	if x != nil {
		return x.GasLimit
	}
	return ""
}

func (x *ContractWriteNode_TransactionData) GetGasPrice() string {
	if x != nil {
		return x.GasPrice
	}
	return ""
}

func (x *ContractWriteNode_TransactionData) GetEffectiveGasPrice() string {
	if x != nil {
		return x.EffectiveGasPrice
	}
	return ""
}

func (x *ContractWriteNode_TransactionData) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *ContractWriteNode_TransactionData) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *ContractWriteNode_TransactionData) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ContractWriteNode_TransactionData) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *ContractWriteNode_TransactionData) GetTransactionIndex() string {
	if x != nil {
		return x.TransactionIndex
	}
	return ""
}

func (x *ContractWriteNode_TransactionData) GetConfirmations() string {
	if x != nil {
		return x.Confirmations
	}
	return ""
}

func (x *ContractWriteNode_TransactionData) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type ContractWriteNode_EventData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventName     string                 `protobuf:"bytes,1,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`                                                      // Decoded event name (e.g. "Transfer")
	Address       string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`                                                                           // Contract address that emitted the event
	Topics        []string               `protobuf:"bytes,3,rep,name=topics,proto3" json:"topics,omitempty"`                                                                             // Raw topics array
	Data          string                 `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`                                                                                 // Raw data field
	Decoded       map[string]string      `protobuf:"bytes,5,rep,name=decoded,proto3" json:"decoded,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Decoded event parameters with names
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractWriteNode_EventData) Reset() {
	*x = ContractWriteNode_EventData{}
	mi := &file_avs_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractWriteNode_EventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractWriteNode_EventData) ProtoMessage() {}

func (x *ContractWriteNode_EventData) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractWriteNode_EventData.ProtoReflect.Descriptor instead.
func (*ContractWriteNode_EventData) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{11, 5}
}

func (x *ContractWriteNode_EventData) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *ContractWriteNode_EventData) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ContractWriteNode_EventData) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *ContractWriteNode_EventData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *ContractWriteNode_EventData) GetDecoded() map[string]string {
	if x != nil {
		return x.Decoded
	}
	return nil
}

type ContractWriteNode_ErrorData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`                                     // Error classification: "EXECUTION_REVERTED", "OUT_OF_GAS", etc.
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                               // Human-readable error message
	RevertReason  string                 `protobuf:"bytes,3,opt,name=revert_reason,json=revertReason,proto3" json:"revert_reason,omitempty"` // Encoded revert message from contract
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractWriteNode_ErrorData) Reset() {
	*x = ContractWriteNode_ErrorData{}
	mi := &file_avs_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractWriteNode_ErrorData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractWriteNode_ErrorData) ProtoMessage() {}

func (x *ContractWriteNode_ErrorData) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractWriteNode_ErrorData.ProtoReflect.Descriptor instead.
func (*ContractWriteNode_ErrorData) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{11, 6}
}

func (x *ContractWriteNode_ErrorData) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ContractWriteNode_ErrorData) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ContractWriteNode_ErrorData) GetRevertReason() string {
	if x != nil {
		return x.RevertReason
	}
	return ""
}

type ContractWriteNode_ReturnData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`   // Return value name from ABI (may be empty)
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`   // Solidity type (e.g. "bool", "uint256")
	Value         string                 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"` // The actual return value as string
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractWriteNode_ReturnData) Reset() {
	*x = ContractWriteNode_ReturnData{}
	mi := &file_avs_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractWriteNode_ReturnData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractWriteNode_ReturnData) ProtoMessage() {}

func (x *ContractWriteNode_ReturnData) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractWriteNode_ReturnData.ProtoReflect.Descriptor instead.
func (*ContractWriteNode_ReturnData) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{11, 7}
}

func (x *ContractWriteNode_ReturnData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContractWriteNode_ReturnData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ContractWriteNode_ReturnData) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ContractReadNode_MethodCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CallData      string                 `protobuf:"bytes,1,opt,name=call_data,json=callData,proto3" json:"call_data,omitempty"`       // Hex-encoded calldata for the method
	MethodName    string                 `protobuf:"bytes,2,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"` // Optional: method name for clarity (e.g. "latestRoundData")
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractReadNode_MethodCall) Reset() {
	*x = ContractReadNode_MethodCall{}
	mi := &file_avs_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractReadNode_MethodCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractReadNode_MethodCall) ProtoMessage() {}

func (x *ContractReadNode_MethodCall) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractReadNode_MethodCall.ProtoReflect.Descriptor instead.
func (*ContractReadNode_MethodCall) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{12, 0}
}

func (x *ContractReadNode_MethodCall) GetCallData() string {
	if x != nil {
		return x.CallData
	}
	return ""
}

func (x *ContractReadNode_MethodCall) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

type ContractReadNode_Config struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ContractAddress string                 `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	// The ABI is required to decode the return values
	ContractAbi string `protobuf:"bytes,2,opt,name=contract_abi,json=contractAbi,proto3" json:"contract_abi,omitempty"`
	// Array of method calls to execute serially
	MethodCalls   []*ContractReadNode_MethodCall `protobuf:"bytes,3,rep,name=method_calls,json=methodCalls,proto3" json:"method_calls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractReadNode_Config) Reset() {
	*x = ContractReadNode_Config{}
	mi := &file_avs_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractReadNode_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractReadNode_Config) ProtoMessage() {}

func (x *ContractReadNode_Config) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractReadNode_Config.ProtoReflect.Descriptor instead.
func (*ContractReadNode_Config) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{12, 1}
}

func (x *ContractReadNode_Config) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *ContractReadNode_Config) GetContractAbi() string {
	if x != nil {
		return x.ContractAbi
	}
	return ""
}

func (x *ContractReadNode_Config) GetMethodCalls() []*ContractReadNode_MethodCall {
	if x != nil {
		return x.MethodCalls
	}
	return nil
}

type ContractReadNode_MethodResult struct {
	state protoimpl.MessageState                           `protogen:"open.v1"`
	Data  []*ContractReadNode_MethodResult_StructuredField `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	// Method metadata
	MethodName    string `protobuf:"bytes,2,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"` // The name of the method called
	Success       bool   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`                        // Whether this specific method call succeeded
	Error         string `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`                             // Error message if the method call failed
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractReadNode_MethodResult) Reset() {
	*x = ContractReadNode_MethodResult{}
	mi := &file_avs_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractReadNode_MethodResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractReadNode_MethodResult) ProtoMessage() {}

func (x *ContractReadNode_MethodResult) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractReadNode_MethodResult.ProtoReflect.Descriptor instead.
func (*ContractReadNode_MethodResult) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{12, 2}
}

func (x *ContractReadNode_MethodResult) GetData() []*ContractReadNode_MethodResult_StructuredField {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ContractReadNode_MethodResult) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

func (x *ContractReadNode_MethodResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ContractReadNode_MethodResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ContractReadNode_Output struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Results for each method call, in the same order as the input method_calls
	Results       []*ContractReadNode_MethodResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractReadNode_Output) Reset() {
	*x = ContractReadNode_Output{}
	mi := &file_avs_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractReadNode_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractReadNode_Output) ProtoMessage() {}

func (x *ContractReadNode_Output) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractReadNode_Output.ProtoReflect.Descriptor instead.
func (*ContractReadNode_Output) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{12, 3}
}

func (x *ContractReadNode_Output) GetResults() []*ContractReadNode_MethodResult {
	if x != nil {
		return x.Results
	}
	return nil
}

// Structured data with named fields based on method signature
type ContractReadNode_MethodResult_StructuredField struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`   // Field name from ABI (e.g. "roundId", "answer", "startedAt")
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`   // Solidity type (e.g. "uint80", "int256", "uint256")
	Value         string                 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"` // The actual value as string, client parses based on type
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractReadNode_MethodResult_StructuredField) Reset() {
	*x = ContractReadNode_MethodResult_StructuredField{}
	mi := &file_avs_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractReadNode_MethodResult_StructuredField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractReadNode_MethodResult_StructuredField) ProtoMessage() {}

func (x *ContractReadNode_MethodResult_StructuredField) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractReadNode_MethodResult_StructuredField.ProtoReflect.Descriptor instead.
func (*ContractReadNode_MethodResult_StructuredField) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{12, 2, 0}
}

func (x *ContractReadNode_MethodResult_StructuredField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContractReadNode_MethodResult_StructuredField) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ContractReadNode_MethodResult_StructuredField) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type GraphQLQueryNode_Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Static configuration set at node creation time
	Url           string            `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Query         string            `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	Variables     map[string]string `protobuf:"bytes,3,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GraphQLQueryNode_Config) Reset() {
	*x = GraphQLQueryNode_Config{}
	mi := &file_avs_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GraphQLQueryNode_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLQueryNode_Config) ProtoMessage() {}

func (x *GraphQLQueryNode_Config) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLQueryNode_Config.ProtoReflect.Descriptor instead.
func (*GraphQLQueryNode_Config) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{13, 0}
}

func (x *GraphQLQueryNode_Config) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GraphQLQueryNode_Config) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *GraphQLQueryNode_Config) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

type GraphQLQueryNode_Output struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The data is the result of the graphql query. Becuase this is GraphQL, the data is a json object
	// The field of the json object is unknow, its depend on the query
	Data          *anypb.Any `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GraphQLQueryNode_Output) Reset() {
	*x = GraphQLQueryNode_Output{}
	mi := &file_avs_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GraphQLQueryNode_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLQueryNode_Output) ProtoMessage() {}

func (x *GraphQLQueryNode_Output) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLQueryNode_Output.ProtoReflect.Descriptor instead.
func (*GraphQLQueryNode_Output) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{13, 1}
}

func (x *GraphQLQueryNode_Output) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

type RestAPINode_Config struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Headers       map[string]string      `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Body          string                 `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	Method        string                 `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RestAPINode_Config) Reset() {
	*x = RestAPINode_Config{}
	mi := &file_avs_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestAPINode_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestAPINode_Config) ProtoMessage() {}

func (x *RestAPINode_Config) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestAPINode_Config.ProtoReflect.Descriptor instead.
func (*RestAPINode_Config) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{14, 0}
}

func (x *RestAPINode_Config) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *RestAPINode_Config) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *RestAPINode_Config) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *RestAPINode_Config) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

type RestAPINode_Output struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Changed from google.protobuf.Any to google.protobuf.Value for better JavaScript native type support
	Data          *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RestAPINode_Output) Reset() {
	*x = RestAPINode_Output{}
	mi := &file_avs_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestAPINode_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestAPINode_Output) ProtoMessage() {}

func (x *RestAPINode_Output) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestAPINode_Output.ProtoReflect.Descriptor instead.
func (*RestAPINode_Output) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{14, 1}
}

func (x *RestAPINode_Output) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type CustomCodeNode_Config struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lang          Lang                   `protobuf:"varint,1,opt,name=lang,proto3,enum=aggregator.Lang" json:"lang,omitempty"` // Language is static config set at creation time
	Source        string                 `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`                   // Source code can be provided as input variable
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomCodeNode_Config) Reset() {
	*x = CustomCodeNode_Config{}
	mi := &file_avs_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomCodeNode_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomCodeNode_Config) ProtoMessage() {}

func (x *CustomCodeNode_Config) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomCodeNode_Config.ProtoReflect.Descriptor instead.
func (*CustomCodeNode_Config) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{15, 0}
}

func (x *CustomCodeNode_Config) GetLang() Lang {
	if x != nil {
		return x.Lang
	}
	return Lang_JavaScript
}

func (x *CustomCodeNode_Config) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type CustomCodeNode_Output struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Changed from google.protobuf.Any to google.protobuf.Value for better JavaScript native type support
	Data          *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomCodeNode_Output) Reset() {
	*x = CustomCodeNode_Output{}
	mi := &file_avs_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomCodeNode_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomCodeNode_Output) ProtoMessage() {}

func (x *CustomCodeNode_Output) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomCodeNode_Output.ProtoReflect.Descriptor instead.
func (*CustomCodeNode_Output) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{15, 1}
}

func (x *CustomCodeNode_Output) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type BranchNode_Condition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Expression    string                 `protobuf:"bytes,3,opt,name=expression,proto3" json:"expression,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BranchNode_Condition) Reset() {
	*x = BranchNode_Condition{}
	mi := &file_avs_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BranchNode_Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchNode_Condition) ProtoMessage() {}

func (x *BranchNode_Condition) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchNode_Condition.ProtoReflect.Descriptor instead.
func (*BranchNode_Condition) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{16, 0}
}

func (x *BranchNode_Condition) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BranchNode_Condition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BranchNode_Condition) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

type BranchNode_Config struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Conditions    []*BranchNode_Condition `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BranchNode_Config) Reset() {
	*x = BranchNode_Config{}
	mi := &file_avs_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BranchNode_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchNode_Config) ProtoMessage() {}

func (x *BranchNode_Config) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchNode_Config.ProtoReflect.Descriptor instead.
func (*BranchNode_Config) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{16, 1}
}

func (x *BranchNode_Config) GetConditions() []*BranchNode_Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

type BranchNode_Output struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the output of the branch node is the id of the condition that is true
	// the execution will continue to the next node belong to this condition
	// In front-end, when rendering the historical execution, we can draw the relationship coming out of the condition that match this id
	ConditionId   string `protobuf:"bytes,1,opt,name=condition_id,json=conditionId,proto3" json:"condition_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BranchNode_Output) Reset() {
	*x = BranchNode_Output{}
	mi := &file_avs_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BranchNode_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchNode_Output) ProtoMessage() {}

func (x *BranchNode_Output) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchNode_Output.ProtoReflect.Descriptor instead.
func (*BranchNode_Output) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{16, 2}
}

func (x *BranchNode_Output) GetConditionId() string {
	if x != nil {
		return x.ConditionId
	}
	return ""
}

type FilterNode_Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filter node acts like .select or .filter to pluck out element in an array that evaluate the expression to true
	Expression string `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	// The node Id of a source node; we will extract the output of the source node at runtime.
	// The data should be iterable (array, object, etc.). Runtime validation will check compatibility.
	SourceId      string `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilterNode_Config) Reset() {
	*x = FilterNode_Config{}
	mi := &file_avs_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterNode_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterNode_Config) ProtoMessage() {}

func (x *FilterNode_Config) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterNode_Config.ProtoReflect.Descriptor instead.
func (*FilterNode_Config) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{17, 0}
}

func (x *FilterNode_Config) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *FilterNode_Config) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

type FilterNode_Output struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the output of the filter node is the filtered array after apply the filter expression. It works similar to filter of javascript
	Data          *anypb.Any `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilterNode_Output) Reset() {
	*x = FilterNode_Output{}
	mi := &file_avs_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterNode_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterNode_Output) ProtoMessage() {}

func (x *FilterNode_Output) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterNode_Output.ProtoReflect.Descriptor instead.
func (*FilterNode_Output) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{17, 1}
}

func (x *FilterNode_Output) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

type LoopNode_Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// source_variable is the variable name from a previous node whose data will be iterated over.
	// The node Id of a source node; we will extract the output of the source node at runtime.
	SourceId string `protobuf:"bytes,1,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	// iter_val is the variable name that will hold the current value during each iteration
	IterVal string `protobuf:"bytes,2,opt,name=iter_val,json=iterVal,proto3" json:"iter_val,omitempty"`
	// iter_key is the variable name that will hold the current key/index during each iteration
	IterKey       string `protobuf:"bytes,3,opt,name=iter_key,json=iterKey,proto3" json:"iter_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoopNode_Config) Reset() {
	*x = LoopNode_Config{}
	mi := &file_avs_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoopNode_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoopNode_Config) ProtoMessage() {}

func (x *LoopNode_Config) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoopNode_Config.ProtoReflect.Descriptor instead.
func (*LoopNode_Config) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{18, 0}
}

func (x *LoopNode_Config) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *LoopNode_Config) GetIterVal() string {
	if x != nil {
		return x.IterVal
	}
	return ""
}

func (x *LoopNode_Config) GetIterKey() string {
	if x != nil {
		return x.IterKey
	}
	return ""
}

type LoopNode_Output struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          string                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoopNode_Output) Reset() {
	*x = LoopNode_Output{}
	mi := &file_avs_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoopNode_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoopNode_Output) ProtoMessage() {}

func (x *LoopNode_Output) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoopNode_Output.ProtoReflect.Descriptor instead.
func (*LoopNode_Output) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{18, 1}
}

func (x *LoopNode_Output) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type Execution_Step struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unified type field - can be trigger type (MANUAL, BLOCK, etc) or node type (CUSTOM_CODE, REST_API, etc)
	Type    string   `protobuf:"bytes,17,opt,name=type,proto3" json:"type,omitempty"`
	Name    string   `protobuf:"bytes,18,opt,name=name,proto3" json:"name,omitempty"`
	Success bool     `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Error   string   `protobuf:"bytes,13,opt,name=error,proto3" json:"error,omitempty"`
	Log     string   `protobuf:"bytes,12,opt,name=log,proto3" json:"log,omitempty"`
	Inputs  []string `protobuf:"bytes,16,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// Input data that was set on this trigger/node
	Input *structpb.Value `protobuf:"bytes,19,opt,name=input,proto3" json:"input,omitempty"`
	// Types that are valid to be assigned to OutputData:
	//
	//	*Execution_Step_BlockTrigger
	//	*Execution_Step_FixedTimeTrigger
	//	*Execution_Step_CronTrigger
	//	*Execution_Step_EventTrigger
	//	*Execution_Step_ManualTrigger
	//	*Execution_Step_EthTransfer
	//	*Execution_Step_Graphql
	//	*Execution_Step_ContractRead
	//	*Execution_Step_ContractWrite
	//	*Execution_Step_CustomCode
	//	*Execution_Step_RestApi
	//	*Execution_Step_Branch
	//	*Execution_Step_Filter
	//	*Execution_Step_Loop
	OutputData isExecution_Step_OutputData `protobuf_oneof:"output_data"`
	// timestamp when step started (in milliseconds)
	StartAt int64 `protobuf:"varint,14,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	// timestamp when step ended (in milliseconds)
	EndAt         int64 `protobuf:"varint,15,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Execution_Step) Reset() {
	*x = Execution_Step{}
	mi := &file_avs_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Execution_Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Execution_Step) ProtoMessage() {}

func (x *Execution_Step) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Execution_Step.ProtoReflect.Descriptor instead.
func (*Execution_Step) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{21, 0}
}

func (x *Execution_Step) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Execution_Step) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Execution_Step) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Execution_Step) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Execution_Step) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Execution_Step) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

func (x *Execution_Step) GetInputs() []string {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *Execution_Step) GetInput() *structpb.Value {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *Execution_Step) GetOutputData() isExecution_Step_OutputData {
	if x != nil {
		return x.OutputData
	}
	return nil
}

func (x *Execution_Step) GetBlockTrigger() *BlockTrigger_Output {
	if x != nil {
		if x, ok := x.OutputData.(*Execution_Step_BlockTrigger); ok {
			return x.BlockTrigger
		}
	}
	return nil
}

func (x *Execution_Step) GetFixedTimeTrigger() *FixedTimeTrigger_Output {
	if x != nil {
		if x, ok := x.OutputData.(*Execution_Step_FixedTimeTrigger); ok {
			return x.FixedTimeTrigger
		}
	}
	return nil
}

func (x *Execution_Step) GetCronTrigger() *CronTrigger_Output {
	if x != nil {
		if x, ok := x.OutputData.(*Execution_Step_CronTrigger); ok {
			return x.CronTrigger
		}
	}
	return nil
}

func (x *Execution_Step) GetEventTrigger() *EventTrigger_Output {
	if x != nil {
		if x, ok := x.OutputData.(*Execution_Step_EventTrigger); ok {
			return x.EventTrigger
		}
	}
	return nil
}

func (x *Execution_Step) GetManualTrigger() *ManualTrigger_Output {
	if x != nil {
		if x, ok := x.OutputData.(*Execution_Step_ManualTrigger); ok {
			return x.ManualTrigger
		}
	}
	return nil
}

func (x *Execution_Step) GetEthTransfer() *ETHTransferNode_Output {
	if x != nil {
		if x, ok := x.OutputData.(*Execution_Step_EthTransfer); ok {
			return x.EthTransfer
		}
	}
	return nil
}

func (x *Execution_Step) GetGraphql() *GraphQLQueryNode_Output {
	if x != nil {
		if x, ok := x.OutputData.(*Execution_Step_Graphql); ok {
			return x.Graphql
		}
	}
	return nil
}

func (x *Execution_Step) GetContractRead() *ContractReadNode_Output {
	if x != nil {
		if x, ok := x.OutputData.(*Execution_Step_ContractRead); ok {
			return x.ContractRead
		}
	}
	return nil
}

func (x *Execution_Step) GetContractWrite() *ContractWriteNode_Output {
	if x != nil {
		if x, ok := x.OutputData.(*Execution_Step_ContractWrite); ok {
			return x.ContractWrite
		}
	}
	return nil
}

func (x *Execution_Step) GetCustomCode() *CustomCodeNode_Output {
	if x != nil {
		if x, ok := x.OutputData.(*Execution_Step_CustomCode); ok {
			return x.CustomCode
		}
	}
	return nil
}

func (x *Execution_Step) GetRestApi() *RestAPINode_Output {
	if x != nil {
		if x, ok := x.OutputData.(*Execution_Step_RestApi); ok {
			return x.RestApi
		}
	}
	return nil
}

func (x *Execution_Step) GetBranch() *BranchNode_Output {
	if x != nil {
		if x, ok := x.OutputData.(*Execution_Step_Branch); ok {
			return x.Branch
		}
	}
	return nil
}

func (x *Execution_Step) GetFilter() *FilterNode_Output {
	if x != nil {
		if x, ok := x.OutputData.(*Execution_Step_Filter); ok {
			return x.Filter
		}
	}
	return nil
}

func (x *Execution_Step) GetLoop() *LoopNode_Output {
	if x != nil {
		if x, ok := x.OutputData.(*Execution_Step_Loop); ok {
			return x.Loop
		}
	}
	return nil
}

func (x *Execution_Step) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *Execution_Step) GetEndAt() int64 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

type isExecution_Step_OutputData interface {
	isExecution_Step_OutputData()
}

type Execution_Step_BlockTrigger struct {
	// Trigger outputs
	BlockTrigger *BlockTrigger_Output `protobuf:"bytes,20,opt,name=block_trigger,json=blockTrigger,proto3,oneof"`
}

type Execution_Step_FixedTimeTrigger struct {
	FixedTimeTrigger *FixedTimeTrigger_Output `protobuf:"bytes,21,opt,name=fixed_time_trigger,json=fixedTimeTrigger,proto3,oneof"`
}

type Execution_Step_CronTrigger struct {
	CronTrigger *CronTrigger_Output `protobuf:"bytes,22,opt,name=cron_trigger,json=cronTrigger,proto3,oneof"`
}

type Execution_Step_EventTrigger struct {
	EventTrigger *EventTrigger_Output `protobuf:"bytes,23,opt,name=event_trigger,json=eventTrigger,proto3,oneof"`
}

type Execution_Step_ManualTrigger struct {
	ManualTrigger *ManualTrigger_Output `protobuf:"bytes,24,opt,name=manual_trigger,json=manualTrigger,proto3,oneof"`
}

type Execution_Step_EthTransfer struct {
	// Node outputs
	EthTransfer *ETHTransferNode_Output `protobuf:"bytes,3,opt,name=eth_transfer,json=ethTransfer,proto3,oneof"`
}

type Execution_Step_Graphql struct {
	Graphql *GraphQLQueryNode_Output `protobuf:"bytes,4,opt,name=graphql,proto3,oneof"`
}

type Execution_Step_ContractRead struct {
	ContractRead *ContractReadNode_Output `protobuf:"bytes,5,opt,name=contract_read,json=contractRead,proto3,oneof"`
}

type Execution_Step_ContractWrite struct {
	ContractWrite *ContractWriteNode_Output `protobuf:"bytes,6,opt,name=contract_write,json=contractWrite,proto3,oneof"`
}

type Execution_Step_CustomCode struct {
	CustomCode *CustomCodeNode_Output `protobuf:"bytes,7,opt,name=custom_code,json=customCode,proto3,oneof"`
}

type Execution_Step_RestApi struct {
	RestApi *RestAPINode_Output `protobuf:"bytes,8,opt,name=rest_api,json=restApi,proto3,oneof"`
}

type Execution_Step_Branch struct {
	Branch *BranchNode_Output `protobuf:"bytes,9,opt,name=branch,proto3,oneof"`
}

type Execution_Step_Filter struct {
	Filter *FilterNode_Output `protobuf:"bytes,10,opt,name=filter,proto3,oneof"`
}

type Execution_Step_Loop struct {
	Loop *LoopNode_Output `protobuf:"bytes,11,opt,name=loop,proto3,oneof"`
}

func (*Execution_Step_BlockTrigger) isExecution_Step_OutputData() {}

func (*Execution_Step_FixedTimeTrigger) isExecution_Step_OutputData() {}

func (*Execution_Step_CronTrigger) isExecution_Step_OutputData() {}

func (*Execution_Step_EventTrigger) isExecution_Step_OutputData() {}

func (*Execution_Step_ManualTrigger) isExecution_Step_OutputData() {}

func (*Execution_Step_EthTransfer) isExecution_Step_OutputData() {}

func (*Execution_Step_Graphql) isExecution_Step_OutputData() {}

func (*Execution_Step_ContractRead) isExecution_Step_OutputData() {}

func (*Execution_Step_ContractWrite) isExecution_Step_OutputData() {}

func (*Execution_Step_CustomCode) isExecution_Step_OutputData() {}

func (*Execution_Step_RestApi) isExecution_Step_OutputData() {}

func (*Execution_Step_Branch) isExecution_Step_OutputData() {}

func (*Execution_Step_Filter) isExecution_Step_OutputData() {}

func (*Execution_Step_Loop) isExecution_Step_OutputData() {}

type Evm_Log struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Consensus fields
	Address string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` // Address of the contract that generated the event
	Topics  []string `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`   // List of topics provided by the contract
	Data    string   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`       // Supplied by the contract, usually ABI-encoded
	// Derived fields (filled in by the node but not secured by consensus)
	BlockNumber      uint64 `protobuf:"varint,4,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`                // Block in which the transaction was included
	TransactionHash  string `protobuf:"bytes,5,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`     // Hash of the transaction
	TransactionIndex uint32 `protobuf:"varint,6,opt,name=transaction_index,json=transactionIndex,proto3" json:"transaction_index,omitempty"` // Index of the transaction in the block
	BlockHash        string `protobuf:"bytes,7,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`                       // Hash of the block in which the transaction was included
	Index            uint32 `protobuf:"varint,8,opt,name=index,proto3" json:"index,omitempty"`                                               // Index of the log in the receipt
	Removed          bool   `protobuf:"varint,9,opt,name=removed,proto3" json:"removed,omitempty"`                                           // True if this log was reverted due to chain reorganization
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Evm_Log) Reset() {
	*x = Evm_Log{}
	mi := &file_avs_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Evm_Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Evm_Log) ProtoMessage() {}

func (x *Evm_Log) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Evm_Log.ProtoReflect.Descriptor instead.
func (*Evm_Log) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{61, 0}
}

func (x *Evm_Log) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Evm_Log) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *Evm_Log) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *Evm_Log) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Evm_Log) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *Evm_Log) GetTransactionIndex() uint32 {
	if x != nil {
		return x.TransactionIndex
	}
	return 0
}

func (x *Evm_Log) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *Evm_Log) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Evm_Log) GetRemoved() bool {
	if x != nil {
		return x.Removed
	}
	return false
}

// Define to match https://docs.ethers.org/v6/api/providers/#TransactionReceipt as required in this ticket: https://github.com/AvaProtocol/EigenLayer-AVS/issues/153
type Evm_TransactionReceipt struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Hash              string                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	BlockHash         string                 `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockNumber       uint64                 `protobuf:"varint,3,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	From              string                 `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	GasUsed           uint64                 `protobuf:"varint,6,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	GasPrice          uint64                 `protobuf:"varint,7,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	CumulativeGasUsed uint64                 `protobuf:"varint,8,opt,name=cumulative_gas_used,json=cumulativeGasUsed,proto3" json:"cumulative_gas_used,omitempty"`
	Fee               uint64                 `protobuf:"varint,9,opt,name=fee,proto3" json:"fee,omitempty"`
	ContractAddress   string                 `protobuf:"bytes,10,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Index             uint64                 `protobuf:"varint,11,opt,name=index,proto3" json:"index,omitempty"`
	Logs              []string               `protobuf:"bytes,12,rep,name=logs,proto3" json:"logs,omitempty"`
	LogsBloom         string                 `protobuf:"bytes,13,opt,name=logs_bloom,json=logsBloom,proto3" json:"logs_bloom,omitempty"`
	Root              string                 `protobuf:"bytes,14,opt,name=root,proto3" json:"root,omitempty"`
	Status            uint32                 `protobuf:"varint,15,opt,name=status,proto3" json:"status,omitempty"`
	Type              uint32                 `protobuf:"varint,16,opt,name=type,proto3" json:"type,omitempty"`
	BlobGasPrice      uint64                 `protobuf:"varint,17,opt,name=blob_gas_price,json=blobGasPrice,proto3" json:"blob_gas_price,omitempty"`
	BlobGasUsed       uint64                 `protobuf:"varint,18,opt,name=blob_gas_used,json=blobGasUsed,proto3" json:"blob_gas_used,omitempty"`
	To                string                 `protobuf:"bytes,19,opt,name=to,proto3" json:"to,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Evm_TransactionReceipt) Reset() {
	*x = Evm_TransactionReceipt{}
	mi := &file_avs_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Evm_TransactionReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Evm_TransactionReceipt) ProtoMessage() {}

func (x *Evm_TransactionReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Evm_TransactionReceipt.ProtoReflect.Descriptor instead.
func (*Evm_TransactionReceipt) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{61, 1}
}

func (x *Evm_TransactionReceipt) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Evm_TransactionReceipt) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *Evm_TransactionReceipt) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Evm_TransactionReceipt) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Evm_TransactionReceipt) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *Evm_TransactionReceipt) GetGasPrice() uint64 {
	if x != nil {
		return x.GasPrice
	}
	return 0
}

func (x *Evm_TransactionReceipt) GetCumulativeGasUsed() uint64 {
	if x != nil {
		return x.CumulativeGasUsed
	}
	return 0
}

func (x *Evm_TransactionReceipt) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *Evm_TransactionReceipt) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *Evm_TransactionReceipt) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Evm_TransactionReceipt) GetLogs() []string {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *Evm_TransactionReceipt) GetLogsBloom() string {
	if x != nil {
		return x.LogsBloom
	}
	return ""
}

func (x *Evm_TransactionReceipt) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

func (x *Evm_TransactionReceipt) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Evm_TransactionReceipt) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Evm_TransactionReceipt) GetBlobGasPrice() uint64 {
	if x != nil {
		return x.BlobGasPrice
	}
	return 0
}

func (x *Evm_TransactionReceipt) GetBlobGasUsed() uint64 {
	if x != nil {
		return x.BlobGasUsed
	}
	return 0
}

func (x *Evm_TransactionReceipt) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

type Evm_UserOp struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Sender               string                 `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Nonce                string                 `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	InitCode             string                 `protobuf:"bytes,3,opt,name=init_code,json=initCode,proto3" json:"init_code,omitempty"`
	CallData             string                 `protobuf:"bytes,4,opt,name=call_data,json=callData,proto3" json:"call_data,omitempty"`
	CallGasLimit         string                 `protobuf:"bytes,5,opt,name=call_gas_limit,json=callGasLimit,proto3" json:"call_gas_limit,omitempty"`
	VerificationGasLimit string                 `protobuf:"bytes,6,opt,name=verification_gas_limit,json=verificationGasLimit,proto3" json:"verification_gas_limit,omitempty"`
	PreVerificationGas   string                 `protobuf:"bytes,7,opt,name=pre_verification_gas,json=preVerificationGas,proto3" json:"pre_verification_gas,omitempty"`
	MaxFeePerGas         string                 `protobuf:"bytes,8,opt,name=max_fee_per_gas,json=maxFeePerGas,proto3" json:"max_fee_per_gas,omitempty"`
	MaxPriorityFeePerGas string                 `protobuf:"bytes,9,opt,name=max_priority_fee_per_gas,json=maxPriorityFeePerGas,proto3" json:"max_priority_fee_per_gas,omitempty"`
	PaymasterAndData     string                 `protobuf:"bytes,10,opt,name=paymaster_and_data,json=paymasterAndData,proto3" json:"paymaster_and_data,omitempty"`
	Signature            string                 `protobuf:"bytes,11,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Evm_UserOp) Reset() {
	*x = Evm_UserOp{}
	mi := &file_avs_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Evm_UserOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Evm_UserOp) ProtoMessage() {}

func (x *Evm_UserOp) ProtoReflect() protoreflect.Message {
	mi := &file_avs_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Evm_UserOp.ProtoReflect.Descriptor instead.
func (*Evm_UserOp) Descriptor() ([]byte, []int) {
	return file_avs_proto_rawDescGZIP(), []int{61, 2}
}

func (x *Evm_UserOp) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *Evm_UserOp) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *Evm_UserOp) GetInitCode() string {
	if x != nil {
		return x.InitCode
	}
	return ""
}

func (x *Evm_UserOp) GetCallData() string {
	if x != nil {
		return x.CallData
	}
	return ""
}

func (x *Evm_UserOp) GetCallGasLimit() string {
	if x != nil {
		return x.CallGasLimit
	}
	return ""
}

func (x *Evm_UserOp) GetVerificationGasLimit() string {
	if x != nil {
		return x.VerificationGasLimit
	}
	return ""
}

func (x *Evm_UserOp) GetPreVerificationGas() string {
	if x != nil {
		return x.PreVerificationGas
	}
	return ""
}

func (x *Evm_UserOp) GetMaxFeePerGas() string {
	if x != nil {
		return x.MaxFeePerGas
	}
	return ""
}

func (x *Evm_UserOp) GetMaxPriorityFeePerGas() string {
	if x != nil {
		return x.MaxPriorityFeePerGas
	}
	return ""
}

func (x *Evm_UserOp) GetPaymasterAndData() string {
	if x != nil {
		return x.PaymasterAndData
	}
	return ""
}

func (x *Evm_UserOp) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

var File_avs_proto protoreflect.FileDescriptor

const file_avs_proto_rawDesc = "" +
	"\n" +
	"\tavs.proto\x12\n" +
	"aggregator\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x19google/protobuf/any.proto\x1a\x1cgoogle/protobuf/struct.proto\"q\n" +
	"\rTokenMetadata\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x16\n" +
	"\x06symbol\x18\x03 \x01(\tR\x06symbol\x12\x1a\n" +
	"\bdecimals\x18\x04 \x01(\rR\bdecimals\"/\n" +
	"\x13GetTokenMetadataReq\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\"u\n" +
	"\x14GetTokenMetadataResp\x12/\n" +
	"\x05token\x18\x01 \x01(\v2\x19.aggregator.TokenMetadataR\x05token\x12\x14\n" +
	"\x05found\x18\x02 \x01(\bR\x05found\x12\x16\n" +
	"\x06source\x18\x03 \x01(\tR\x06source\"\x17\n" +
	"\x05IdReq\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"\xec\x01\n" +
	"\x10FixedTimeTrigger\x12;\n" +
	"\x06config\x18\x01 \x01(\v2#.aggregator.FixedTimeTrigger.ConfigR\x06config\x12,\n" +
	"\x05input\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05input\x1a \n" +
	"\x06Config\x12\x16\n" +
	"\x06epochs\x18\x01 \x03(\x03R\x06epochs\x1aK\n" +
	"\x06Output\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\x04R\ttimestamp\x12#\n" +
	"\rtimestamp_iso\x18\x02 \x01(\tR\ftimestampIso\"\xe8\x01\n" +
	"\vCronTrigger\x126\n" +
	"\x06config\x18\x01 \x01(\v2\x1e.aggregator.CronTrigger.ConfigR\x06config\x12,\n" +
	"\x05input\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05input\x1a&\n" +
	"\x06Config\x12\x1c\n" +
	"\tschedules\x18\x01 \x03(\tR\tschedules\x1aK\n" +
	"\x06Output\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\x04R\ttimestamp\x12#\n" +
	"\rtimestamp_iso\x18\x02 \x01(\tR\ftimestampIso\"\xff\x02\n" +
	"\fBlockTrigger\x127\n" +
	"\x06config\x18\x01 \x01(\v2\x1f.aggregator.BlockTrigger.ConfigR\x06config\x12,\n" +
	"\x05input\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05input\x1a$\n" +
	"\x06Config\x12\x1a\n" +
	"\binterval\x18\x01 \x01(\x03R\binterval\x1a\xe1\x01\n" +
	"\x06Output\x12!\n" +
	"\fblock_number\x18\x01 \x01(\x04R\vblockNumber\x12\x1d\n" +
	"\n" +
	"block_hash\x18\x02 \x01(\tR\tblockHash\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x04R\ttimestamp\x12\x1f\n" +
	"\vparent_hash\x18\x04 \x01(\tR\n" +
	"parentHash\x12\x1e\n" +
	"\n" +
	"difficulty\x18\x05 \x01(\tR\n" +
	"difficulty\x12\x1b\n" +
	"\tgas_limit\x18\x06 \x01(\x04R\bgasLimit\x12\x19\n" +
	"\bgas_used\x18\a \x01(\x04R\agasUsed\"\xe0\b\n" +
	"\fEventTrigger\x127\n" +
	"\x06config\x18\x01 \x01(\v2\x1f.aggregator.EventTrigger.ConfigR\x06config\x12,\n" +
	"\x05input\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05input\x1a\x8c\x02\n" +
	"\x05Query\x12\x1c\n" +
	"\taddresses\x18\x01 \x03(\tR\taddresses\x127\n" +
	"\x06topics\x18\x02 \x03(\v2\x1f.aggregator.EventTrigger.TopicsR\x06topics\x124\n" +
	"\x14max_events_per_block\x18\x03 \x01(\rH\x00R\x11maxEventsPerBlock\x88\x01\x01\x12!\n" +
	"\fcontract_abi\x18\x04 \x01(\tR\vcontractAbi\x12:\n" +
	"\n" +
	"conditions\x18\x05 \x03(\v2\x1a.aggregator.EventConditionR\n" +
	"conditionsB\x17\n" +
	"\x15_max_events_per_block\x1a \n" +
	"\x06Topics\x12\x16\n" +
	"\x06values\x18\x01 \x03(\tR\x06values\x1aB\n" +
	"\x06Config\x128\n" +
	"\aqueries\x18\x01 \x03(\v2\x1e.aggregator.EventTrigger.QueryR\aqueries\x1a\x98\x01\n" +
	"\x06Output\x12.\n" +
	"\aevm_log\x18\x01 \x01(\v2\x13.aggregator.Evm.LogH\x00R\x06evmLog\x12O\n" +
	"\ftransfer_log\x18\x02 \x01(\v2*.aggregator.EventTrigger.TransferLogOutputH\x00R\vtransferLogB\r\n" +
	"\voutput_type\x1a\xd8\x03\n" +
	"\x11TransferLogOutput\x12\x1d\n" +
	"\n" +
	"token_name\x18\x01 \x01(\tR\ttokenName\x12!\n" +
	"\ftoken_symbol\x18\x02 \x01(\tR\vtokenSymbol\x12%\n" +
	"\x0etoken_decimals\x18\x03 \x01(\rR\rtokenDecimals\x12)\n" +
	"\x10transaction_hash\x18\x04 \x01(\tR\x0ftransactionHash\x12\x18\n" +
	"\aaddress\x18\x05 \x01(\tR\aaddress\x12!\n" +
	"\fblock_number\x18\x06 \x01(\x04R\vblockNumber\x12'\n" +
	"\x0fblock_timestamp\x18\a \x01(\x04R\x0eblockTimestamp\x12!\n" +
	"\ffrom_address\x18\b \x01(\tR\vfromAddress\x12\x1d\n" +
	"\n" +
	"to_address\x18\t \x01(\tR\ttoAddress\x12\x14\n" +
	"\x05value\x18\n" +
	" \x01(\tR\x05value\x12'\n" +
	"\x0fvalue_formatted\x18\v \x01(\tR\x0evalueFormatted\x12+\n" +
	"\x11transaction_index\x18\f \x01(\rR\x10transactionIndex\x12\x1b\n" +
	"\tlog_index\x18\r \x01(\rR\blogIndex\"\xa2\x01\n" +
	"\rManualTrigger\x128\n" +
	"\x06config\x18\x01 \x01(\v2 .aggregator.ManualTrigger.ConfigR\x06config\x12,\n" +
	"\x05input\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05input\x1a\b\n" +
	"\x06Config\x1a\x1f\n" +
	"\x06Output\x12\x15\n" +
	"\x06run_at\x18\x01 \x01(\x04R\x05runAt\"\x88\x03\n" +
	"\vTaskTrigger\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12+\n" +
	"\x04type\x18\b \x01(\x0e2\x17.aggregator.TriggerTypeR\x04type\x12\x18\n" +
	"\x06manual\x18\x02 \x01(\bH\x00R\x06manual\x12=\n" +
	"\n" +
	"fixed_time\x18\x03 \x01(\v2\x1c.aggregator.FixedTimeTriggerH\x00R\tfixedTime\x12-\n" +
	"\x04cron\x18\x04 \x01(\v2\x17.aggregator.CronTriggerH\x00R\x04cron\x120\n" +
	"\x05block\x18\x05 \x01(\v2\x18.aggregator.BlockTriggerH\x00R\x05block\x120\n" +
	"\x05event\x18\x06 \x01(\v2\x18.aggregator.EventTriggerH\x00R\x05event\x12\x0e\n" +
	"\x02id\x18\a \x01(\tR\x02id\x12,\n" +
	"\x05input\x18\t \x01(\v2\x16.google.protobuf.ValueR\x05inputB\x0e\n" +
	"\ftrigger_type\"\xf4\x01\n" +
	"\x0fETHTransferNode\x12:\n" +
	"\x06config\x18\x01 \x01(\v2\".aggregator.ETHTransferNode.ConfigR\x06config\x12,\n" +
	"\x05input\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05input\x1aB\n" +
	"\x06Config\x12 \n" +
	"\vdestination\x18\x01 \x01(\tR\vdestination\x12\x16\n" +
	"\x06amount\x18\x02 \x01(\tR\x06amount\x1a3\n" +
	"\x06Output\x12)\n" +
	"\x10transaction_hash\x18\x01 \x01(\tR\x0ftransactionHash\"\xd8\r\n" +
	"\x11ContractWriteNode\x12<\n" +
	"\x06config\x18\x01 \x01(\v2$.aggregator.ContractWriteNode.ConfigR\x06config\x12,\n" +
	"\x05input\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05input\x1a\xc0\x01\n" +
	"\x06Config\x12)\n" +
	"\x10contract_address\x18\x01 \x01(\tR\x0fcontractAddress\x12\x1b\n" +
	"\tcall_data\x18\x02 \x01(\tR\bcallData\x12!\n" +
	"\fcontract_abi\x18\x03 \x01(\tR\vcontractAbi\x12K\n" +
	"\fmethod_calls\x18\x04 \x03(\v2(.aggregator.ContractWriteNode.MethodCallR\vmethodCalls\x1aJ\n" +
	"\n" +
	"MethodCall\x12\x1b\n" +
	"\tcall_data\x18\x01 \x01(\tR\bcallData\x12\x1f\n" +
	"\vmethod_name\x18\x02 \x01(\tR\n" +
	"methodName\x1aN\n" +
	"\x06Output\x12D\n" +
	"\aresults\x18\x01 \x03(\v2*.aggregator.ContractWriteNode.MethodResultR\aresults\x1a\x84\x03\n" +
	"\fMethodResult\x12\x1f\n" +
	"\vmethod_name\x18\x01 \x01(\tR\n" +
	"methodName\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12O\n" +
	"\vtransaction\x18\x03 \x01(\v2-.aggregator.ContractWriteNode.TransactionDataR\vtransaction\x12?\n" +
	"\x06events\x18\x04 \x03(\v2'.aggregator.ContractWriteNode.EventDataR\x06events\x12=\n" +
	"\x05error\x18\x05 \x01(\v2'.aggregator.ContractWriteNode.ErrorDataR\x05error\x12I\n" +
	"\vreturn_data\x18\x06 \x01(\v2(.aggregator.ContractWriteNode.ReturnDataR\n" +
	"returnData\x12\x1d\n" +
	"\n" +
	"input_data\x18\a \x01(\tR\tinputData\x1a\xc5\x03\n" +
	"\x0fTransactionData\x12\x12\n" +
	"\x04hash\x18\x01 \x01(\tR\x04hash\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12!\n" +
	"\fblock_number\x18\x03 \x01(\tR\vblockNumber\x12\x1d\n" +
	"\n" +
	"block_hash\x18\x04 \x01(\tR\tblockHash\x12\x19\n" +
	"\bgas_used\x18\x05 \x01(\tR\agasUsed\x12\x1b\n" +
	"\tgas_limit\x18\x06 \x01(\tR\bgasLimit\x12\x1b\n" +
	"\tgas_price\x18\a \x01(\tR\bgasPrice\x12.\n" +
	"\x13effective_gas_price\x18\b \x01(\tR\x11effectiveGasPrice\x12\x12\n" +
	"\x04from\x18\t \x01(\tR\x04from\x12\x0e\n" +
	"\x02to\x18\n" +
	" \x01(\tR\x02to\x12\x14\n" +
	"\x05value\x18\v \x01(\tR\x05value\x12\x14\n" +
	"\x05nonce\x18\f \x01(\tR\x05nonce\x12+\n" +
	"\x11transaction_index\x18\r \x01(\tR\x10transactionIndex\x12$\n" +
	"\rconfirmations\x18\x0e \x01(\tR\rconfirmations\x12\x1c\n" +
	"\ttimestamp\x18\x0f \x01(\x03R\ttimestamp\x1a\xfc\x01\n" +
	"\tEventData\x12\x1d\n" +
	"\n" +
	"event_name\x18\x01 \x01(\tR\teventName\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\x12\x16\n" +
	"\x06topics\x18\x03 \x03(\tR\x06topics\x12\x12\n" +
	"\x04data\x18\x04 \x01(\tR\x04data\x12N\n" +
	"\adecoded\x18\x05 \x03(\v24.aggregator.ContractWriteNode.EventData.DecodedEntryR\adecoded\x1a:\n" +
	"\fDecodedEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a^\n" +
	"\tErrorData\x12\x12\n" +
	"\x04code\x18\x01 \x01(\tR\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12#\n" +
	"\rrevert_reason\x18\x03 \x01(\tR\frevertReason\x1aJ\n" +
	"\n" +
	"ReturnData\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\x14\n" +
	"\x05value\x18\x03 \x01(\tR\x05value\"\xbf\x05\n" +
	"\x10ContractReadNode\x12;\n" +
	"\x06config\x18\x01 \x01(\v2#.aggregator.ContractReadNode.ConfigR\x06config\x12,\n" +
	"\x05input\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05input\x1aJ\n" +
	"\n" +
	"MethodCall\x12\x1b\n" +
	"\tcall_data\x18\x01 \x01(\tR\bcallData\x12\x1f\n" +
	"\vmethod_name\x18\x02 \x01(\tR\n" +
	"methodName\x1a\xa2\x01\n" +
	"\x06Config\x12)\n" +
	"\x10contract_address\x18\x01 \x01(\tR\x0fcontractAddress\x12!\n" +
	"\fcontract_abi\x18\x02 \x01(\tR\vcontractAbi\x12J\n" +
	"\fmethod_calls\x18\x03 \x03(\v2'.aggregator.ContractReadNode.MethodCallR\vmethodCalls\x1a\xff\x01\n" +
	"\fMethodResult\x12M\n" +
	"\x04data\x18\x01 \x03(\v29.aggregator.ContractReadNode.MethodResult.StructuredFieldR\x04data\x12\x1f\n" +
	"\vmethod_name\x18\x02 \x01(\tR\n" +
	"methodName\x12\x18\n" +
	"\asuccess\x18\x03 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x04 \x01(\tR\x05error\x1aO\n" +
	"\x0fStructuredField\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\x14\n" +
	"\x05value\x18\x03 \x01(\tR\x05value\x1aM\n" +
	"\x06Output\x12C\n" +
	"\aresults\x18\x01 \x03(\v2).aggregator.ContractReadNode.MethodResultR\aresults\"\xf4\x02\n" +
	"\x10GraphQLQueryNode\x12;\n" +
	"\x06config\x18\x01 \x01(\v2#.aggregator.GraphQLQueryNode.ConfigR\x06config\x12,\n" +
	"\x05input\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05input\x1a\xc0\x01\n" +
	"\x06Config\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12\x14\n" +
	"\x05query\x18\x02 \x01(\tR\x05query\x12P\n" +
	"\tvariables\x18\x03 \x03(\v22.aggregator.GraphQLQueryNode.Config.VariablesEntryR\tvariables\x1a<\n" +
	"\x0eVariablesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a2\n" +
	"\x06Output\x12(\n" +
	"\x04data\x18\x01 \x01(\v2\x14.google.protobuf.AnyR\x04data\"\xf5\x02\n" +
	"\vRestAPINode\x126\n" +
	"\x06config\x18\x01 \x01(\v2\x1e.aggregator.RestAPINode.ConfigR\x06config\x12,\n" +
	"\x05input\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05input\x1a\xc9\x01\n" +
	"\x06Config\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12E\n" +
	"\aheaders\x18\x02 \x03(\v2+.aggregator.RestAPINode.Config.HeadersEntryR\aheaders\x12\x12\n" +
	"\x04body\x18\x03 \x01(\tR\x04body\x12\x16\n" +
	"\x06method\x18\x04 \x01(\tR\x06method\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a4\n" +
	"\x06Output\x12*\n" +
	"\x04data\x18\x01 \x01(\v2\x16.google.protobuf.ValueR\x04data\"\xf7\x01\n" +
	"\x0eCustomCodeNode\x129\n" +
	"\x06config\x18\x01 \x01(\v2!.aggregator.CustomCodeNode.ConfigR\x06config\x12,\n" +
	"\x05input\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05input\x1aF\n" +
	"\x06Config\x12$\n" +
	"\x04lang\x18\x01 \x01(\x0e2\x10.aggregator.LangR\x04lang\x12\x16\n" +
	"\x06source\x18\x02 \x01(\tR\x06source\x1a4\n" +
	"\x06Output\x12*\n" +
	"\x04data\x18\x01 \x01(\v2\x16.google.protobuf.ValueR\x04data\"\xbb\x02\n" +
	"\n" +
	"BranchNode\x125\n" +
	"\x06config\x18\x01 \x01(\v2\x1d.aggregator.BranchNode.ConfigR\x06config\x12,\n" +
	"\x05input\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05input\x1aO\n" +
	"\tCondition\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\x1e\n" +
	"\n" +
	"expression\x18\x03 \x01(\tR\n" +
	"expression\x1aJ\n" +
	"\x06Config\x12@\n" +
	"\n" +
	"conditions\x18\x01 \x03(\v2 .aggregator.BranchNode.ConditionR\n" +
	"conditions\x1a+\n" +
	"\x06Output\x12!\n" +
	"\fcondition_id\x18\x01 \x01(\tR\vconditionId\"\xec\x01\n" +
	"\n" +
	"FilterNode\x125\n" +
	"\x06config\x18\x01 \x01(\v2\x1d.aggregator.FilterNode.ConfigR\x06config\x12,\n" +
	"\x05input\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05input\x1aE\n" +
	"\x06Config\x12\x1e\n" +
	"\n" +
	"expression\x18\x01 \x01(\tR\n" +
	"expression\x12\x1b\n" +
	"\tsource_id\x18\x02 \x01(\tR\bsourceId\x1a2\n" +
	"\x06Output\x12(\n" +
	"\x04data\x18\x01 \x01(\v2\x14.google.protobuf.AnyR\x04data\"\x84\x05\n" +
	"\bLoopNode\x12@\n" +
	"\feth_transfer\x18\n" +
	" \x01(\v2\x1b.aggregator.ETHTransferNodeH\x00R\vethTransfer\x12F\n" +
	"\x0econtract_write\x18\v \x01(\v2\x1d.aggregator.ContractWriteNodeH\x00R\rcontractWrite\x12C\n" +
	"\rcontract_read\x18\f \x01(\v2\x1c.aggregator.ContractReadNodeH\x00R\fcontractRead\x12L\n" +
	"\x12graphql_data_query\x18\r \x01(\v2\x1c.aggregator.GraphQLQueryNodeH\x00R\x10graphqlDataQuery\x124\n" +
	"\brest_api\x18\x0e \x01(\v2\x17.aggregator.RestAPINodeH\x00R\arestApi\x12=\n" +
	"\vcustom_code\x18\x0f \x01(\v2\x1a.aggregator.CustomCodeNodeH\x00R\n" +
	"customCode\x123\n" +
	"\x06config\x18\x01 \x01(\v2\x1b.aggregator.LoopNode.ConfigR\x06config\x12,\n" +
	"\x05input\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05input\x1a[\n" +
	"\x06Config\x12\x1b\n" +
	"\tsource_id\x18\x01 \x01(\tR\bsourceId\x12\x19\n" +
	"\biter_val\x18\x02 \x01(\tR\aiterVal\x12\x19\n" +
	"\biter_key\x18\x03 \x01(\tR\aiterKey\x1a\x1c\n" +
	"\x06Output\x12\x12\n" +
	"\x04data\x18\x01 \x01(\tR\x04dataB\b\n" +
	"\x06runner\"J\n" +
	"\bTaskEdge\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x16\n" +
	"\x06source\x18\x02 \x01(\tR\x06source\x12\x16\n" +
	"\x06target\x18\x03 \x01(\tR\x06target\"\xac\x05\n" +
	"\bTaskNode\x12\x0e\n" +
	"\x02id\x18\x02 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12(\n" +
	"\x04type\x18\x01 \x01(\x0e2\x14.aggregator.NodeTypeR\x04type\x12@\n" +
	"\feth_transfer\x18\n" +
	" \x01(\v2\x1b.aggregator.ETHTransferNodeH\x00R\vethTransfer\x12F\n" +
	"\x0econtract_write\x18\v \x01(\v2\x1d.aggregator.ContractWriteNodeH\x00R\rcontractWrite\x12C\n" +
	"\rcontract_read\x18\f \x01(\v2\x1c.aggregator.ContractReadNodeH\x00R\fcontractRead\x12C\n" +
	"\rgraphql_query\x18\r \x01(\v2\x1c.aggregator.GraphQLQueryNodeH\x00R\fgraphqlQuery\x124\n" +
	"\brest_api\x18\x0e \x01(\v2\x17.aggregator.RestAPINodeH\x00R\arestApi\x120\n" +
	"\x06branch\x18\x0f \x01(\v2\x16.aggregator.BranchNodeH\x00R\x06branch\x120\n" +
	"\x06filter\x18\x10 \x01(\v2\x16.aggregator.FilterNodeH\x00R\x06filter\x12*\n" +
	"\x04loop\x18\x11 \x01(\v2\x14.aggregator.LoopNodeH\x00R\x04loop\x12=\n" +
	"\vcustom_code\x18\x12 \x01(\v2\x1a.aggregator.CustomCodeNodeH\x00R\n" +
	"customCode\x12,\n" +
	"\x05input\x18\x13 \x01(\v2\x16.google.protobuf.ValueR\x05inputB\v\n" +
	"\ttask_type\"\xfb\n" +
	"\n" +
	"\tExecution\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x19\n" +
	"\bstart_at\x18\x02 \x01(\x03R\astartAt\x12\x15\n" +
	"\x06end_at\x18\x03 \x01(\x03R\x05endAt\x12\x18\n" +
	"\asuccess\x18\x04 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x05 \x01(\tR\x05error\x120\n" +
	"\x05steps\x18\b \x03(\v2\x1a.aggregator.Execution.StepR\x05steps\x1a\xc9\t\n" +
	"\x04Step\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04type\x18\x11 \x01(\tR\x04type\x12\x12\n" +
	"\x04name\x18\x12 \x01(\tR\x04name\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\r \x01(\tR\x05error\x12\x10\n" +
	"\x03log\x18\f \x01(\tR\x03log\x12\x16\n" +
	"\x06inputs\x18\x10 \x03(\tR\x06inputs\x12,\n" +
	"\x05input\x18\x13 \x01(\v2\x16.google.protobuf.ValueR\x05input\x12F\n" +
	"\rblock_trigger\x18\x14 \x01(\v2\x1f.aggregator.BlockTrigger.OutputH\x00R\fblockTrigger\x12S\n" +
	"\x12fixed_time_trigger\x18\x15 \x01(\v2#.aggregator.FixedTimeTrigger.OutputH\x00R\x10fixedTimeTrigger\x12C\n" +
	"\fcron_trigger\x18\x16 \x01(\v2\x1e.aggregator.CronTrigger.OutputH\x00R\vcronTrigger\x12F\n" +
	"\revent_trigger\x18\x17 \x01(\v2\x1f.aggregator.EventTrigger.OutputH\x00R\feventTrigger\x12I\n" +
	"\x0emanual_trigger\x18\x18 \x01(\v2 .aggregator.ManualTrigger.OutputH\x00R\rmanualTrigger\x12G\n" +
	"\feth_transfer\x18\x03 \x01(\v2\".aggregator.ETHTransferNode.OutputH\x00R\vethTransfer\x12?\n" +
	"\agraphql\x18\x04 \x01(\v2#.aggregator.GraphQLQueryNode.OutputH\x00R\agraphql\x12J\n" +
	"\rcontract_read\x18\x05 \x01(\v2#.aggregator.ContractReadNode.OutputH\x00R\fcontractRead\x12M\n" +
	"\x0econtract_write\x18\x06 \x01(\v2$.aggregator.ContractWriteNode.OutputH\x00R\rcontractWrite\x12D\n" +
	"\vcustom_code\x18\a \x01(\v2!.aggregator.CustomCodeNode.OutputH\x00R\n" +
	"customCode\x12;\n" +
	"\brest_api\x18\b \x01(\v2\x1e.aggregator.RestAPINode.OutputH\x00R\arestApi\x127\n" +
	"\x06branch\x18\t \x01(\v2\x1d.aggregator.BranchNode.OutputH\x00R\x06branch\x127\n" +
	"\x06filter\x18\n" +
	" \x01(\v2\x1d.aggregator.FilterNode.OutputH\x00R\x06filter\x121\n" +
	"\x04loop\x18\v \x01(\v2\x1b.aggregator.LoopNode.OutputH\x00R\x04loop\x12\x19\n" +
	"\bstart_at\x18\x0e \x01(\x03R\astartAt\x12\x15\n" +
	"\x06end_at\x18\x0f \x01(\x03R\x05endAtB\r\n" +
	"\voutput_data\"\xf8\x03\n" +
	"\x04Task\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05owner\x18\x02 \x01(\tR\x05owner\x120\n" +
	"\x14smart_wallet_address\x18\x03 \x01(\tR\x12smartWalletAddress\x12\x19\n" +
	"\bstart_at\x18\x04 \x01(\x03R\astartAt\x12\x1d\n" +
	"\n" +
	"expired_at\x18\x05 \x01(\x03R\texpiredAt\x12\x12\n" +
	"\x04name\x18\x06 \x01(\tR\x04name\x12!\n" +
	"\fcompleted_at\x18\a \x01(\x03R\vcompletedAt\x12#\n" +
	"\rmax_execution\x18\b \x01(\x03R\fmaxExecution\x12'\n" +
	"\x0fexecution_count\x18\t \x01(\x03R\x0eexecutionCount\x12\x1e\n" +
	"\vlast_ran_at\x18\n" +
	" \x01(\x03R\tlastRanAt\x12.\n" +
	"\x06status\x18\v \x01(\x0e2\x16.aggregator.TaskStatusR\x06status\x121\n" +
	"\atrigger\x18\f \x01(\v2\x17.aggregator.TaskTriggerR\atrigger\x12*\n" +
	"\x05nodes\x18\r \x03(\v2\x14.aggregator.TaskNodeR\x05nodes\x12*\n" +
	"\x05edges\x18\x0e \x03(\v2\x14.aggregator.TaskEdgeR\x05edges\"\xbf\x02\n" +
	"\rCreateTaskReq\x121\n" +
	"\atrigger\x18\x01 \x01(\v2\x17.aggregator.TaskTriggerR\atrigger\x12\x19\n" +
	"\bstart_at\x18\x02 \x01(\x03R\astartAt\x12\x1d\n" +
	"\n" +
	"expired_at\x18\x03 \x01(\x03R\texpiredAt\x12#\n" +
	"\rmax_execution\x18\x04 \x01(\x03R\fmaxExecution\x120\n" +
	"\x14smart_wallet_address\x18\x05 \x01(\tR\x12smartWalletAddress\x12\x12\n" +
	"\x04name\x18\x06 \x01(\tR\x04name\x12*\n" +
	"\x05nodes\x18\a \x03(\v2\x14.aggregator.TaskNodeR\x05nodes\x12*\n" +
	"\x05edges\x18\b \x03(\v2\x14.aggregator.TaskEdgeR\x05edges\" \n" +
	"\x0eCreateTaskResp\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"$\n" +
	"\fNonceRequest\x12\x14\n" +
	"\x05owner\x18\x01 \x01(\tR\x05owner\"!\n" +
	"\tNonceResp\x12\x14\n" +
	"\x05nonce\x18\x01 \x01(\tR\x05nonce\"L\n" +
	"\rListWalletReq\x12'\n" +
	"\x0ffactory_address\x18\x01 \x01(\tR\x0efactoryAddress\x12\x12\n" +
	"\x04salt\x18\x02 \x01(\tR\x04salt\"r\n" +
	"\vSmartWallet\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12\x12\n" +
	"\x04salt\x18\x02 \x01(\tR\x04salt\x12\x18\n" +
	"\afactory\x18\x03 \x01(\tR\afactory\x12\x1b\n" +
	"\tis_hidden\x18\x04 \x01(\bR\bisHidden\"?\n" +
	"\x0eListWalletResp\x12-\n" +
	"\x05items\x18\x01 \x03(\v2\x17.aggregator.SmartWalletR\x05items\"\xce\x01\n" +
	"\fListTasksReq\x120\n" +
	"\x14smart_wallet_address\x18\x01 \x03(\tR\x12smartWalletAddress\x12\x16\n" +
	"\x06before\x18\x02 \x01(\tR\x06before\x12\x14\n" +
	"\x05after\x18\x03 \x01(\tR\x05after\x12\x14\n" +
	"\x05limit\x18\x04 \x01(\x03R\x05limit\x12#\n" +
	"\rinclude_nodes\x18\x05 \x01(\bR\fincludeNodes\x12#\n" +
	"\rinclude_edges\x18\x06 \x01(\bR\fincludeEdges\"j\n" +
	"\rListTasksResp\x12&\n" +
	"\x05items\x18\x01 \x03(\v2\x10.aggregator.TaskR\x05items\x121\n" +
	"\tpage_info\x18\x02 \x01(\v2\x14.aggregator.PageInfoR\bpageInfo\"r\n" +
	"\x11ListExecutionsReq\x12\x19\n" +
	"\btask_ids\x18\x01 \x03(\tR\ataskIds\x12\x16\n" +
	"\x06before\x18\x02 \x01(\tR\x06before\x12\x14\n" +
	"\x05after\x18\x03 \x01(\tR\x05after\x12\x14\n" +
	"\x05limit\x18\x04 \x01(\x03R\x05limit\"t\n" +
	"\x12ListExecutionsResp\x12+\n" +
	"\x05items\x18\x01 \x03(\v2\x15.aggregator.ExecutionR\x05items\x121\n" +
	"\tpage_info\x18\x02 \x01(\v2\x14.aggregator.PageInfoR\bpageInfo\"J\n" +
	"\fExecutionReq\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12!\n" +
	"\fexecution_id\x18\x02 \x01(\tR\vexecutionId\"J\n" +
	"\x13ExecutionStatusResp\x123\n" +
	"\x06status\x18\x01 \x01(\x0e2\x1b.aggregator.ExecutionStatusR\x06status\"C\n" +
	"\tGetKeyReq\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\x12\x1c\n" +
	"\tsignature\x18\x02 \x01(\tR\tsignature\"g\n" +
	"\aKeyResp\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12\x10\n" +
	"\x03key\x18\x02 \x01(\tR\x03key\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12\x16\n" +
	"\x06expiry\x18\x04 \x01(\x04R\x06expiry\"K\n" +
	"\fGetWalletReq\x12\x12\n" +
	"\x04salt\x18\x01 \x01(\tR\x04salt\x12'\n" +
	"\x0ffactory_address\x18\x02 \x01(\tR\x0efactoryAddress\"\xe7\x02\n" +
	"\rGetWalletResp\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12\x12\n" +
	"\x04salt\x18\x02 \x01(\tR\x04salt\x12'\n" +
	"\x0ffactory_address\x18\x03 \x01(\tR\x0efactoryAddress\x12\x1b\n" +
	"\tis_hidden\x18\x04 \x01(\bR\bisHidden\x12(\n" +
	"\x10total_task_count\x18\x05 \x01(\x04R\x0etotalTaskCount\x12*\n" +
	"\x11active_task_count\x18\x06 \x01(\x04R\x0factiveTaskCount\x120\n" +
	"\x14completed_task_count\x18\a \x01(\x04R\x12completedTaskCount\x12*\n" +
	"\x11failed_task_count\x18\b \x01(\x04R\x0ffailedTaskCount\x12.\n" +
	"\x13canceled_task_count\x18\t \x01(\x04R\x11canceledTaskCount\"h\n" +
	"\fSetWalletReq\x12\x12\n" +
	"\x04salt\x18\x01 \x01(\tR\x04salt\x12'\n" +
	"\x0ffactory_address\x18\x02 \x01(\tR\x0efactoryAddress\x12\x1b\n" +
	"\tis_hidden\x18\x03 \x01(\bR\bisHidden\"\x8d\x04\n" +
	"\x0eTriggerTaskReq\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12:\n" +
	"\ftrigger_type\x18\x02 \x01(\x0e2\x17.aggregator.TriggerTypeR\vtriggerType\x12F\n" +
	"\rblock_trigger\x18\x03 \x01(\v2\x1f.aggregator.BlockTrigger.OutputH\x00R\fblockTrigger\x12S\n" +
	"\x12fixed_time_trigger\x18\x04 \x01(\v2#.aggregator.FixedTimeTrigger.OutputH\x00R\x10fixedTimeTrigger\x12C\n" +
	"\fcron_trigger\x18\x05 \x01(\v2\x1e.aggregator.CronTrigger.OutputH\x00R\vcronTrigger\x12F\n" +
	"\revent_trigger\x18\x06 \x01(\v2\x1f.aggregator.EventTrigger.OutputH\x00R\feventTrigger\x12I\n" +
	"\x0emanual_trigger\x18\a \x01(\v2 .aggregator.ManualTrigger.OutputH\x00R\rmanualTrigger\x12\x1f\n" +
	"\vis_blocking\x18\b \x01(\bR\n" +
	"isBlockingB\x10\n" +
	"\x0etrigger_output\"i\n" +
	"\x0fTriggerTaskResp\x12!\n" +
	"\fexecution_id\x18\x01 \x01(\tR\vexecutionId\x123\n" +
	"\x06status\x18\x02 \x01(\x0e2\x1b.aggregator.ExecutionStatusR\x06status\"}\n" +
	"\x17CreateOrUpdateSecretReq\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x16\n" +
	"\x06secret\x18\x02 \x01(\tR\x06secret\x12\x1f\n" +
	"\vworkflow_id\x18\x03 \x01(\tR\n" +
	"workflowId\x12\x15\n" +
	"\x06org_id\x18\x04 \x01(\tR\x05orgId\"\x83\x02\n" +
	"\x0eListSecretsReq\x12\x1f\n" +
	"\vworkflow_id\x18\x01 \x01(\tR\n" +
	"workflowId\x12\x16\n" +
	"\x06before\x18\x02 \x01(\tR\x06before\x12\x14\n" +
	"\x05after\x18\x03 \x01(\tR\x05after\x12\x14\n" +
	"\x05limit\x18\x04 \x01(\x03R\x05limit\x12-\n" +
	"\x12include_timestamps\x18\x05 \x01(\bR\x11includeTimestamps\x12,\n" +
	"\x12include_created_by\x18\x06 \x01(\bR\x10includeCreatedBy\x12/\n" +
	"\x13include_description\x18\a \x01(\bR\x12includeDescription\"\x9c\x01\n" +
	"\bPageInfo\x12!\n" +
	"\fstart_cursor\x18\x01 \x01(\tR\vstartCursor\x12\x1d\n" +
	"\n" +
	"end_cursor\x18\x02 \x01(\tR\tendCursor\x12*\n" +
	"\x11has_previous_page\x18\x03 \x01(\bR\x0fhasPreviousPage\x12\"\n" +
	"\rhas_next_page\x18\x04 \x01(\bR\vhasNextPage\"\xe9\x01\n" +
	"\x06Secret\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05scope\x18\x02 \x01(\tR\x05scope\x12\x1f\n" +
	"\vworkflow_id\x18\x03 \x01(\tR\n" +
	"workflowId\x12\x15\n" +
	"\x06org_id\x18\x04 \x01(\tR\x05orgId\x12\x1d\n" +
	"\n" +
	"created_at\x18\x05 \x01(\x03R\tcreatedAt\x12\x1d\n" +
	"\n" +
	"updated_at\x18\x06 \x01(\x03R\tupdatedAt\x12\x1d\n" +
	"\n" +
	"created_by\x18\a \x01(\tR\tcreatedBy\x12 \n" +
	"\vdescription\x18\b \x01(\tR\vdescription\"n\n" +
	"\x0fListSecretsResp\x12(\n" +
	"\x05items\x18\x01 \x03(\v2\x12.aggregator.SecretR\x05items\x121\n" +
	"\tpage_info\x18\x02 \x01(\v2\x14.aggregator.PageInfoR\bpageInfo\"]\n" +
	"\x0fDeleteSecretReq\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1f\n" +
	"\vworkflow_id\x18\x02 \x01(\tR\n" +
	"workflowId\x12\x15\n" +
	"\x06org_id\x18\x03 \x01(\tR\x05orgId\"/\n" +
	"\x15GetSignatureFormatReq\x12\x16\n" +
	"\x06wallet\x18\x01 \x01(\tR\x06wallet\"2\n" +
	"\x16GetSignatureFormatResp\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\"3\n" +
	"\x13GetWorkflowCountReq\x12\x1c\n" +
	"\taddresses\x18\x01 \x03(\tR\taddresses\",\n" +
	"\x14GetWorkflowCountResp\x12\x14\n" +
	"\x05total\x18\x01 \x01(\x03R\x05total\"9\n" +
	"\x14GetExecutionCountReq\x12!\n" +
	"\fworkflow_ids\x18\x01 \x03(\tR\vworkflowIds\"-\n" +
	"\x15GetExecutionCountResp\x12\x14\n" +
	"\x05total\x18\x01 \x01(\x03R\x05total\"M\n" +
	"\x14GetExecutionStatsReq\x12!\n" +
	"\fworkflow_ids\x18\x01 \x03(\tR\vworkflowIds\x12\x12\n" +
	"\x04days\x18\x02 \x01(\x03R\x04days\"\x91\x01\n" +
	"\x15GetExecutionStatsResp\x12\x14\n" +
	"\x05total\x18\x01 \x01(\x03R\x05total\x12\x1c\n" +
	"\tsucceeded\x18\x02 \x01(\x03R\tsucceeded\x12\x16\n" +
	"\x06failed\x18\x03 \x01(\x03R\x06failed\x12,\n" +
	"\x12avg_execution_time\x18\x04 \x01(\x01R\x10avgExecutionTime\"\xad\x03\n" +
	"\x14RunNodeWithInputsReq\x121\n" +
	"\tnode_type\x18\x01 \x01(\x0e2\x14.aggregator.NodeTypeR\bnodeType\x12Q\n" +
	"\vnode_config\x18\x02 \x03(\v20.aggregator.RunNodeWithInputsReq.NodeConfigEntryR\n" +
	"nodeConfig\x12]\n" +
	"\x0finput_variables\x18\x03 \x03(\v24.aggregator.RunNodeWithInputsReq.InputVariablesEntryR\x0einputVariables\x1aU\n" +
	"\x0fNodeConfigEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12,\n" +
	"\x05value\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05value:\x028\x01\x1aY\n" +
	"\x13InputVariablesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12,\n" +
	"\x05value\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05value:\x028\x01\"\xbc\x05\n" +
	"\x15RunNodeWithInputsResp\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x03 \x01(\tR\x05error\x12\x17\n" +
	"\anode_id\x18\x04 \x01(\tR\x06nodeId\x12G\n" +
	"\feth_transfer\x18\n" +
	" \x01(\v2\".aggregator.ETHTransferNode.OutputH\x00R\vethTransfer\x12?\n" +
	"\agraphql\x18\v \x01(\v2#.aggregator.GraphQLQueryNode.OutputH\x00R\agraphql\x12J\n" +
	"\rcontract_read\x18\f \x01(\v2#.aggregator.ContractReadNode.OutputH\x00R\fcontractRead\x12M\n" +
	"\x0econtract_write\x18\r \x01(\v2$.aggregator.ContractWriteNode.OutputH\x00R\rcontractWrite\x12D\n" +
	"\vcustom_code\x18\x0e \x01(\v2!.aggregator.CustomCodeNode.OutputH\x00R\n" +
	"customCode\x12;\n" +
	"\brest_api\x18\x0f \x01(\v2\x1e.aggregator.RestAPINode.OutputH\x00R\arestApi\x127\n" +
	"\x06branch\x18\x10 \x01(\v2\x1d.aggregator.BranchNode.OutputH\x00R\x06branch\x127\n" +
	"\x06filter\x18\x11 \x01(\v2\x1d.aggregator.FilterNode.OutputH\x00R\x06filter\x121\n" +
	"\x04loop\x18\x12 \x01(\v2\x1b.aggregator.LoopNode.OutputH\x00R\x04loopB\r\n" +
	"\voutput_data\"\xa5\x03\n" +
	"\rRunTriggerReq\x12:\n" +
	"\ftrigger_type\x18\x01 \x01(\x0e2\x17.aggregator.TriggerTypeR\vtriggerType\x12S\n" +
	"\x0etrigger_config\x18\x02 \x03(\v2,.aggregator.RunTriggerReq.TriggerConfigEntryR\rtriggerConfig\x12P\n" +
	"\rtrigger_input\x18\x03 \x03(\v2+.aggregator.RunTriggerReq.TriggerInputEntryR\ftriggerInput\x1aX\n" +
	"\x12TriggerConfigEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12,\n" +
	"\x05value\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05value:\x028\x01\x1aW\n" +
	"\x11TriggerInputEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12,\n" +
	"\x05value\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05value:\x028\x01\"\xe3\x03\n" +
	"\x0eRunTriggerResp\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\x12\x1d\n" +
	"\n" +
	"trigger_id\x18\x03 \x01(\tR\ttriggerId\x12F\n" +
	"\rblock_trigger\x18\n" +
	" \x01(\v2\x1f.aggregator.BlockTrigger.OutputH\x00R\fblockTrigger\x12S\n" +
	"\x12fixed_time_trigger\x18\v \x01(\v2#.aggregator.FixedTimeTrigger.OutputH\x00R\x10fixedTimeTrigger\x12C\n" +
	"\fcron_trigger\x18\f \x01(\v2\x1e.aggregator.CronTrigger.OutputH\x00R\vcronTrigger\x12F\n" +
	"\revent_trigger\x18\r \x01(\v2\x1f.aggregator.EventTrigger.OutputH\x00R\feventTrigger\x12I\n" +
	"\x0emanual_trigger\x18\x0e \x01(\v2 .aggregator.ManualTrigger.OutputH\x00R\rmanualTriggerB\r\n" +
	"\voutput_data\"\xd2\t\n" +
	"\x03Evm\x1a\x95\x02\n" +
	"\x03Log\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12\x16\n" +
	"\x06topics\x18\x02 \x03(\tR\x06topics\x12\x12\n" +
	"\x04data\x18\x03 \x01(\tR\x04data\x12!\n" +
	"\fblock_number\x18\x04 \x01(\x04R\vblockNumber\x12)\n" +
	"\x10transaction_hash\x18\x05 \x01(\tR\x0ftransactionHash\x12+\n" +
	"\x11transaction_index\x18\x06 \x01(\rR\x10transactionIndex\x12\x1d\n" +
	"\n" +
	"block_hash\x18\a \x01(\tR\tblockHash\x12\x14\n" +
	"\x05index\x18\b \x01(\rR\x05index\x12\x18\n" +
	"\aremoved\x18\t \x01(\bR\aremoved\x1a\x86\x04\n" +
	"\x12TransactionReceipt\x12\x12\n" +
	"\x04hash\x18\x01 \x01(\tR\x04hash\x12\x1d\n" +
	"\n" +
	"block_hash\x18\x02 \x01(\tR\tblockHash\x12!\n" +
	"\fblock_number\x18\x03 \x01(\x04R\vblockNumber\x12\x12\n" +
	"\x04from\x18\x04 \x01(\tR\x04from\x12\x19\n" +
	"\bgas_used\x18\x06 \x01(\x04R\agasUsed\x12\x1b\n" +
	"\tgas_price\x18\a \x01(\x04R\bgasPrice\x12.\n" +
	"\x13cumulative_gas_used\x18\b \x01(\x04R\x11cumulativeGasUsed\x12\x10\n" +
	"\x03fee\x18\t \x01(\x04R\x03fee\x12)\n" +
	"\x10contract_address\x18\n" +
	" \x01(\tR\x0fcontractAddress\x12\x14\n" +
	"\x05index\x18\v \x01(\x04R\x05index\x12\x12\n" +
	"\x04logs\x18\f \x03(\tR\x04logs\x12\x1d\n" +
	"\n" +
	"logs_bloom\x18\r \x01(\tR\tlogsBloom\x12\x12\n" +
	"\x04root\x18\x0e \x01(\tR\x04root\x12\x16\n" +
	"\x06status\x18\x0f \x01(\rR\x06status\x12\x12\n" +
	"\x04type\x18\x10 \x01(\rR\x04type\x12$\n" +
	"\x0eblob_gas_price\x18\x11 \x01(\x04R\fblobGasPrice\x12\"\n" +
	"\rblob_gas_used\x18\x12 \x01(\x04R\vblobGasUsed\x12\x0e\n" +
	"\x02to\x18\x13 \x01(\tR\x02to\x1a\xa9\x03\n" +
	"\x06UserOp\x12\x16\n" +
	"\x06sender\x18\x01 \x01(\tR\x06sender\x12\x14\n" +
	"\x05nonce\x18\x02 \x01(\tR\x05nonce\x12\x1b\n" +
	"\tinit_code\x18\x03 \x01(\tR\binitCode\x12\x1b\n" +
	"\tcall_data\x18\x04 \x01(\tR\bcallData\x12$\n" +
	"\x0ecall_gas_limit\x18\x05 \x01(\tR\fcallGasLimit\x124\n" +
	"\x16verification_gas_limit\x18\x06 \x01(\tR\x14verificationGasLimit\x120\n" +
	"\x14pre_verification_gas\x18\a \x01(\tR\x12preVerificationGas\x12%\n" +
	"\x0fmax_fee_per_gas\x18\b \x01(\tR\fmaxFeePerGas\x126\n" +
	"\x18max_priority_fee_per_gas\x18\t \x01(\tR\x14maxPriorityFeePerGas\x12,\n" +
	"\x12paymaster_and_data\x18\n" +
	" \x01(\tR\x10paymasterAndData\x12\x1c\n" +
	"\tsignature\x18\v \x01(\tR\tsignature\"\xd1\x02\n" +
	"\x0fSimulateTaskReq\x121\n" +
	"\atrigger\x18\x01 \x01(\v2\x17.aggregator.TaskTriggerR\atrigger\x12*\n" +
	"\x05nodes\x18\x02 \x03(\v2\x14.aggregator.TaskNodeR\x05nodes\x12*\n" +
	"\x05edges\x18\x03 \x03(\v2\x14.aggregator.TaskEdgeR\x05edges\x12X\n" +
	"\x0finput_variables\x18\x06 \x03(\v2/.aggregator.SimulateTaskReq.InputVariablesEntryR\x0einputVariables\x1aY\n" +
	"\x13InputVariablesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12,\n" +
	"\x05value\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05value:\x028\x01\"\x80\x01\n" +
	"\x0eEventCondition\x12\x1d\n" +
	"\n" +
	"field_name\x18\x01 \x01(\tR\tfieldName\x12\x1a\n" +
	"\boperator\x18\x02 \x01(\tR\boperator\x12\x14\n" +
	"\x05value\x18\x03 \x01(\tR\x05value\x12\x1d\n" +
	"\n" +
	"field_type\x18\x04 \x01(\tR\tfieldType*\xa8\x01\n" +
	"\vTriggerType\x12\x1c\n" +
	"\x18TRIGGER_TYPE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13TRIGGER_TYPE_MANUAL\x10\x01\x12\x1b\n" +
	"\x17TRIGGER_TYPE_FIXED_TIME\x10\x02\x12\x15\n" +
	"\x11TRIGGER_TYPE_CRON\x10\x03\x12\x16\n" +
	"\x12TRIGGER_TYPE_BLOCK\x10\x04\x12\x16\n" +
	"\x12TRIGGER_TYPE_EVENT\x10\x05*\x8c\x02\n" +
	"\bNodeType\x12\x19\n" +
	"\x15NODE_TYPE_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16NODE_TYPE_ETH_TRANSFER\x10\x01\x12\x1c\n" +
	"\x18NODE_TYPE_CONTRACT_WRITE\x10\x02\x12\x1b\n" +
	"\x17NODE_TYPE_CONTRACT_READ\x10\x03\x12\x1b\n" +
	"\x17NODE_TYPE_GRAPHQL_QUERY\x10\x04\x12\x16\n" +
	"\x12NODE_TYPE_REST_API\x10\x05\x12\x19\n" +
	"\x15NODE_TYPE_CUSTOM_CODE\x10\x06\x12\x14\n" +
	"\x10NODE_TYPE_BRANCH\x10\a\x12\x14\n" +
	"\x10NODE_TYPE_FILTER\x10\b\x12\x12\n" +
	"\x0eNODE_TYPE_LOOP\x10\t*\x16\n" +
	"\x04Lang\x12\x0e\n" +
	"\n" +
	"JavaScript\x10\x00*\xdf\x01\n" +
	"\x05Error\x12\x0f\n" +
	"\vUnknowError\x10\x00\x12\x11\n" +
	"\fRpcNodeError\x10\xe8\a\x12\x17\n" +
	"\x12StorageUnavailable\x10\xd0\x0f\x12\x16\n" +
	"\x11StorageWriteError\x10\xd1\x0f\x12\x18\n" +
	"\x13SmartWalletRpcError\x10\xf0.\x12\x1d\n" +
	"\x18SmartWalletNotFoundError\x10\xf1.\x12\x16\n" +
	"\x11TaskDataCorrupted\x10\xd86\x12\x19\n" +
	"\x14TaskDataMissingError\x10\xd96\x12\x15\n" +
	"\x10TaskTriggerError\x10\xdb6*P\n" +
	"\n" +
	"TaskStatus\x12\n" +
	"\n" +
	"\x06Active\x10\x00\x12\r\n" +
	"\tCompleted\x10\x01\x12\n" +
	"\n" +
	"\x06Failed\x10\x02\x12\f\n" +
	"\bCanceled\x10\x03\x12\r\n" +
	"\tExecuting\x10\x04*\x8e\x01\n" +
	"\x0fExecutionStatus\x12 \n" +
	"\x1cEXECUTION_STATUS_UNSPECIFIED\x10\x00\x12\x1c\n" +
	"\x18EXECUTION_STATUS_PENDING\x10\x01\x12\x1e\n" +
	"\x1aEXECUTION_STATUS_COMPLETED\x10\x02\x12\x1b\n" +
	"\x17EXECUTION_STATUS_FAILED\x10\x032\xa0\x0f\n" +
	"\n" +
	"Aggregator\x126\n" +
	"\x06GetKey\x12\x15.aggregator.GetKeyReq\x1a\x13.aggregator.KeyResp\"\x00\x12]\n" +
	"\x12GetSignatureFormat\x12!.aggregator.GetSignatureFormatReq\x1a\".aggregator.GetSignatureFormatResp\"\x00\x12=\n" +
	"\bGetNonce\x12\x18.aggregator.NonceRequest\x1a\x15.aggregator.NonceResp\"\x00\x12B\n" +
	"\tGetWallet\x12\x18.aggregator.GetWalletReq\x1a\x19.aggregator.GetWalletResp\"\x00\x12B\n" +
	"\tSetWallet\x12\x18.aggregator.SetWalletReq\x1a\x19.aggregator.GetWalletResp\"\x00\x12F\n" +
	"\vListWallets\x12\x19.aggregator.ListWalletReq\x1a\x1a.aggregator.ListWalletResp\"\x00\x12E\n" +
	"\n" +
	"CreateTask\x12\x19.aggregator.CreateTaskReq\x1a\x1a.aggregator.CreateTaskResp\"\x00\x12B\n" +
	"\tListTasks\x12\x18.aggregator.ListTasksReq\x1a\x19.aggregator.ListTasksResp\"\x00\x120\n" +
	"\aGetTask\x12\x11.aggregator.IdReq\x1a\x10.aggregator.Task\"\x00\x12Q\n" +
	"\x0eListExecutions\x12\x1d.aggregator.ListExecutionsReq\x1a\x1e.aggregator.ListExecutionsResp\"\x00\x12A\n" +
	"\fGetExecution\x12\x18.aggregator.ExecutionReq\x1a\x15.aggregator.Execution\"\x00\x12Q\n" +
	"\x12GetExecutionStatus\x12\x18.aggregator.ExecutionReq\x1a\x1f.aggregator.ExecutionStatusResp\"\x00\x12=\n" +
	"\n" +
	"CancelTask\x12\x11.aggregator.IdReq\x1a\x1a.google.protobuf.BoolValue\"\x00\x12=\n" +
	"\n" +
	"DeleteTask\x12\x11.aggregator.IdReq\x1a\x1a.google.protobuf.BoolValue\"\x00\x12H\n" +
	"\vTriggerTask\x12\x1a.aggregator.TriggerTaskReq\x1a\x1b.aggregator.TriggerTaskResp\"\x00\x12Q\n" +
	"\fCreateSecret\x12#.aggregator.CreateOrUpdateSecretReq\x1a\x1a.google.protobuf.BoolValue\"\x00\x12I\n" +
	"\fDeleteSecret\x12\x1b.aggregator.DeleteSecretReq\x1a\x1a.google.protobuf.BoolValue\"\x00\x12H\n" +
	"\vListSecrets\x12\x1a.aggregator.ListSecretsReq\x1a\x1b.aggregator.ListSecretsResp\"\x00\x12Q\n" +
	"\fUpdateSecret\x12#.aggregator.CreateOrUpdateSecretReq\x1a\x1a.google.protobuf.BoolValue\"\x00\x12U\n" +
	"\x10GetWorkflowCount\x12\x1f.aggregator.GetWorkflowCountReq\x1a .aggregator.GetWorkflowCountResp\x12X\n" +
	"\x11GetExecutionCount\x12 .aggregator.GetExecutionCountReq\x1a!.aggregator.GetExecutionCountResp\x12X\n" +
	"\x11GetExecutionStats\x12 .aggregator.GetExecutionStatsReq\x1a!.aggregator.GetExecutionStatsResp\x12X\n" +
	"\x11RunNodeWithInputs\x12 .aggregator.RunNodeWithInputsReq\x1a!.aggregator.RunNodeWithInputsResp\x12C\n" +
	"\n" +
	"RunTrigger\x12\x19.aggregator.RunTriggerReq\x1a\x1a.aggregator.RunTriggerResp\x12B\n" +
	"\fSimulateTask\x12\x1b.aggregator.SimulateTaskReq\x1a\x15.aggregator.Execution\x12U\n" +
	"\x10GetTokenMetadata\x12\x1f.aggregator.GetTokenMetadataReq\x1a .aggregator.GetTokenMetadataRespB\fZ\n" +
	"./avsprotob\x06proto3"

var (
	file_avs_proto_rawDescOnce sync.Once
	file_avs_proto_rawDescData []byte
)

func file_avs_proto_rawDescGZIP() []byte {
	file_avs_proto_rawDescOnce.Do(func() {
		file_avs_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_avs_proto_rawDesc), len(file_avs_proto_rawDesc)))
	})
	return file_avs_proto_rawDescData
}

var file_avs_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_avs_proto_msgTypes = make([]protoimpl.MessageInfo, 117)
var file_avs_proto_goTypes = []any{
	(TriggerType)(0),                                      // 0: aggregator.TriggerType
	(NodeType)(0),                                         // 1: aggregator.NodeType
	(Lang)(0),                                             // 2: aggregator.Lang
	(Error)(0),                                            // 3: aggregator.Error
	(TaskStatus)(0),                                       // 4: aggregator.TaskStatus
	(ExecutionStatus)(0),                                  // 5: aggregator.ExecutionStatus
	(*TokenMetadata)(nil),                                 // 6: aggregator.TokenMetadata
	(*GetTokenMetadataReq)(nil),                           // 7: aggregator.GetTokenMetadataReq
	(*GetTokenMetadataResp)(nil),                          // 8: aggregator.GetTokenMetadataResp
	(*IdReq)(nil),                                         // 9: aggregator.IdReq
	(*FixedTimeTrigger)(nil),                              // 10: aggregator.FixedTimeTrigger
	(*CronTrigger)(nil),                                   // 11: aggregator.CronTrigger
	(*BlockTrigger)(nil),                                  // 12: aggregator.BlockTrigger
	(*EventTrigger)(nil),                                  // 13: aggregator.EventTrigger
	(*ManualTrigger)(nil),                                 // 14: aggregator.ManualTrigger
	(*TaskTrigger)(nil),                                   // 15: aggregator.TaskTrigger
	(*ETHTransferNode)(nil),                               // 16: aggregator.ETHTransferNode
	(*ContractWriteNode)(nil),                             // 17: aggregator.ContractWriteNode
	(*ContractReadNode)(nil),                              // 18: aggregator.ContractReadNode
	(*GraphQLQueryNode)(nil),                              // 19: aggregator.GraphQLQueryNode
	(*RestAPINode)(nil),                                   // 20: aggregator.RestAPINode
	(*CustomCodeNode)(nil),                                // 21: aggregator.CustomCodeNode
	(*BranchNode)(nil),                                    // 22: aggregator.BranchNode
	(*FilterNode)(nil),                                    // 23: aggregator.FilterNode
	(*LoopNode)(nil),                                      // 24: aggregator.LoopNode
	(*TaskEdge)(nil),                                      // 25: aggregator.TaskEdge
	(*TaskNode)(nil),                                      // 26: aggregator.TaskNode
	(*Execution)(nil),                                     // 27: aggregator.Execution
	(*Task)(nil),                                          // 28: aggregator.Task
	(*CreateTaskReq)(nil),                                 // 29: aggregator.CreateTaskReq
	(*CreateTaskResp)(nil),                                // 30: aggregator.CreateTaskResp
	(*NonceRequest)(nil),                                  // 31: aggregator.NonceRequest
	(*NonceResp)(nil),                                     // 32: aggregator.NonceResp
	(*ListWalletReq)(nil),                                 // 33: aggregator.ListWalletReq
	(*SmartWallet)(nil),                                   // 34: aggregator.SmartWallet
	(*ListWalletResp)(nil),                                // 35: aggregator.ListWalletResp
	(*ListTasksReq)(nil),                                  // 36: aggregator.ListTasksReq
	(*ListTasksResp)(nil),                                 // 37: aggregator.ListTasksResp
	(*ListExecutionsReq)(nil),                             // 38: aggregator.ListExecutionsReq
	(*ListExecutionsResp)(nil),                            // 39: aggregator.ListExecutionsResp
	(*ExecutionReq)(nil),                                  // 40: aggregator.ExecutionReq
	(*ExecutionStatusResp)(nil),                           // 41: aggregator.ExecutionStatusResp
	(*GetKeyReq)(nil),                                     // 42: aggregator.GetKeyReq
	(*KeyResp)(nil),                                       // 43: aggregator.KeyResp
	(*GetWalletReq)(nil),                                  // 44: aggregator.GetWalletReq
	(*GetWalletResp)(nil),                                 // 45: aggregator.GetWalletResp
	(*SetWalletReq)(nil),                                  // 46: aggregator.SetWalletReq
	(*TriggerTaskReq)(nil),                                // 47: aggregator.TriggerTaskReq
	(*TriggerTaskResp)(nil),                               // 48: aggregator.TriggerTaskResp
	(*CreateOrUpdateSecretReq)(nil),                       // 49: aggregator.CreateOrUpdateSecretReq
	(*ListSecretsReq)(nil),                                // 50: aggregator.ListSecretsReq
	(*PageInfo)(nil),                                      // 51: aggregator.PageInfo
	(*Secret)(nil),                                        // 52: aggregator.Secret
	(*ListSecretsResp)(nil),                               // 53: aggregator.ListSecretsResp
	(*DeleteSecretReq)(nil),                               // 54: aggregator.DeleteSecretReq
	(*GetSignatureFormatReq)(nil),                         // 55: aggregator.GetSignatureFormatReq
	(*GetSignatureFormatResp)(nil),                        // 56: aggregator.GetSignatureFormatResp
	(*GetWorkflowCountReq)(nil),                           // 57: aggregator.GetWorkflowCountReq
	(*GetWorkflowCountResp)(nil),                          // 58: aggregator.GetWorkflowCountResp
	(*GetExecutionCountReq)(nil),                          // 59: aggregator.GetExecutionCountReq
	(*GetExecutionCountResp)(nil),                         // 60: aggregator.GetExecutionCountResp
	(*GetExecutionStatsReq)(nil),                          // 61: aggregator.GetExecutionStatsReq
	(*GetExecutionStatsResp)(nil),                         // 62: aggregator.GetExecutionStatsResp
	(*RunNodeWithInputsReq)(nil),                          // 63: aggregator.RunNodeWithInputsReq
	(*RunNodeWithInputsResp)(nil),                         // 64: aggregator.RunNodeWithInputsResp
	(*RunTriggerReq)(nil),                                 // 65: aggregator.RunTriggerReq
	(*RunTriggerResp)(nil),                                // 66: aggregator.RunTriggerResp
	(*Evm)(nil),                                           // 67: aggregator.Evm
	(*SimulateTaskReq)(nil),                               // 68: aggregator.SimulateTaskReq
	(*EventCondition)(nil),                                // 69: aggregator.EventCondition
	(*FixedTimeTrigger_Config)(nil),                       // 70: aggregator.FixedTimeTrigger.Config
	(*FixedTimeTrigger_Output)(nil),                       // 71: aggregator.FixedTimeTrigger.Output
	(*CronTrigger_Config)(nil),                            // 72: aggregator.CronTrigger.Config
	(*CronTrigger_Output)(nil),                            // 73: aggregator.CronTrigger.Output
	(*BlockTrigger_Config)(nil),                           // 74: aggregator.BlockTrigger.Config
	(*BlockTrigger_Output)(nil),                           // 75: aggregator.BlockTrigger.Output
	(*EventTrigger_Query)(nil),                            // 76: aggregator.EventTrigger.Query
	(*EventTrigger_Topics)(nil),                           // 77: aggregator.EventTrigger.Topics
	(*EventTrigger_Config)(nil),                           // 78: aggregator.EventTrigger.Config
	(*EventTrigger_Output)(nil),                           // 79: aggregator.EventTrigger.Output
	(*EventTrigger_TransferLogOutput)(nil),                // 80: aggregator.EventTrigger.TransferLogOutput
	(*ManualTrigger_Config)(nil),                          // 81: aggregator.ManualTrigger.Config
	(*ManualTrigger_Output)(nil),                          // 82: aggregator.ManualTrigger.Output
	(*ETHTransferNode_Config)(nil),                        // 83: aggregator.ETHTransferNode.Config
	(*ETHTransferNode_Output)(nil),                        // 84: aggregator.ETHTransferNode.Output
	(*ContractWriteNode_Config)(nil),                      // 85: aggregator.ContractWriteNode.Config
	(*ContractWriteNode_MethodCall)(nil),                  // 86: aggregator.ContractWriteNode.MethodCall
	(*ContractWriteNode_Output)(nil),                      // 87: aggregator.ContractWriteNode.Output
	(*ContractWriteNode_MethodResult)(nil),                // 88: aggregator.ContractWriteNode.MethodResult
	(*ContractWriteNode_TransactionData)(nil),             // 89: aggregator.ContractWriteNode.TransactionData
	(*ContractWriteNode_EventData)(nil),                   // 90: aggregator.ContractWriteNode.EventData
	(*ContractWriteNode_ErrorData)(nil),                   // 91: aggregator.ContractWriteNode.ErrorData
	(*ContractWriteNode_ReturnData)(nil),                  // 92: aggregator.ContractWriteNode.ReturnData
	nil,                                                   // 93: aggregator.ContractWriteNode.EventData.DecodedEntry
	(*ContractReadNode_MethodCall)(nil),                   // 94: aggregator.ContractReadNode.MethodCall
	(*ContractReadNode_Config)(nil),                       // 95: aggregator.ContractReadNode.Config
	(*ContractReadNode_MethodResult)(nil),                 // 96: aggregator.ContractReadNode.MethodResult
	(*ContractReadNode_Output)(nil),                       // 97: aggregator.ContractReadNode.Output
	(*ContractReadNode_MethodResult_StructuredField)(nil), // 98: aggregator.ContractReadNode.MethodResult.StructuredField
	(*GraphQLQueryNode_Config)(nil),                       // 99: aggregator.GraphQLQueryNode.Config
	(*GraphQLQueryNode_Output)(nil),                       // 100: aggregator.GraphQLQueryNode.Output
	nil,                                                   // 101: aggregator.GraphQLQueryNode.Config.VariablesEntry
	(*RestAPINode_Config)(nil),                            // 102: aggregator.RestAPINode.Config
	(*RestAPINode_Output)(nil),                            // 103: aggregator.RestAPINode.Output
	nil,                                                   // 104: aggregator.RestAPINode.Config.HeadersEntry
	(*CustomCodeNode_Config)(nil),                         // 105: aggregator.CustomCodeNode.Config
	(*CustomCodeNode_Output)(nil),                         // 106: aggregator.CustomCodeNode.Output
	(*BranchNode_Condition)(nil),                          // 107: aggregator.BranchNode.Condition
	(*BranchNode_Config)(nil),                             // 108: aggregator.BranchNode.Config
	(*BranchNode_Output)(nil),                             // 109: aggregator.BranchNode.Output
	(*FilterNode_Config)(nil),                             // 110: aggregator.FilterNode.Config
	(*FilterNode_Output)(nil),                             // 111: aggregator.FilterNode.Output
	(*LoopNode_Config)(nil),                               // 112: aggregator.LoopNode.Config
	(*LoopNode_Output)(nil),                               // 113: aggregator.LoopNode.Output
	(*Execution_Step)(nil),                                // 114: aggregator.Execution.Step
	nil,                                                   // 115: aggregator.RunNodeWithInputsReq.NodeConfigEntry
	nil,                                                   // 116: aggregator.RunNodeWithInputsReq.InputVariablesEntry
	nil,                                                   // 117: aggregator.RunTriggerReq.TriggerConfigEntry
	nil,                                                   // 118: aggregator.RunTriggerReq.TriggerInputEntry
	(*Evm_Log)(nil),                                       // 119: aggregator.Evm.Log
	(*Evm_TransactionReceipt)(nil),                        // 120: aggregator.Evm.TransactionReceipt
	(*Evm_UserOp)(nil),                                    // 121: aggregator.Evm.UserOp
	nil,                                                   // 122: aggregator.SimulateTaskReq.InputVariablesEntry
	(*structpb.Value)(nil),                                // 123: google.protobuf.Value
	(*anypb.Any)(nil),                                     // 124: google.protobuf.Any
	(*wrapperspb.BoolValue)(nil),                          // 125: google.protobuf.BoolValue
}
var file_avs_proto_depIdxs = []int32{
	6,   // 0: aggregator.GetTokenMetadataResp.token:type_name -> aggregator.TokenMetadata
	70,  // 1: aggregator.FixedTimeTrigger.config:type_name -> aggregator.FixedTimeTrigger.Config
	123, // 2: aggregator.FixedTimeTrigger.input:type_name -> google.protobuf.Value
	72,  // 3: aggregator.CronTrigger.config:type_name -> aggregator.CronTrigger.Config
	123, // 4: aggregator.CronTrigger.input:type_name -> google.protobuf.Value
	74,  // 5: aggregator.BlockTrigger.config:type_name -> aggregator.BlockTrigger.Config
	123, // 6: aggregator.BlockTrigger.input:type_name -> google.protobuf.Value
	78,  // 7: aggregator.EventTrigger.config:type_name -> aggregator.EventTrigger.Config
	123, // 8: aggregator.EventTrigger.input:type_name -> google.protobuf.Value
	81,  // 9: aggregator.ManualTrigger.config:type_name -> aggregator.ManualTrigger.Config
	123, // 10: aggregator.ManualTrigger.input:type_name -> google.protobuf.Value
	0,   // 11: aggregator.TaskTrigger.type:type_name -> aggregator.TriggerType
	10,  // 12: aggregator.TaskTrigger.fixed_time:type_name -> aggregator.FixedTimeTrigger
	11,  // 13: aggregator.TaskTrigger.cron:type_name -> aggregator.CronTrigger
	12,  // 14: aggregator.TaskTrigger.block:type_name -> aggregator.BlockTrigger
	13,  // 15: aggregator.TaskTrigger.event:type_name -> aggregator.EventTrigger
	123, // 16: aggregator.TaskTrigger.input:type_name -> google.protobuf.Value
	83,  // 17: aggregator.ETHTransferNode.config:type_name -> aggregator.ETHTransferNode.Config
	123, // 18: aggregator.ETHTransferNode.input:type_name -> google.protobuf.Value
	85,  // 19: aggregator.ContractWriteNode.config:type_name -> aggregator.ContractWriteNode.Config
	123, // 20: aggregator.ContractWriteNode.input:type_name -> google.protobuf.Value
	95,  // 21: aggregator.ContractReadNode.config:type_name -> aggregator.ContractReadNode.Config
	123, // 22: aggregator.ContractReadNode.input:type_name -> google.protobuf.Value
	99,  // 23: aggregator.GraphQLQueryNode.config:type_name -> aggregator.GraphQLQueryNode.Config
	123, // 24: aggregator.GraphQLQueryNode.input:type_name -> google.protobuf.Value
	102, // 25: aggregator.RestAPINode.config:type_name -> aggregator.RestAPINode.Config
	123, // 26: aggregator.RestAPINode.input:type_name -> google.protobuf.Value
	105, // 27: aggregator.CustomCodeNode.config:type_name -> aggregator.CustomCodeNode.Config
	123, // 28: aggregator.CustomCodeNode.input:type_name -> google.protobuf.Value
	108, // 29: aggregator.BranchNode.config:type_name -> aggregator.BranchNode.Config
	123, // 30: aggregator.BranchNode.input:type_name -> google.protobuf.Value
	110, // 31: aggregator.FilterNode.config:type_name -> aggregator.FilterNode.Config
	123, // 32: aggregator.FilterNode.input:type_name -> google.protobuf.Value
	16,  // 33: aggregator.LoopNode.eth_transfer:type_name -> aggregator.ETHTransferNode
	17,  // 34: aggregator.LoopNode.contract_write:type_name -> aggregator.ContractWriteNode
	18,  // 35: aggregator.LoopNode.contract_read:type_name -> aggregator.ContractReadNode
	19,  // 36: aggregator.LoopNode.graphql_data_query:type_name -> aggregator.GraphQLQueryNode
	20,  // 37: aggregator.LoopNode.rest_api:type_name -> aggregator.RestAPINode
	21,  // 38: aggregator.LoopNode.custom_code:type_name -> aggregator.CustomCodeNode
	112, // 39: aggregator.LoopNode.config:type_name -> aggregator.LoopNode.Config
	123, // 40: aggregator.LoopNode.input:type_name -> google.protobuf.Value
	1,   // 41: aggregator.TaskNode.type:type_name -> aggregator.NodeType
	16,  // 42: aggregator.TaskNode.eth_transfer:type_name -> aggregator.ETHTransferNode
	17,  // 43: aggregator.TaskNode.contract_write:type_name -> aggregator.ContractWriteNode
	18,  // 44: aggregator.TaskNode.contract_read:type_name -> aggregator.ContractReadNode
	19,  // 45: aggregator.TaskNode.graphql_query:type_name -> aggregator.GraphQLQueryNode
	20,  // 46: aggregator.TaskNode.rest_api:type_name -> aggregator.RestAPINode
	22,  // 47: aggregator.TaskNode.branch:type_name -> aggregator.BranchNode
	23,  // 48: aggregator.TaskNode.filter:type_name -> aggregator.FilterNode
	24,  // 49: aggregator.TaskNode.loop:type_name -> aggregator.LoopNode
	21,  // 50: aggregator.TaskNode.custom_code:type_name -> aggregator.CustomCodeNode
	123, // 51: aggregator.TaskNode.input:type_name -> google.protobuf.Value
	114, // 52: aggregator.Execution.steps:type_name -> aggregator.Execution.Step
	4,   // 53: aggregator.Task.status:type_name -> aggregator.TaskStatus
	15,  // 54: aggregator.Task.trigger:type_name -> aggregator.TaskTrigger
	26,  // 55: aggregator.Task.nodes:type_name -> aggregator.TaskNode
	25,  // 56: aggregator.Task.edges:type_name -> aggregator.TaskEdge
	15,  // 57: aggregator.CreateTaskReq.trigger:type_name -> aggregator.TaskTrigger
	26,  // 58: aggregator.CreateTaskReq.nodes:type_name -> aggregator.TaskNode
	25,  // 59: aggregator.CreateTaskReq.edges:type_name -> aggregator.TaskEdge
	34,  // 60: aggregator.ListWalletResp.items:type_name -> aggregator.SmartWallet
	28,  // 61: aggregator.ListTasksResp.items:type_name -> aggregator.Task
	51,  // 62: aggregator.ListTasksResp.page_info:type_name -> aggregator.PageInfo
	27,  // 63: aggregator.ListExecutionsResp.items:type_name -> aggregator.Execution
	51,  // 64: aggregator.ListExecutionsResp.page_info:type_name -> aggregator.PageInfo
	5,   // 65: aggregator.ExecutionStatusResp.status:type_name -> aggregator.ExecutionStatus
	0,   // 66: aggregator.TriggerTaskReq.trigger_type:type_name -> aggregator.TriggerType
	75,  // 67: aggregator.TriggerTaskReq.block_trigger:type_name -> aggregator.BlockTrigger.Output
	71,  // 68: aggregator.TriggerTaskReq.fixed_time_trigger:type_name -> aggregator.FixedTimeTrigger.Output
	73,  // 69: aggregator.TriggerTaskReq.cron_trigger:type_name -> aggregator.CronTrigger.Output
	79,  // 70: aggregator.TriggerTaskReq.event_trigger:type_name -> aggregator.EventTrigger.Output
	82,  // 71: aggregator.TriggerTaskReq.manual_trigger:type_name -> aggregator.ManualTrigger.Output
	5,   // 72: aggregator.TriggerTaskResp.status:type_name -> aggregator.ExecutionStatus
	52,  // 73: aggregator.ListSecretsResp.items:type_name -> aggregator.Secret
	51,  // 74: aggregator.ListSecretsResp.page_info:type_name -> aggregator.PageInfo
	1,   // 75: aggregator.RunNodeWithInputsReq.node_type:type_name -> aggregator.NodeType
	115, // 76: aggregator.RunNodeWithInputsReq.node_config:type_name -> aggregator.RunNodeWithInputsReq.NodeConfigEntry
	116, // 77: aggregator.RunNodeWithInputsReq.input_variables:type_name -> aggregator.RunNodeWithInputsReq.InputVariablesEntry
	84,  // 78: aggregator.RunNodeWithInputsResp.eth_transfer:type_name -> aggregator.ETHTransferNode.Output
	100, // 79: aggregator.RunNodeWithInputsResp.graphql:type_name -> aggregator.GraphQLQueryNode.Output
	97,  // 80: aggregator.RunNodeWithInputsResp.contract_read:type_name -> aggregator.ContractReadNode.Output
	87,  // 81: aggregator.RunNodeWithInputsResp.contract_write:type_name -> aggregator.ContractWriteNode.Output
	106, // 82: aggregator.RunNodeWithInputsResp.custom_code:type_name -> aggregator.CustomCodeNode.Output
	103, // 83: aggregator.RunNodeWithInputsResp.rest_api:type_name -> aggregator.RestAPINode.Output
	109, // 84: aggregator.RunNodeWithInputsResp.branch:type_name -> aggregator.BranchNode.Output
	111, // 85: aggregator.RunNodeWithInputsResp.filter:type_name -> aggregator.FilterNode.Output
	113, // 86: aggregator.RunNodeWithInputsResp.loop:type_name -> aggregator.LoopNode.Output
	0,   // 87: aggregator.RunTriggerReq.trigger_type:type_name -> aggregator.TriggerType
	117, // 88: aggregator.RunTriggerReq.trigger_config:type_name -> aggregator.RunTriggerReq.TriggerConfigEntry
	118, // 89: aggregator.RunTriggerReq.trigger_input:type_name -> aggregator.RunTriggerReq.TriggerInputEntry
	75,  // 90: aggregator.RunTriggerResp.block_trigger:type_name -> aggregator.BlockTrigger.Output
	71,  // 91: aggregator.RunTriggerResp.fixed_time_trigger:type_name -> aggregator.FixedTimeTrigger.Output
	73,  // 92: aggregator.RunTriggerResp.cron_trigger:type_name -> aggregator.CronTrigger.Output
	79,  // 93: aggregator.RunTriggerResp.event_trigger:type_name -> aggregator.EventTrigger.Output
	82,  // 94: aggregator.RunTriggerResp.manual_trigger:type_name -> aggregator.ManualTrigger.Output
	15,  // 95: aggregator.SimulateTaskReq.trigger:type_name -> aggregator.TaskTrigger
	26,  // 96: aggregator.SimulateTaskReq.nodes:type_name -> aggregator.TaskNode
	25,  // 97: aggregator.SimulateTaskReq.edges:type_name -> aggregator.TaskEdge
	122, // 98: aggregator.SimulateTaskReq.input_variables:type_name -> aggregator.SimulateTaskReq.InputVariablesEntry
	77,  // 99: aggregator.EventTrigger.Query.topics:type_name -> aggregator.EventTrigger.Topics
	69,  // 100: aggregator.EventTrigger.Query.conditions:type_name -> aggregator.EventCondition
	76,  // 101: aggregator.EventTrigger.Config.queries:type_name -> aggregator.EventTrigger.Query
	119, // 102: aggregator.EventTrigger.Output.evm_log:type_name -> aggregator.Evm.Log
	80,  // 103: aggregator.EventTrigger.Output.transfer_log:type_name -> aggregator.EventTrigger.TransferLogOutput
	86,  // 104: aggregator.ContractWriteNode.Config.method_calls:type_name -> aggregator.ContractWriteNode.MethodCall
	88,  // 105: aggregator.ContractWriteNode.Output.results:type_name -> aggregator.ContractWriteNode.MethodResult
	89,  // 106: aggregator.ContractWriteNode.MethodResult.transaction:type_name -> aggregator.ContractWriteNode.TransactionData
	90,  // 107: aggregator.ContractWriteNode.MethodResult.events:type_name -> aggregator.ContractWriteNode.EventData
	91,  // 108: aggregator.ContractWriteNode.MethodResult.error:type_name -> aggregator.ContractWriteNode.ErrorData
	92,  // 109: aggregator.ContractWriteNode.MethodResult.return_data:type_name -> aggregator.ContractWriteNode.ReturnData
	93,  // 110: aggregator.ContractWriteNode.EventData.decoded:type_name -> aggregator.ContractWriteNode.EventData.DecodedEntry
	94,  // 111: aggregator.ContractReadNode.Config.method_calls:type_name -> aggregator.ContractReadNode.MethodCall
	98,  // 112: aggregator.ContractReadNode.MethodResult.data:type_name -> aggregator.ContractReadNode.MethodResult.StructuredField
	96,  // 113: aggregator.ContractReadNode.Output.results:type_name -> aggregator.ContractReadNode.MethodResult
	101, // 114: aggregator.GraphQLQueryNode.Config.variables:type_name -> aggregator.GraphQLQueryNode.Config.VariablesEntry
	124, // 115: aggregator.GraphQLQueryNode.Output.data:type_name -> google.protobuf.Any
	104, // 116: aggregator.RestAPINode.Config.headers:type_name -> aggregator.RestAPINode.Config.HeadersEntry
	123, // 117: aggregator.RestAPINode.Output.data:type_name -> google.protobuf.Value
	2,   // 118: aggregator.CustomCodeNode.Config.lang:type_name -> aggregator.Lang
	123, // 119: aggregator.CustomCodeNode.Output.data:type_name -> google.protobuf.Value
	107, // 120: aggregator.BranchNode.Config.conditions:type_name -> aggregator.BranchNode.Condition
	124, // 121: aggregator.FilterNode.Output.data:type_name -> google.protobuf.Any
	123, // 122: aggregator.Execution.Step.input:type_name -> google.protobuf.Value
	75,  // 123: aggregator.Execution.Step.block_trigger:type_name -> aggregator.BlockTrigger.Output
	71,  // 124: aggregator.Execution.Step.fixed_time_trigger:type_name -> aggregator.FixedTimeTrigger.Output
	73,  // 125: aggregator.Execution.Step.cron_trigger:type_name -> aggregator.CronTrigger.Output
	79,  // 126: aggregator.Execution.Step.event_trigger:type_name -> aggregator.EventTrigger.Output
	82,  // 127: aggregator.Execution.Step.manual_trigger:type_name -> aggregator.ManualTrigger.Output
	84,  // 128: aggregator.Execution.Step.eth_transfer:type_name -> aggregator.ETHTransferNode.Output
	100, // 129: aggregator.Execution.Step.graphql:type_name -> aggregator.GraphQLQueryNode.Output
	97,  // 130: aggregator.Execution.Step.contract_read:type_name -> aggregator.ContractReadNode.Output
	87,  // 131: aggregator.Execution.Step.contract_write:type_name -> aggregator.ContractWriteNode.Output
	106, // 132: aggregator.Execution.Step.custom_code:type_name -> aggregator.CustomCodeNode.Output
	103, // 133: aggregator.Execution.Step.rest_api:type_name -> aggregator.RestAPINode.Output
	109, // 134: aggregator.Execution.Step.branch:type_name -> aggregator.BranchNode.Output
	111, // 135: aggregator.Execution.Step.filter:type_name -> aggregator.FilterNode.Output
	113, // 136: aggregator.Execution.Step.loop:type_name -> aggregator.LoopNode.Output
	123, // 137: aggregator.RunNodeWithInputsReq.NodeConfigEntry.value:type_name -> google.protobuf.Value
	123, // 138: aggregator.RunNodeWithInputsReq.InputVariablesEntry.value:type_name -> google.protobuf.Value
	123, // 139: aggregator.RunTriggerReq.TriggerConfigEntry.value:type_name -> google.protobuf.Value
	123, // 140: aggregator.RunTriggerReq.TriggerInputEntry.value:type_name -> google.protobuf.Value
	123, // 141: aggregator.SimulateTaskReq.InputVariablesEntry.value:type_name -> google.protobuf.Value
	42,  // 142: aggregator.Aggregator.GetKey:input_type -> aggregator.GetKeyReq
	55,  // 143: aggregator.Aggregator.GetSignatureFormat:input_type -> aggregator.GetSignatureFormatReq
	31,  // 144: aggregator.Aggregator.GetNonce:input_type -> aggregator.NonceRequest
	44,  // 145: aggregator.Aggregator.GetWallet:input_type -> aggregator.GetWalletReq
	46,  // 146: aggregator.Aggregator.SetWallet:input_type -> aggregator.SetWalletReq
	33,  // 147: aggregator.Aggregator.ListWallets:input_type -> aggregator.ListWalletReq
	29,  // 148: aggregator.Aggregator.CreateTask:input_type -> aggregator.CreateTaskReq
	36,  // 149: aggregator.Aggregator.ListTasks:input_type -> aggregator.ListTasksReq
	9,   // 150: aggregator.Aggregator.GetTask:input_type -> aggregator.IdReq
	38,  // 151: aggregator.Aggregator.ListExecutions:input_type -> aggregator.ListExecutionsReq
	40,  // 152: aggregator.Aggregator.GetExecution:input_type -> aggregator.ExecutionReq
	40,  // 153: aggregator.Aggregator.GetExecutionStatus:input_type -> aggregator.ExecutionReq
	9,   // 154: aggregator.Aggregator.CancelTask:input_type -> aggregator.IdReq
	9,   // 155: aggregator.Aggregator.DeleteTask:input_type -> aggregator.IdReq
	47,  // 156: aggregator.Aggregator.TriggerTask:input_type -> aggregator.TriggerTaskReq
	49,  // 157: aggregator.Aggregator.CreateSecret:input_type -> aggregator.CreateOrUpdateSecretReq
	54,  // 158: aggregator.Aggregator.DeleteSecret:input_type -> aggregator.DeleteSecretReq
	50,  // 159: aggregator.Aggregator.ListSecrets:input_type -> aggregator.ListSecretsReq
	49,  // 160: aggregator.Aggregator.UpdateSecret:input_type -> aggregator.CreateOrUpdateSecretReq
	57,  // 161: aggregator.Aggregator.GetWorkflowCount:input_type -> aggregator.GetWorkflowCountReq
	59,  // 162: aggregator.Aggregator.GetExecutionCount:input_type -> aggregator.GetExecutionCountReq
	61,  // 163: aggregator.Aggregator.GetExecutionStats:input_type -> aggregator.GetExecutionStatsReq
	63,  // 164: aggregator.Aggregator.RunNodeWithInputs:input_type -> aggregator.RunNodeWithInputsReq
	65,  // 165: aggregator.Aggregator.RunTrigger:input_type -> aggregator.RunTriggerReq
	68,  // 166: aggregator.Aggregator.SimulateTask:input_type -> aggregator.SimulateTaskReq
	7,   // 167: aggregator.Aggregator.GetTokenMetadata:input_type -> aggregator.GetTokenMetadataReq
	43,  // 168: aggregator.Aggregator.GetKey:output_type -> aggregator.KeyResp
	56,  // 169: aggregator.Aggregator.GetSignatureFormat:output_type -> aggregator.GetSignatureFormatResp
	32,  // 170: aggregator.Aggregator.GetNonce:output_type -> aggregator.NonceResp
	45,  // 171: aggregator.Aggregator.GetWallet:output_type -> aggregator.GetWalletResp
	45,  // 172: aggregator.Aggregator.SetWallet:output_type -> aggregator.GetWalletResp
	35,  // 173: aggregator.Aggregator.ListWallets:output_type -> aggregator.ListWalletResp
	30,  // 174: aggregator.Aggregator.CreateTask:output_type -> aggregator.CreateTaskResp
	37,  // 175: aggregator.Aggregator.ListTasks:output_type -> aggregator.ListTasksResp
	28,  // 176: aggregator.Aggregator.GetTask:output_type -> aggregator.Task
	39,  // 177: aggregator.Aggregator.ListExecutions:output_type -> aggregator.ListExecutionsResp
	27,  // 178: aggregator.Aggregator.GetExecution:output_type -> aggregator.Execution
	41,  // 179: aggregator.Aggregator.GetExecutionStatus:output_type -> aggregator.ExecutionStatusResp
	125, // 180: aggregator.Aggregator.CancelTask:output_type -> google.protobuf.BoolValue
	125, // 181: aggregator.Aggregator.DeleteTask:output_type -> google.protobuf.BoolValue
	48,  // 182: aggregator.Aggregator.TriggerTask:output_type -> aggregator.TriggerTaskResp
	125, // 183: aggregator.Aggregator.CreateSecret:output_type -> google.protobuf.BoolValue
	125, // 184: aggregator.Aggregator.DeleteSecret:output_type -> google.protobuf.BoolValue
	53,  // 185: aggregator.Aggregator.ListSecrets:output_type -> aggregator.ListSecretsResp
	125, // 186: aggregator.Aggregator.UpdateSecret:output_type -> google.protobuf.BoolValue
	58,  // 187: aggregator.Aggregator.GetWorkflowCount:output_type -> aggregator.GetWorkflowCountResp
	60,  // 188: aggregator.Aggregator.GetExecutionCount:output_type -> aggregator.GetExecutionCountResp
	62,  // 189: aggregator.Aggregator.GetExecutionStats:output_type -> aggregator.GetExecutionStatsResp
	64,  // 190: aggregator.Aggregator.RunNodeWithInputs:output_type -> aggregator.RunNodeWithInputsResp
	66,  // 191: aggregator.Aggregator.RunTrigger:output_type -> aggregator.RunTriggerResp
	27,  // 192: aggregator.Aggregator.SimulateTask:output_type -> aggregator.Execution
	8,   // 193: aggregator.Aggregator.GetTokenMetadata:output_type -> aggregator.GetTokenMetadataResp
	168, // [168:194] is the sub-list for method output_type
	142, // [142:168] is the sub-list for method input_type
	142, // [142:142] is the sub-list for extension type_name
	142, // [142:142] is the sub-list for extension extendee
	0,   // [0:142] is the sub-list for field type_name
}

func init() { file_avs_proto_init() }
func file_avs_proto_init() {
	if File_avs_proto != nil {
		return
	}
	file_avs_proto_msgTypes[9].OneofWrappers = []any{
		(*TaskTrigger_Manual)(nil),
		(*TaskTrigger_FixedTime)(nil),
		(*TaskTrigger_Cron)(nil),
		(*TaskTrigger_Block)(nil),
		(*TaskTrigger_Event)(nil),
	}
	file_avs_proto_msgTypes[18].OneofWrappers = []any{
		(*LoopNode_EthTransfer)(nil),
		(*LoopNode_ContractWrite)(nil),
		(*LoopNode_ContractRead)(nil),
		(*LoopNode_GraphqlDataQuery)(nil),
		(*LoopNode_RestApi)(nil),
		(*LoopNode_CustomCode)(nil),
	}
	file_avs_proto_msgTypes[20].OneofWrappers = []any{
		(*TaskNode_EthTransfer)(nil),
		(*TaskNode_ContractWrite)(nil),
		(*TaskNode_ContractRead)(nil),
		(*TaskNode_GraphqlQuery)(nil),
		(*TaskNode_RestApi)(nil),
		(*TaskNode_Branch)(nil),
		(*TaskNode_Filter)(nil),
		(*TaskNode_Loop)(nil),
		(*TaskNode_CustomCode)(nil),
	}
	file_avs_proto_msgTypes[41].OneofWrappers = []any{
		(*TriggerTaskReq_BlockTrigger)(nil),
		(*TriggerTaskReq_FixedTimeTrigger)(nil),
		(*TriggerTaskReq_CronTrigger)(nil),
		(*TriggerTaskReq_EventTrigger)(nil),
		(*TriggerTaskReq_ManualTrigger)(nil),
	}
	file_avs_proto_msgTypes[58].OneofWrappers = []any{
		(*RunNodeWithInputsResp_EthTransfer)(nil),
		(*RunNodeWithInputsResp_Graphql)(nil),
		(*RunNodeWithInputsResp_ContractRead)(nil),
		(*RunNodeWithInputsResp_ContractWrite)(nil),
		(*RunNodeWithInputsResp_CustomCode)(nil),
		(*RunNodeWithInputsResp_RestApi)(nil),
		(*RunNodeWithInputsResp_Branch)(nil),
		(*RunNodeWithInputsResp_Filter)(nil),
		(*RunNodeWithInputsResp_Loop)(nil),
	}
	file_avs_proto_msgTypes[60].OneofWrappers = []any{
		(*RunTriggerResp_BlockTrigger)(nil),
		(*RunTriggerResp_FixedTimeTrigger)(nil),
		(*RunTriggerResp_CronTrigger)(nil),
		(*RunTriggerResp_EventTrigger)(nil),
		(*RunTriggerResp_ManualTrigger)(nil),
	}
	file_avs_proto_msgTypes[70].OneofWrappers = []any{}
	file_avs_proto_msgTypes[73].OneofWrappers = []any{
		(*EventTrigger_Output_EvmLog)(nil),
		(*EventTrigger_Output_TransferLog)(nil),
	}
	file_avs_proto_msgTypes[108].OneofWrappers = []any{
		(*Execution_Step_BlockTrigger)(nil),
		(*Execution_Step_FixedTimeTrigger)(nil),
		(*Execution_Step_CronTrigger)(nil),
		(*Execution_Step_EventTrigger)(nil),
		(*Execution_Step_ManualTrigger)(nil),
		(*Execution_Step_EthTransfer)(nil),
		(*Execution_Step_Graphql)(nil),
		(*Execution_Step_ContractRead)(nil),
		(*Execution_Step_ContractWrite)(nil),
		(*Execution_Step_CustomCode)(nil),
		(*Execution_Step_RestApi)(nil),
		(*Execution_Step_Branch)(nil),
		(*Execution_Step_Filter)(nil),
		(*Execution_Step_Loop)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_avs_proto_rawDesc), len(file_avs_proto_rawDesc)),
			NumEnums:      6,
			NumMessages:   117,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_avs_proto_goTypes,
		DependencyIndexes: file_avs_proto_depIdxs,
		EnumInfos:         file_avs_proto_enumTypes,
		MessageInfos:      file_avs_proto_msgTypes,
	}.Build()
	File_avs_proto = out.File
	file_avs_proto_goTypes = nil
	file_avs_proto_depIdxs = nil
}
