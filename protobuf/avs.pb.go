// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.29.3
// source: protobuf/avs.proto

package avsproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// gRPC internal error code use up to 17, we extend and start from 1000 to avoid any conflict
// Guide: https://grpc.io/docs/guides/error/
// Go: https://github.com/grpc/grpc-go/blob/master/codes/codes.go#L199
type Error int32

const (
	// An error that happen when the app can be recovered but the cause is unknow, rarely use, we try to use specific error as much as we can
	Error_UnknowError Error = 0
	// internal rpc node error
	Error_RpcNodeError Error = 1000
	// storage system isn't available to respond to query
	Error_StorageUnavailable Error = 2000
	Error_StorageWriteError  Error = 2001
	// target chain of smart wallet is error and cannot used to determine smartwallet info
	Error_SmartWalletRpcError      Error = 6000
	Error_SmartWalletNotFoundError Error = 6001
	// Error occurs when we failed to migrate task data and it cannot be decode
	Error_TaskDataCorrupted    Error = 7000
	Error_TaskDataMissingError Error = 7001
	// Trigger Task failed
	Error_TaskTriggerError Error = 7003
)

// Enum value maps for Error.
var (
	Error_name = map[int32]string{
		0:    "UnknowError",
		1000: "RpcNodeError",
		2000: "StorageUnavailable",
		2001: "StorageWriteError",
		6000: "SmartWalletRpcError",
		6001: "SmartWalletNotFoundError",
		7000: "TaskDataCorrupted",
		7001: "TaskDataMissingError",
		7003: "TaskTriggerError",
	}
	Error_value = map[string]int32{
		"UnknowError":              0,
		"RpcNodeError":             1000,
		"StorageUnavailable":       2000,
		"StorageWriteError":        2001,
		"SmartWalletRpcError":      6000,
		"SmartWalletNotFoundError": 6001,
		"TaskDataCorrupted":        7000,
		"TaskDataMissingError":     7001,
		"TaskTriggerError":         7003,
	}
)

func (x Error) Enum() *Error {
	p := new(Error)
	*p = x
	return p
}

func (x Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Error) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_avs_proto_enumTypes[0].Descriptor()
}

func (Error) Type() protoreflect.EnumType {
	return &file_protobuf_avs_proto_enumTypes[0]
}

func (x Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Error.Descriptor instead.
func (Error) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{0}
}

// TaskStatus represents status of the task. The transition is as follow
type TaskStatus int32

const (
	TaskStatus_Active TaskStatus = 0
	// Task is completd when it's reaching its max_execution or its expiration time
	TaskStatus_Completed TaskStatus = 1
	TaskStatus_Failed    TaskStatus = 2
	TaskStatus_Canceled  TaskStatus = 3
	TaskStatus_Executing TaskStatus = 4
)

// Enum value maps for TaskStatus.
var (
	TaskStatus_name = map[int32]string{
		0: "Active",
		1: "Completed",
		2: "Failed",
		3: "Canceled",
		4: "Executing",
	}
	TaskStatus_value = map[string]int32{
		"Active":    0,
		"Completed": 1,
		"Failed":    2,
		"Canceled":  3,
		"Executing": 4,
	}
)

func (x TaskStatus) Enum() *TaskStatus {
	p := new(TaskStatus)
	*p = x
	return p
}

func (x TaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_avs_proto_enumTypes[1].Descriptor()
}

func (TaskStatus) Type() protoreflect.EnumType {
	return &file_protobuf_avs_proto_enumTypes[1]
}

func (x TaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatus.Descriptor instead.
func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{1}
}

// Execution Status re-present a run of the task
type ExecutionStatus int32

const (
	ExecutionStatus_Queued   ExecutionStatus = 0
	ExecutionStatus_Finished ExecutionStatus = 2
)

// Enum value maps for ExecutionStatus.
var (
	ExecutionStatus_name = map[int32]string{
		0: "Queued",
		2: "Finished",
	}
	ExecutionStatus_value = map[string]int32{
		"Queued":   0,
		"Finished": 2,
	}
)

func (x ExecutionStatus) Enum() *ExecutionStatus {
	p := new(ExecutionStatus)
	*p = x
	return p
}

func (x ExecutionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_avs_proto_enumTypes[2].Descriptor()
}

func (ExecutionStatus) Type() protoreflect.EnumType {
	return &file_protobuf_avs_proto_enumTypes[2]
}

func (x ExecutionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionStatus.Descriptor instead.
func (ExecutionStatus) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{2}
}

type CustomCodeLang int32

const (
	CustomCodeLang_JavaScript CustomCodeLang = 0
)

// Enum value maps for CustomCodeLang.
var (
	CustomCodeLang_name = map[int32]string{
		0: "JavaScript",
	}
	CustomCodeLang_value = map[string]int32{
		"JavaScript": 0,
	}
)

func (x CustomCodeLang) Enum() *CustomCodeLang {
	p := new(CustomCodeLang)
	*p = x
	return p
}

func (x CustomCodeLang) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CustomCodeLang) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_avs_proto_enumTypes[3].Descriptor()
}

func (CustomCodeLang) Type() protoreflect.EnumType {
	return &file_protobuf_avs_proto_enumTypes[3]
}

func (x CustomCodeLang) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CustomCodeLang.Descriptor instead.
func (CustomCodeLang) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{3}
}

// This value isn't needed because when we query an execution or trigger a task, we know the trigger type
// But, The JS SDK needed this value probabaly to saving the lookup time when it only have execution id somehow
// So we added this value to the respose for the client to consume and use however it want
// Internaly we don't make use of this field.
// The client was map the field based on the one-off field number so we need to match this number with TaskTrigger.trigger_type
type TriggerReason_TriggerType int32

const (
	TriggerReason_Unset     TriggerReason_TriggerType = 0
	TriggerReason_Manual    TriggerReason_TriggerType = 2
	TriggerReason_FixedTime TriggerReason_TriggerType = 3
	TriggerReason_Cron      TriggerReason_TriggerType = 4
	TriggerReason_Block     TriggerReason_TriggerType = 5
	TriggerReason_Event     TriggerReason_TriggerType = 6
)

// Enum value maps for TriggerReason_TriggerType.
var (
	TriggerReason_TriggerType_name = map[int32]string{
		0: "Unset",
		2: "Manual",
		3: "FixedTime",
		4: "Cron",
		5: "Block",
		6: "Event",
	}
	TriggerReason_TriggerType_value = map[string]int32{
		"Unset":     0,
		"Manual":    2,
		"FixedTime": 3,
		"Cron":      4,
		"Block":     5,
		"Event":     6,
	}
)

func (x TriggerReason_TriggerType) Enum() *TriggerReason_TriggerType {
	p := new(TriggerReason_TriggerType)
	*p = x
	return p
}

func (x TriggerReason_TriggerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriggerReason_TriggerType) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_avs_proto_enumTypes[4].Descriptor()
}

func (TriggerReason_TriggerType) Type() protoreflect.EnumType {
	return &file_protobuf_avs_proto_enumTypes[4]
}

func (x TriggerReason_TriggerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriggerReason_TriggerType.Descriptor instead.
func (TriggerReason_TriggerType) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{35, 0}
}

type IdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IdReq) Reset() {
	*x = IdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdReq) ProtoMessage() {}

func (x *IdReq) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdReq.ProtoReflect.Descriptor instead.
func (*IdReq) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{0}
}

func (x *IdReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type FixedTimeCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epochs []int64 `protobuf:"varint,1,rep,packed,name=epochs,proto3" json:"epochs,omitempty"`
}

func (x *FixedTimeCondition) Reset() {
	*x = FixedTimeCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixedTimeCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixedTimeCondition) ProtoMessage() {}

func (x *FixedTimeCondition) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixedTimeCondition.ProtoReflect.Descriptor instead.
func (*FixedTimeCondition) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{1}
}

func (x *FixedTimeCondition) GetEpochs() []int64 {
	if x != nil {
		return x.Epochs
	}
	return nil
}

// Simple timebase or cron syntax.
type CronCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schedule []string `protobuf:"bytes,1,rep,name=schedule,proto3" json:"schedule,omitempty"`
}

func (x *CronCondition) Reset() {
	*x = CronCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronCondition) ProtoMessage() {}

func (x *CronCondition) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronCondition.ProtoReflect.Descriptor instead.
func (*CronCondition) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{2}
}

func (x *CronCondition) GetSchedule() []string {
	if x != nil {
		return x.Schedule
	}
	return nil
}

type BlockCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval int64 `protobuf:"varint,1,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *BlockCondition) Reset() {
	*x = BlockCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockCondition) ProtoMessage() {}

func (x *BlockCondition) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockCondition.ProtoReflect.Descriptor instead.
func (*BlockCondition) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{3}
}

func (x *BlockCondition) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

// EventCondition is a filter to match on an event. It's adhoc logic expression re-present in an array to match an ethereum event
type EventCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// an array of filter to be mach, as soon as any element of the array mach, the trigger is fired.
	Matcher    []*EventCondition_Matcher `protobuf:"bytes,1,rep,name=matcher,proto3" json:"matcher,omitempty"`
	Expression string                    `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *EventCondition) Reset() {
	*x = EventCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventCondition) ProtoMessage() {}

func (x *EventCondition) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventCondition.ProtoReflect.Descriptor instead.
func (*EventCondition) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{4}
}

func (x *EventCondition) GetMatcher() []*EventCondition_Matcher {
	if x != nil {
		return x.Matcher
	}
	return nil
}

func (x *EventCondition) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

type TaskTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to TriggerType:
	//
	//	*TaskTrigger_Manual
	//	*TaskTrigger_FixedTime
	//	*TaskTrigger_Cron
	//	*TaskTrigger_Block
	//	*TaskTrigger_Event
	TriggerType isTaskTrigger_TriggerType `protobuf_oneof:"trigger_type"`
	Id          string                    `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TaskTrigger) Reset() {
	*x = TaskTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskTrigger) ProtoMessage() {}

func (x *TaskTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskTrigger.ProtoReflect.Descriptor instead.
func (*TaskTrigger) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{5}
}

func (x *TaskTrigger) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *TaskTrigger) GetTriggerType() isTaskTrigger_TriggerType {
	if m != nil {
		return m.TriggerType
	}
	return nil
}

func (x *TaskTrigger) GetManual() bool {
	if x, ok := x.GetTriggerType().(*TaskTrigger_Manual); ok {
		return x.Manual
	}
	return false
}

func (x *TaskTrigger) GetFixedTime() *FixedTimeCondition {
	if x, ok := x.GetTriggerType().(*TaskTrigger_FixedTime); ok {
		return x.FixedTime
	}
	return nil
}

func (x *TaskTrigger) GetCron() *CronCondition {
	if x, ok := x.GetTriggerType().(*TaskTrigger_Cron); ok {
		return x.Cron
	}
	return nil
}

func (x *TaskTrigger) GetBlock() *BlockCondition {
	if x, ok := x.GetTriggerType().(*TaskTrigger_Block); ok {
		return x.Block
	}
	return nil
}

func (x *TaskTrigger) GetEvent() *EventCondition {
	if x, ok := x.GetTriggerType().(*TaskTrigger_Event); ok {
		return x.Event
	}
	return nil
}

func (x *TaskTrigger) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type isTaskTrigger_TriggerType interface {
	isTaskTrigger_TriggerType()
}

type TaskTrigger_Manual struct {
	// manual task will not be check to be trigger, instead it can be trigger adhoc
	Manual bool `protobuf:"varint,2,opt,name=manual,proto3,oneof"`
}

type TaskTrigger_FixedTime struct {
	// run at a specific epoch, name inspired by unix `at` utility
	FixedTime *FixedTimeCondition `protobuf:"bytes,3,opt,name=fixed_time,json=fixedTime,proto3,oneof"`
}

type TaskTrigger_Cron struct {
	// interval such as every hour/day/ etc can be converted to cronsyntax by the sdk/studio
	Cron *CronCondition `protobuf:"bytes,4,opt,name=cron,proto3,oneof"`
}

type TaskTrigger_Block struct {
	// currently the only support syntax is every <x> blocks
	Block *BlockCondition `protobuf:"bytes,5,opt,name=block,proto3,oneof"`
}

type TaskTrigger_Event struct {
	// support filter by event expression such as topic0, topic1, topoc2 and event_data and contract_address
	Event *EventCondition `protobuf:"bytes,6,opt,name=event,proto3,oneof"`
}

func (*TaskTrigger_Manual) isTaskTrigger_TriggerType() {}

func (*TaskTrigger_FixedTime) isTaskTrigger_TriggerType() {}

func (*TaskTrigger_Cron) isTaskTrigger_TriggerType() {}

func (*TaskTrigger_Block) isTaskTrigger_TriggerType() {}

func (*TaskTrigger_Event) isTaskTrigger_TriggerType() {}

type ETHTransferNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destination string `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	Amount      string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *ETHTransferNode) Reset() {
	*x = ETHTransferNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ETHTransferNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ETHTransferNode) ProtoMessage() {}

func (x *ETHTransferNode) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ETHTransferNode.ProtoReflect.Descriptor instead.
func (*ETHTransferNode) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{6}
}

func (x *ETHTransferNode) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *ETHTransferNode) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type ContractWriteNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	CallData        string `protobuf:"bytes,2,opt,name=call_data,json=callData,proto3" json:"call_data,omitempty"`
	// The ABI is only required to decode the return value of a method call.
	// If we don't need the result and only want the transaction hash (which is usually sufficient),
	// then we don't need to provide the ABI.
	ContractAbi string `protobuf:"bytes,3,opt,name=contract_abi,json=contractAbi,proto3" json:"contract_abi,omitempty"`
}

func (x *ContractWriteNode) Reset() {
	*x = ContractWriteNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractWriteNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractWriteNode) ProtoMessage() {}

func (x *ContractWriteNode) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractWriteNode.ProtoReflect.Descriptor instead.
func (*ContractWriteNode) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{7}
}

func (x *ContractWriteNode) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *ContractWriteNode) GetCallData() string {
	if x != nil {
		return x.CallData
	}
	return ""
}

func (x *ContractWriteNode) GetContractAbi() string {
	if x != nil {
		return x.ContractAbi
	}
	return ""
}

type ContractReadNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	CallData        string `protobuf:"bytes,2,opt,name=call_data,json=callData,proto3" json:"call_data,omitempty"`
	// The ABI are required to decode the return value and pass it to the next step.
	// Currently, we need to provide the contract ABI as a JSON string.
	// We don't need to include the full ABI—just enough to decode the method call.
	ContractAbi string `protobuf:"bytes,3,opt,name=contract_abi,json=contractAbi,proto3" json:"contract_abi,omitempty"`
}

func (x *ContractReadNode) Reset() {
	*x = ContractReadNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractReadNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractReadNode) ProtoMessage() {}

func (x *ContractReadNode) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractReadNode.ProtoReflect.Descriptor instead.
func (*ContractReadNode) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{8}
}

func (x *ContractReadNode) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *ContractReadNode) GetCallData() string {
	if x != nil {
		return x.CallData
	}
	return ""
}

func (x *ContractReadNode) GetContractAbi() string {
	if x != nil {
		return x.ContractAbi
	}
	return ""
}

type GraphQLQueryNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url       string            `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Query     string            `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	Variables map[string]string `protobuf:"bytes,3,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GraphQLQueryNode) Reset() {
	*x = GraphQLQueryNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQLQueryNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLQueryNode) ProtoMessage() {}

func (x *GraphQLQueryNode) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLQueryNode.ProtoReflect.Descriptor instead.
func (*GraphQLQueryNode) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{9}
}

func (x *GraphQLQueryNode) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GraphQLQueryNode) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *GraphQLQueryNode) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

type RestAPINode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url     string            `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Headers map[string]string `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Body    string            `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	Method  string            `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
}

func (x *RestAPINode) Reset() {
	*x = RestAPINode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestAPINode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestAPINode) ProtoMessage() {}

func (x *RestAPINode) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestAPINode.ProtoReflect.Descriptor instead.
func (*RestAPINode) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{10}
}

func (x *RestAPINode) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *RestAPINode) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *RestAPINode) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *RestAPINode) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

type CustomCodeNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lang   CustomCodeLang `protobuf:"varint,1,opt,name=lang,proto3,enum=aggregator.CustomCodeLang" json:"lang,omitempty"`
	Source string         `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *CustomCodeNode) Reset() {
	*x = CustomCodeNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomCodeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomCodeNode) ProtoMessage() {}

func (x *CustomCodeNode) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomCodeNode.ProtoReflect.Descriptor instead.
func (*CustomCodeNode) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{11}
}

func (x *CustomCodeNode) GetLang() CustomCodeLang {
	if x != nil {
		return x.Lang
	}
	return CustomCodeLang_JavaScript
}

func (x *CustomCodeNode) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type       string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Expression string `protobuf:"bytes,3,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{12}
}

func (x *Condition) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Condition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Condition) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

type BranchNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conditions []*Condition `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
}

func (x *BranchNode) Reset() {
	*x = BranchNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchNode) ProtoMessage() {}

func (x *BranchNode) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchNode.ProtoReflect.Descriptor instead.
func (*BranchNode) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{13}
}

func (x *BranchNode) GetConditions() []*Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

type FilterNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter node acts like .select or .filter to pluck out element in an array that evaluate the expression to true
	Expression string `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	// input is the id of the node that we will fetch its value from and feed into the iteration.
	// this input has to be an array. Currently we only know about the error at runtime
	Input string `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *FilterNode) Reset() {
	*x = FilterNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterNode) ProtoMessage() {}

func (x *FilterNode) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterNode.ProtoReflect.Descriptor instead.
func (*FilterNode) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{14}
}

func (x *FilterNode) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *FilterNode) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

// LoopNode currently not support, but we pre-defined to reverse the field id
type LoopNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// this is the variable name of any previous step so we can took it
	Input string `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	// a var that the function can refer to it
	IterVal string `protobuf:"bytes,2,opt,name=iter_val,json=iterVal,proto3" json:"iter_val,omitempty"`
	IterKey string `protobuf:"bytes,3,opt,name=iter_key,json=iterKey,proto3" json:"iter_key,omitempty"`
	// inside the runner, it can access to the current value of the loop iteration through the iter_val/iter_key above
	//
	// Types that are assignable to Runner:
	//
	//	*LoopNode_EthTransfer
	//	*LoopNode_ContractWrite
	//	*LoopNode_ContractRead
	//	*LoopNode_GraphqlDataQuery
	//	*LoopNode_RestApi
	//	*LoopNode_CustomCode
	Runner isLoopNode_Runner `protobuf_oneof:"runner"`
}

func (x *LoopNode) Reset() {
	*x = LoopNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoopNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoopNode) ProtoMessage() {}

func (x *LoopNode) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoopNode.ProtoReflect.Descriptor instead.
func (*LoopNode) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{15}
}

func (x *LoopNode) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *LoopNode) GetIterVal() string {
	if x != nil {
		return x.IterVal
	}
	return ""
}

func (x *LoopNode) GetIterKey() string {
	if x != nil {
		return x.IterKey
	}
	return ""
}

func (m *LoopNode) GetRunner() isLoopNode_Runner {
	if m != nil {
		return m.Runner
	}
	return nil
}

func (x *LoopNode) GetEthTransfer() *ETHTransferNode {
	if x, ok := x.GetRunner().(*LoopNode_EthTransfer); ok {
		return x.EthTransfer
	}
	return nil
}

func (x *LoopNode) GetContractWrite() *ContractWriteNode {
	if x, ok := x.GetRunner().(*LoopNode_ContractWrite); ok {
		return x.ContractWrite
	}
	return nil
}

func (x *LoopNode) GetContractRead() *ContractReadNode {
	if x, ok := x.GetRunner().(*LoopNode_ContractRead); ok {
		return x.ContractRead
	}
	return nil
}

func (x *LoopNode) GetGraphqlDataQuery() *GraphQLQueryNode {
	if x, ok := x.GetRunner().(*LoopNode_GraphqlDataQuery); ok {
		return x.GraphqlDataQuery
	}
	return nil
}

func (x *LoopNode) GetRestApi() *RestAPINode {
	if x, ok := x.GetRunner().(*LoopNode_RestApi); ok {
		return x.RestApi
	}
	return nil
}

func (x *LoopNode) GetCustomCode() *CustomCodeNode {
	if x, ok := x.GetRunner().(*LoopNode_CustomCode); ok {
		return x.CustomCode
	}
	return nil
}

type isLoopNode_Runner interface {
	isLoopNode_Runner()
}

type LoopNode_EthTransfer struct {
	// Transfer eth require no calldata etc, just a destination address and an eth amount to be sent
	EthTransfer *ETHTransferNode `protobuf:"bytes,10,opt,name=eth_transfer,json=ethTransfer,proto3,oneof"`
}

type LoopNode_ContractWrite struct {
	// Run one ore more contracts. The call call also be batched with tool like
	// multicall to wrap many calls. in a contract write, we need to generate signature and send as userops.
	ContractWrite *ContractWriteNode `protobuf:"bytes,11,opt,name=contract_write,json=contractWrite,proto3,oneof"`
}

type LoopNode_ContractRead struct {
	// read data fron a target contract
	ContractRead *ContractReadNode `protobuf:"bytes,12,opt,name=contract_read,json=contractRead,proto3,oneof"`
}

type LoopNode_GraphqlDataQuery struct {
	// Make call to a graphql endpoint
	GraphqlDataQuery *GraphQLQueryNode `protobuf:"bytes,13,opt,name=graphql_data_query,json=graphqlDataQuery,proto3,oneof"`
}

type LoopNode_RestApi struct {
	// Make call to a HTTP endpoint
	RestApi *RestAPINode `protobuf:"bytes,14,opt,name=rest_api,json=restApi,proto3,oneof"`
}

type LoopNode_CustomCode struct {
	CustomCode *CustomCodeNode `protobuf:"bytes,15,opt,name=custom_code,json=customCode,proto3,oneof"`
}

func (*LoopNode_EthTransfer) isLoopNode_Runner() {}

func (*LoopNode_ContractWrite) isLoopNode_Runner() {}

func (*LoopNode_ContractRead) isLoopNode_Runner() {}

func (*LoopNode_GraphqlDataQuery) isLoopNode_Runner() {}

func (*LoopNode_RestApi) isLoopNode_Runner() {}

func (*LoopNode_CustomCode) isLoopNode_Runner() {}

// The edge is relationship or direct between node
type TaskEdge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Source string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Target string `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *TaskEdge) Reset() {
	*x = TaskEdge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskEdge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskEdge) ProtoMessage() {}

func (x *TaskEdge) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskEdge.ProtoReflect.Descriptor instead.
func (*TaskEdge) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{16}
}

func (x *TaskEdge) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskEdge) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *TaskEdge) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type TaskNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// based on node_type one and only one of these field are set
	//
	// Types that are assignable to TaskType:
	//
	//	*TaskNode_EthTransfer
	//	*TaskNode_ContractWrite
	//	*TaskNode_ContractRead
	//	*TaskNode_GraphqlQuery
	//	*TaskNode_RestApi
	//	*TaskNode_Branch
	//	*TaskNode_Filter
	//	*TaskNode_Loop
	//	*TaskNode_CustomCode
	TaskType isTaskNode_TaskType `protobuf_oneof:"task_type"`
}

func (x *TaskNode) Reset() {
	*x = TaskNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskNode) ProtoMessage() {}

func (x *TaskNode) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskNode.ProtoReflect.Descriptor instead.
func (*TaskNode) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{17}
}

func (x *TaskNode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *TaskNode) GetTaskType() isTaskNode_TaskType {
	if m != nil {
		return m.TaskType
	}
	return nil
}

func (x *TaskNode) GetEthTransfer() *ETHTransferNode {
	if x, ok := x.GetTaskType().(*TaskNode_EthTransfer); ok {
		return x.EthTransfer
	}
	return nil
}

func (x *TaskNode) GetContractWrite() *ContractWriteNode {
	if x, ok := x.GetTaskType().(*TaskNode_ContractWrite); ok {
		return x.ContractWrite
	}
	return nil
}

func (x *TaskNode) GetContractRead() *ContractReadNode {
	if x, ok := x.GetTaskType().(*TaskNode_ContractRead); ok {
		return x.ContractRead
	}
	return nil
}

func (x *TaskNode) GetGraphqlQuery() *GraphQLQueryNode {
	if x, ok := x.GetTaskType().(*TaskNode_GraphqlQuery); ok {
		return x.GraphqlQuery
	}
	return nil
}

func (x *TaskNode) GetRestApi() *RestAPINode {
	if x, ok := x.GetTaskType().(*TaskNode_RestApi); ok {
		return x.RestApi
	}
	return nil
}

func (x *TaskNode) GetBranch() *BranchNode {
	if x, ok := x.GetTaskType().(*TaskNode_Branch); ok {
		return x.Branch
	}
	return nil
}

func (x *TaskNode) GetFilter() *FilterNode {
	if x, ok := x.GetTaskType().(*TaskNode_Filter); ok {
		return x.Filter
	}
	return nil
}

func (x *TaskNode) GetLoop() *LoopNode {
	if x, ok := x.GetTaskType().(*TaskNode_Loop); ok {
		return x.Loop
	}
	return nil
}

func (x *TaskNode) GetCustomCode() *CustomCodeNode {
	if x, ok := x.GetTaskType().(*TaskNode_CustomCode); ok {
		return x.CustomCode
	}
	return nil
}

type isTaskNode_TaskType interface {
	isTaskNode_TaskType()
}

type TaskNode_EthTransfer struct {
	// Transfer eth require no calldata etc, just a destination address and an eth amount to be sent
	EthTransfer *ETHTransferNode `protobuf:"bytes,10,opt,name=eth_transfer,json=ethTransfer,proto3,oneof"`
}

type TaskNode_ContractWrite struct {
	// Run one ore more contracts. The call call also be batched with tool like
	// multicall to wrap many calls. in a contract write, we need to generate signature and send as userops.
	ContractWrite *ContractWriteNode `protobuf:"bytes,11,opt,name=contract_write,json=contractWrite,proto3,oneof"`
}

type TaskNode_ContractRead struct {
	// read data fron a target contract
	ContractRead *ContractReadNode `protobuf:"bytes,12,opt,name=contract_read,json=contractRead,proto3,oneof"`
}

type TaskNode_GraphqlQuery struct {
	// Make call to a graphql endpoint
	GraphqlQuery *GraphQLQueryNode `protobuf:"bytes,13,opt,name=graphql_query,json=graphqlQuery,proto3,oneof"`
}

type TaskNode_RestApi struct {
	// Make call to a HTTP endpoint
	RestApi *RestAPINode `protobuf:"bytes,14,opt,name=rest_api,json=restApi,proto3,oneof"`
}

type TaskNode_Branch struct {
	// CustomCode allow to run arbitraty JavaScript.
	Branch *BranchNode `protobuf:"bytes,15,opt,name=branch,proto3,oneof"`
}

type TaskNode_Filter struct {
	Filter *FilterNode `protobuf:"bytes,16,opt,name=filter,proto3,oneof"`
}

type TaskNode_Loop struct {
	Loop *LoopNode `protobuf:"bytes,17,opt,name=loop,proto3,oneof"`
}

type TaskNode_CustomCode struct {
	CustomCode *CustomCodeNode `protobuf:"bytes,18,opt,name=custom_code,json=customCode,proto3,oneof"`
}

func (*TaskNode_EthTransfer) isTaskNode_TaskType() {}

func (*TaskNode_ContractWrite) isTaskNode_TaskType() {}

func (*TaskNode_ContractRead) isTaskNode_TaskType() {}

func (*TaskNode_GraphqlQuery) isTaskNode_TaskType() {}

func (*TaskNode_RestApi) isTaskNode_TaskType() {}

func (*TaskNode_Branch) isTaskNode_TaskType() {}

func (*TaskNode_Filter) isTaskNode_TaskType() {}

func (*TaskNode_Loop) isTaskNode_TaskType() {}

func (*TaskNode_CustomCode) isTaskNode_TaskType() {}

type Execution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StartAt     int64             `protobuf:"varint,2,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt       int64             `protobuf:"varint,3,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	Success     bool              `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	Error       string            `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	Reason      *TriggerReason    `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
	Steps       []*Execution_Step `protobuf:"bytes,8,rep,name=steps,proto3" json:"steps,omitempty"`
	TriggerName string            `protobuf:"bytes,9,opt,name=trigger_name,json=triggerName,proto3" json:"trigger_name,omitempty"`
	// Despite the name outputData this is actually the data after we enrich based the metadata at the point where the event is trigger.
	// Example at the time of triggering a transfer event, the only ifformation we had is ERC20 address, the topics, the from/to and amount, the log id and transaction hash
	// We then query Etherem RPC to find out more information such as token symbol, token decimal, parse the amount of out event raw data
	// Reference ticket: https://github.com/AvaProtocol/EigenLayer-AVS/issues/151
	//
	// For transfer event, we had a set of fields
	// Chris define them here https://avaprotocol.slack.com/archives/D0570FNE0SJ/p1733336982524899
	// // The selected fields of the response to return to the client
	//
	//	const FILTERED_FIELDS = [
	//	  "token_name",
	//	  "token_symbol",
	//	  "token_decimals",
	//	  "transaction_hash",
	//	  "address",
	//	  "block_timestamp",
	//	  "block_number",
	//	  "from_address",
	//	  "to_address",
	//	  "value",
	//	  "value_formatted", // Formatted value
	//	  "transaction_index",
	//	  "log_index",
	//	];
	//
	// For non transfer event, we just have the raw data
	// For block event, we had the number at that trigger is meet.
	// For time trigger, it is the epoch
	//
	// Types that are assignable to OutputData:
	//
	//	*Execution_TransferEvent
	//	*Execution_RawEvent
	//	*Execution_Block
	//	*Execution_Time
	OutputData isExecution_OutputData `protobuf_oneof:"output_data"`
}

func (x *Execution) Reset() {
	*x = Execution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Execution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Execution) ProtoMessage() {}

func (x *Execution) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Execution.ProtoReflect.Descriptor instead.
func (*Execution) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{18}
}

func (x *Execution) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Execution) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *Execution) GetEndAt() int64 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

func (x *Execution) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Execution) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Execution) GetReason() *TriggerReason {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *Execution) GetSteps() []*Execution_Step {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *Execution) GetTriggerName() string {
	if x != nil {
		return x.TriggerName
	}
	return ""
}

func (m *Execution) GetOutputData() isExecution_OutputData {
	if m != nil {
		return m.OutputData
	}
	return nil
}

func (x *Execution) GetTransferEvent() *Execution_TransferEventOutput {
	if x, ok := x.GetOutputData().(*Execution_TransferEvent); ok {
		return x.TransferEvent
	}
	return nil
}

func (x *Execution) GetRawEvent() *Execution_RawEventOutput {
	if x, ok := x.GetOutputData().(*Execution_RawEvent); ok {
		return x.RawEvent
	}
	return nil
}

func (x *Execution) GetBlock() *Execution_BlockOutput {
	if x, ok := x.GetOutputData().(*Execution_Block); ok {
		return x.Block
	}
	return nil
}

func (x *Execution) GetTime() *Execution_TimeOutput {
	if x, ok := x.GetOutputData().(*Execution_Time); ok {
		return x.Time
	}
	return nil
}

type isExecution_OutputData interface {
	isExecution_OutputData()
}

type Execution_TransferEvent struct {
	TransferEvent *Execution_TransferEventOutput `protobuf:"bytes,10,opt,name=transfer_event,json=transferEvent,proto3,oneof"`
}

type Execution_RawEvent struct {
	RawEvent *Execution_RawEventOutput `protobuf:"bytes,11,opt,name=raw_event,json=rawEvent,proto3,oneof"`
}

type Execution_Block struct {
	Block *Execution_BlockOutput `protobuf:"bytes,12,opt,name=block,proto3,oneof"`
}

type Execution_Time struct {
	Time *Execution_TimeOutput `protobuf:"bytes,13,opt,name=time,proto3,oneof"`
}

func (*Execution_TransferEvent) isExecution_OutputData() {}

func (*Execution_RawEvent) isExecution_OutputData() {}

func (*Execution_Block) isExecution_OutputData() {}

func (*Execution_Time) isExecution_OutputData() {}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner              string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	SmartWalletAddress string `protobuf:"bytes,3,opt,name=smart_wallet_address,json=smartWalletAddress,proto3" json:"smart_wallet_address,omitempty"`
	// task won't be check before this
	StartAt int64 `protobuf:"varint,4,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	// task won't be run/check after this
	ExpiredAt int64 `protobuf:"varint,5,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`
	// arbitrary data about this task. has a limit of 255 character
	Name        string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	CompletedAt int64  `protobuf:"varint,7,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	// limit on how many time this task can run. Set to 0 will make it run unlimited until cancelling or reaching its expired time
	MaxExecution int64 `protobuf:"varint,8,opt,name=max_execution,json=maxExecution,proto3" json:"max_execution,omitempty"`
	// return how many time this task has run
	TotalExecution int64        `protobuf:"varint,9,opt,name=total_execution,json=totalExecution,proto3" json:"total_execution,omitempty"`
	LastRanAt      int64        `protobuf:"varint,10,opt,name=last_ran_at,json=lastRanAt,proto3" json:"last_ran_at,omitempty"`
	Status         TaskStatus   `protobuf:"varint,11,opt,name=status,proto3,enum=aggregator.TaskStatus" json:"status,omitempty"`
	Trigger        *TaskTrigger `protobuf:"bytes,12,opt,name=trigger,proto3" json:"trigger,omitempty"`
	Nodes          []*TaskNode  `protobuf:"bytes,13,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Edges          []*TaskEdge  `protobuf:"bytes,14,rep,name=edges,proto3" json:"edges,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{19}
}

func (x *Task) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Task) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Task) GetSmartWalletAddress() string {
	if x != nil {
		return x.SmartWalletAddress
	}
	return ""
}

func (x *Task) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *Task) GetExpiredAt() int64 {
	if x != nil {
		return x.ExpiredAt
	}
	return 0
}

func (x *Task) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Task) GetCompletedAt() int64 {
	if x != nil {
		return x.CompletedAt
	}
	return 0
}

func (x *Task) GetMaxExecution() int64 {
	if x != nil {
		return x.MaxExecution
	}
	return 0
}

func (x *Task) GetTotalExecution() int64 {
	if x != nil {
		return x.TotalExecution
	}
	return 0
}

func (x *Task) GetLastRanAt() int64 {
	if x != nil {
		return x.LastRanAt
	}
	return 0
}

func (x *Task) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_Active
}

func (x *Task) GetTrigger() *TaskTrigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

func (x *Task) GetNodes() []*TaskNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Task) GetEdges() []*TaskEdge {
	if x != nil {
		return x.Edges
	}
	return nil
}

type CreateTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trigger      *TaskTrigger `protobuf:"bytes,1,opt,name=trigger,proto3" json:"trigger,omitempty"`
	StartAt      int64        `protobuf:"varint,2,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	ExpiredAt    int64        `protobuf:"varint,3,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`
	MaxExecution int64        `protobuf:"varint,4,opt,name=max_execution,json=maxExecution,proto3" json:"max_execution,omitempty"`
	// the smart wallet address that will be used to run this task
	// When leaving out, we will use the default(salt=0) wallet
	SmartWalletAddress string      `protobuf:"bytes,5,opt,name=smart_wallet_address,json=smartWalletAddress,proto3" json:"smart_wallet_address,omitempty"`
	Name               string      `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Nodes              []*TaskNode `protobuf:"bytes,7,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Edges              []*TaskEdge `protobuf:"bytes,8,rep,name=edges,proto3" json:"edges,omitempty"`
}

func (x *CreateTaskReq) Reset() {
	*x = CreateTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskReq) ProtoMessage() {}

func (x *CreateTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskReq.ProtoReflect.Descriptor instead.
func (*CreateTaskReq) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{20}
}

func (x *CreateTaskReq) GetTrigger() *TaskTrigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

func (x *CreateTaskReq) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *CreateTaskReq) GetExpiredAt() int64 {
	if x != nil {
		return x.ExpiredAt
	}
	return 0
}

func (x *CreateTaskReq) GetMaxExecution() int64 {
	if x != nil {
		return x.MaxExecution
	}
	return 0
}

func (x *CreateTaskReq) GetSmartWalletAddress() string {
	if x != nil {
		return x.SmartWalletAddress
	}
	return ""
}

func (x *CreateTaskReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTaskReq) GetNodes() []*TaskNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *CreateTaskReq) GetEdges() []*TaskEdge {
	if x != nil {
		return x.Edges
	}
	return nil
}

type CreateTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateTaskResp) Reset() {
	*x = CreateTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskResp) ProtoMessage() {}

func (x *CreateTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskResp.ProtoReflect.Descriptor instead.
func (*CreateTaskResp) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{21}
}

func (x *CreateTaskResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type NonceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *NonceRequest) Reset() {
	*x = NonceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonceRequest) ProtoMessage() {}

func (x *NonceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonceRequest.ProtoReflect.Descriptor instead.
func (*NonceRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{22}
}

func (x *NonceRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

type NonceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce string `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *NonceResp) Reset() {
	*x = NonceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonceResp) ProtoMessage() {}

func (x *NonceResp) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonceResp.ProtoReflect.Descriptor instead.
func (*NonceResp) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{23}
}

func (x *NonceResp) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

type ListWalletReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// filter out by factory address or salt
	// otherwise return all the wallet
	FactoryAddress string `protobuf:"bytes,1,opt,name=factory_address,json=factoryAddress,proto3" json:"factory_address,omitempty"`
	Salt           string `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
}

func (x *ListWalletReq) Reset() {
	*x = ListWalletReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWalletReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletReq) ProtoMessage() {}

func (x *ListWalletReq) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletReq.ProtoReflect.Descriptor instead.
func (*ListWalletReq) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{24}
}

func (x *ListWalletReq) GetFactoryAddress() string {
	if x != nil {
		return x.FactoryAddress
	}
	return ""
}

func (x *ListWalletReq) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

type SmartWallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Salt    string `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
	Factory string `protobuf:"bytes,3,opt,name=factory,proto3" json:"factory,omitempty"`
}

func (x *SmartWallet) Reset() {
	*x = SmartWallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartWallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartWallet) ProtoMessage() {}

func (x *SmartWallet) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartWallet.ProtoReflect.Descriptor instead.
func (*SmartWallet) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{25}
}

func (x *SmartWallet) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SmartWallet) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *SmartWallet) GetFactory() string {
	if x != nil {
		return x.Factory
	}
	return ""
}

type ListWalletResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*SmartWallet `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListWalletResp) Reset() {
	*x = ListWalletResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWalletResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletResp) ProtoMessage() {}

func (x *ListWalletResp) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletResp.ProtoReflect.Descriptor instead.
func (*ListWalletResp) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{26}
}

func (x *ListWalletResp) GetItems() []*SmartWallet {
	if x != nil {
		return x.Items
	}
	return nil
}

type ListTasksReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter out by the smart_wallet_address
	SmartWalletAddress []string `protobuf:"bytes,1,rep,name=smart_wallet_address,json=smartWalletAddress,proto3" json:"smart_wallet_address,omitempty"`
	Cursor             string   `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	ItemPerPage        int64    `protobuf:"varint,3,opt,name=item_per_page,json=itemPerPage,proto3" json:"item_per_page,omitempty"`
}

func (x *ListTasksReq) Reset() {
	*x = ListTasksReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTasksReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksReq) ProtoMessage() {}

func (x *ListTasksReq) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksReq.ProtoReflect.Descriptor instead.
func (*ListTasksReq) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{27}
}

func (x *ListTasksReq) GetSmartWalletAddress() []string {
	if x != nil {
		return x.SmartWalletAddress
	}
	return nil
}

func (x *ListTasksReq) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *ListTasksReq) GetItemPerPage() int64 {
	if x != nil {
		return x.ItemPerPage
	}
	return 0
}

type ListTasksResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items   []*ListTasksResp_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Cursor  string                `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	HasMore bool                  `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
}

func (x *ListTasksResp) Reset() {
	*x = ListTasksResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTasksResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksResp) ProtoMessage() {}

func (x *ListTasksResp) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksResp.ProtoReflect.Descriptor instead.
func (*ListTasksResp) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{28}
}

func (x *ListTasksResp) GetItems() []*ListTasksResp_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListTasksResp) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *ListTasksResp) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

type ListExecutionsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskIds     []string `protobuf:"bytes,1,rep,name=task_ids,json=taskIds,proto3" json:"task_ids,omitempty"`
	Cursor      string   `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	ItemPerPage int64    `protobuf:"varint,3,opt,name=item_per_page,json=itemPerPage,proto3" json:"item_per_page,omitempty"`
}

func (x *ListExecutionsReq) Reset() {
	*x = ListExecutionsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExecutionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExecutionsReq) ProtoMessage() {}

func (x *ListExecutionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExecutionsReq.ProtoReflect.Descriptor instead.
func (*ListExecutionsReq) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{29}
}

func (x *ListExecutionsReq) GetTaskIds() []string {
	if x != nil {
		return x.TaskIds
	}
	return nil
}

func (x *ListExecutionsReq) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *ListExecutionsReq) GetItemPerPage() int64 {
	if x != nil {
		return x.ItemPerPage
	}
	return 0
}

type ListExecutionsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items   []*Execution `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Cursor  string       `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	HasMore bool         `protobuf:"varint,4,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
}

func (x *ListExecutionsResp) Reset() {
	*x = ListExecutionsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExecutionsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExecutionsResp) ProtoMessage() {}

func (x *ListExecutionsResp) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExecutionsResp.ProtoReflect.Descriptor instead.
func (*ListExecutionsResp) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{30}
}

func (x *ListExecutionsResp) GetItems() []*Execution {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListExecutionsResp) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *ListExecutionsResp) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

type ExecutionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId      string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	ExecutionId string `protobuf:"bytes,2,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
}

func (x *ExecutionReq) Reset() {
	*x = ExecutionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionReq) ProtoMessage() {}

func (x *ExecutionReq) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionReq.ProtoReflect.Descriptor instead.
func (*ExecutionReq) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{31}
}

func (x *ExecutionReq) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ExecutionReq) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

type ExecutionStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ExecutionStatus `protobuf:"varint,1,opt,name=status,proto3,enum=aggregator.ExecutionStatus" json:"status,omitempty"`
}

func (x *ExecutionStatusResp) Reset() {
	*x = ExecutionStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionStatusResp) ProtoMessage() {}

func (x *ExecutionStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionStatusResp.ProtoReflect.Descriptor instead.
func (*ExecutionStatusResp) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{32}
}

func (x *ExecutionStatusResp) GetStatus() ExecutionStatus {
	if x != nil {
		return x.Status
	}
	return ExecutionStatus_Queued
}

type GetKeyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner     string                 `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	ChainId   int64                  `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	IssuedAt  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=issued_at,json=issuedAt,proto3" json:"issued_at,omitempty"`
	ExpiredAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`
	Signature string                 `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *GetKeyReq) Reset() {
	*x = GetKeyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyReq) ProtoMessage() {}

func (x *GetKeyReq) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyReq.ProtoReflect.Descriptor instead.
func (*GetKeyReq) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{33}
}

func (x *GetKeyReq) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *GetKeyReq) GetChainId() int64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *GetKeyReq) GetIssuedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.IssuedAt
	}
	return nil
}

func (x *GetKeyReq) GetExpiredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiredAt
	}
	return nil
}

func (x *GetKeyReq) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type KeyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *KeyResp) Reset() {
	*x = KeyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyResp) ProtoMessage() {}

func (x *KeyResp) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyResp.ProtoReflect.Descriptor instead.
func (*KeyResp) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{34}
}

func (x *KeyResp) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// TriggerReason represent a lookup that we can use to identify when/where/how it is trigger
// In a block trigger, we will have block_number
// In an event trigger, we will have the log_index, tx_hash and the block_number
// In a time based trigger(cron/fixed time) we will have the epoch.
//
// TriggerReason is used to populate the `<trigger-name>.data` variable. Example, if this is a transfer
// event, then you will have access to <trigger-name>.data.from_address or <trigger-name>.data.value
type TriggerReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockNumber uint64                    `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	LogIndex    uint64                    `protobuf:"varint,2,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	TxHash      string                    `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Epoch       uint64                    `protobuf:"varint,4,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Type        TriggerReason_TriggerType `protobuf:"varint,5,opt,name=type,proto3,enum=aggregator.TriggerReason_TriggerType" json:"type,omitempty"`
}

func (x *TriggerReason) Reset() {
	*x = TriggerReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerReason) ProtoMessage() {}

func (x *TriggerReason) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerReason.ProtoReflect.Descriptor instead.
func (*TriggerReason) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{35}
}

func (x *TriggerReason) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *TriggerReason) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *TriggerReason) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *TriggerReason) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *TriggerReason) GetType() TriggerReason_TriggerType {
	if x != nil {
		return x.Type
	}
	return TriggerReason_Unset
}

type GetWalletReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salt string `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	// this is the factory address for the wallet, when leaving its empty, we will use our default factory address
	FactoryAddress string `protobuf:"bytes,2,opt,name=factory_address,json=factoryAddress,proto3" json:"factory_address,omitempty"`
}

func (x *GetWalletReq) Reset() {
	*x = GetWalletReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletReq) ProtoMessage() {}

func (x *GetWalletReq) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletReq.ProtoReflect.Descriptor instead.
func (*GetWalletReq) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{36}
}

func (x *GetWalletReq) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *GetWalletReq) GetFactoryAddress() string {
	if x != nil {
		return x.FactoryAddress
	}
	return ""
}

type GetWalletResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address            string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Salt               string `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
	FactoryAddress     string `protobuf:"bytes,3,opt,name=factory_address,json=factoryAddress,proto3" json:"factory_address,omitempty"`
	TotalTaskCount     uint64 `protobuf:"varint,4,opt,name=total_task_count,json=totalTaskCount,proto3" json:"total_task_count,omitempty"`
	ActiveTaskCount    uint64 `protobuf:"varint,5,opt,name=active_task_count,json=activeTaskCount,proto3" json:"active_task_count,omitempty"`
	CompletedTaskCount uint64 `protobuf:"varint,6,opt,name=completed_task_count,json=completedTaskCount,proto3" json:"completed_task_count,omitempty"`
	FailedTaskCount    uint64 `protobuf:"varint,7,opt,name=failed_task_count,json=failedTaskCount,proto3" json:"failed_task_count,omitempty"`
	CanceledTaskCount  uint64 `protobuf:"varint,8,opt,name=canceled_task_count,json=canceledTaskCount,proto3" json:"canceled_task_count,omitempty"`
}

func (x *GetWalletResp) Reset() {
	*x = GetWalletResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletResp) ProtoMessage() {}

func (x *GetWalletResp) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletResp.ProtoReflect.Descriptor instead.
func (*GetWalletResp) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{37}
}

func (x *GetWalletResp) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetWalletResp) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *GetWalletResp) GetFactoryAddress() string {
	if x != nil {
		return x.FactoryAddress
	}
	return ""
}

func (x *GetWalletResp) GetTotalTaskCount() uint64 {
	if x != nil {
		return x.TotalTaskCount
	}
	return 0
}

func (x *GetWalletResp) GetActiveTaskCount() uint64 {
	if x != nil {
		return x.ActiveTaskCount
	}
	return 0
}

func (x *GetWalletResp) GetCompletedTaskCount() uint64 {
	if x != nil {
		return x.CompletedTaskCount
	}
	return 0
}

func (x *GetWalletResp) GetFailedTaskCount() uint64 {
	if x != nil {
		return x.FailedTaskCount
	}
	return 0
}

func (x *GetWalletResp) GetCanceledTaskCount() uint64 {
	if x != nil {
		return x.CanceledTaskCount
	}
	return 0
}

type UserTriggerTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string         `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Reason *TriggerReason `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// when setting is_blocking=true, the execution run in the same request. the request is blocked until the execution is done
	// setting to false, the task will be execute in our normal queueu system, and the request won't block.
	// default value is false, for interact testing, set this to true
	IsBlocking bool `protobuf:"varint,3,opt,name=is_blocking,json=isBlocking,proto3" json:"is_blocking,omitempty"`
}

func (x *UserTriggerTaskReq) Reset() {
	*x = UserTriggerTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTriggerTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTriggerTaskReq) ProtoMessage() {}

func (x *UserTriggerTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTriggerTaskReq.ProtoReflect.Descriptor instead.
func (*UserTriggerTaskReq) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{38}
}

func (x *UserTriggerTaskReq) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *UserTriggerTaskReq) GetReason() *TriggerReason {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *UserTriggerTaskReq) GetIsBlocking() bool {
	if x != nil {
		return x.IsBlocking
	}
	return false
}

type UserTriggerTaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Regardless whether it is a block or async, we always get back the same kind of id for this trigger.
	// The caller then make a second request to GetExecution to check for the execution status and data.
	// In the blocking mode, the execution_id is materialized and has been created, we can then call GetExecution on it immediately to receive result
	// In async mode, the execution_id is created ahead of time and not materialized, calling GetExecutionStatus on it will return Status=Pending for example. Once Status=Completed you can call GetExecution to get all log and detail. Call GetExecution before it is completed will result in "Execution Not Found"
	ExecutionId string          `protobuf:"bytes,1,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	Status      ExecutionStatus `protobuf:"varint,2,opt,name=status,proto3,enum=aggregator.ExecutionStatus" json:"status,omitempty"`
}

func (x *UserTriggerTaskResp) Reset() {
	*x = UserTriggerTaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTriggerTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTriggerTaskResp) ProtoMessage() {}

func (x *UserTriggerTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTriggerTaskResp.ProtoReflect.Descriptor instead.
func (*UserTriggerTaskResp) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{39}
}

func (x *UserTriggerTaskResp) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *UserTriggerTaskResp) GetStatus() ExecutionStatus {
	if x != nil {
		return x.Status
	}
	return ExecutionStatus_Queued
}

type CreateOrUpdateSecretReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the secret. it should be [a-zA-Z0-9_]+
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// value can be any valid unicode string
	// Secret is the only thing we can change in an update. workflow and org id cannot be change
	Secret string `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	// A secret when define can be at these level
	// - org: available to everything in the org. Currently this isn't supported yet. reserve for future use
	// - user: available to all workflow of an user. This is the default level
	// - workflow: available to a single workflow. To make a secret available to multiple workflow, either use org/user level or define them on other workflow.
	WorkflowId string `protobuf:"bytes,3,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	OrgId      string `protobuf:"bytes,4,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *CreateOrUpdateSecretReq) Reset() {
	*x = CreateOrUpdateSecretReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrUpdateSecretReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateSecretReq) ProtoMessage() {}

func (x *CreateOrUpdateSecretReq) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateSecretReq.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateSecretReq) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{40}
}

func (x *CreateOrUpdateSecretReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateOrUpdateSecretReq) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *CreateOrUpdateSecretReq) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *CreateOrUpdateSecretReq) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

type ListSecretsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowId string `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
}

func (x *ListSecretsReq) Reset() {
	*x = ListSecretsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSecretsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecretsReq) ProtoMessage() {}

func (x *ListSecretsReq) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecretsReq.ProtoReflect.Descriptor instead.
func (*ListSecretsReq) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{41}
}

func (x *ListSecretsReq) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

type ListSecretsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ListSecretsResp_ResponseSecret `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListSecretsResp) Reset() {
	*x = ListSecretsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSecretsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecretsResp) ProtoMessage() {}

func (x *ListSecretsResp) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecretsResp.ProtoReflect.Descriptor instead.
func (*ListSecretsResp) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{42}
}

func (x *ListSecretsResp) GetItems() []*ListSecretsResp_ResponseSecret {
	if x != nil {
		return x.Items
	}
	return nil
}

type DeleteSecretReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Delete the secret belong to the specific workflow. Without its, we delete the one belong to user
	WorkflowId string `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// Delete the secret belong to the specific prg. Without its, we delete the one belong to user
	OrgId string `protobuf:"bytes,3,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *DeleteSecretReq) Reset() {
	*x = DeleteSecretReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSecretReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSecretReq) ProtoMessage() {}

func (x *DeleteSecretReq) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSecretReq.ProtoReflect.Descriptor instead.
func (*DeleteSecretReq) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{43}
}

func (x *DeleteSecretReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteSecretReq) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *DeleteSecretReq) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

type EventCondition_Matcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the type of Filter we support, right now, we support below value for
	//   - topics:
	//   - address:
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// the payload of the type data to be mached. Each type will have different semantic meaning on how to match
	// Given type=topics`. This value is the topic array, for every non null element of the array we perform an equal check
	// If all are equal, the filter resolve to true
	//
	// Example:
	// To find all ERC20 transfer event into or out to wallet 0x5DD596C901987A2b28C38A9C1DfBf86fFFc15d77 we can do
	// value = [
	//
	//	[
	//	  "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
	//	  "0x5DD596C901987A2b28C38A9C1DfBf86fFFc15d77", // tx out
	//	],
	//	[
	//	  "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
	//	  null,
	//	  "0x5DD596C901987A2b28C38A9C1DfBf86fFFc15d77" // tx in
	//	],
	//
	// ]
	Value []string `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *EventCondition_Matcher) Reset() {
	*x = EventCondition_Matcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventCondition_Matcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventCondition_Matcher) ProtoMessage() {}

func (x *EventCondition_Matcher) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventCondition_Matcher.ProtoReflect.Descriptor instead.
func (*EventCondition_Matcher) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{4, 0}
}

func (x *EventCondition_Matcher) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EventCondition_Matcher) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type Execution_Step struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId  string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	// serialize data of the result. This is the value that we bind to step variable in subsequent step
	OutputData string   `protobuf:"bytes,3,opt,name=output_data,json=outputData,proto3" json:"output_data,omitempty"`
	Log        string   `protobuf:"bytes,4,opt,name=log,proto3" json:"log,omitempty"`
	Error      string   `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	StartAt    int64    `protobuf:"varint,6,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt      int64    `protobuf:"varint,7,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	Inputs     []string `protobuf:"bytes,8,rep,name=inputs,proto3" json:"inputs,omitempty"`
}

func (x *Execution_Step) Reset() {
	*x = Execution_Step{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Execution_Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Execution_Step) ProtoMessage() {}

func (x *Execution_Step) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Execution_Step.ProtoReflect.Descriptor instead.
func (*Execution_Step) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{18, 0}
}

func (x *Execution_Step) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *Execution_Step) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Execution_Step) GetOutputData() string {
	if x != nil {
		return x.OutputData
	}
	return ""
}

func (x *Execution_Step) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

func (x *Execution_Step) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Execution_Step) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *Execution_Step) GetEndAt() int64 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

func (x *Execution_Step) GetInputs() []string {
	if x != nil {
		return x.Inputs
	}
	return nil
}

type Execution_TransferEventOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenName        string `protobuf:"bytes,1,opt,name=token_name,json=tokenName,proto3" json:"token_name,omitempty"`
	TokenSymbol      string `protobuf:"bytes,2,opt,name=token_symbol,json=tokenSymbol,proto3" json:"token_symbol,omitempty"`
	TokenDecimals    uint32 `protobuf:"varint,3,opt,name=token_decimals,json=tokenDecimals,proto3" json:"token_decimals,omitempty"`
	TransactionHash  string `protobuf:"bytes,4,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	Address          string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	BlockNumber      uint64 `protobuf:"varint,6,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	BlockTimestamp   uint64 `protobuf:"varint,7,opt,name=block_timestamp,json=blockTimestamp,proto3" json:"block_timestamp,omitempty"`
	FromAddress      string `protobuf:"bytes,8,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	ToAddress        string `protobuf:"bytes,9,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	Value            string `protobuf:"bytes,10,opt,name=value,proto3" json:"value,omitempty"`
	ValueFormatted   string `protobuf:"bytes,11,opt,name=value_formatted,json=valueFormatted,proto3" json:"value_formatted,omitempty"`
	TransactionIndex uint32 `protobuf:"varint,12,opt,name=transaction_index,json=transactionIndex,proto3" json:"transaction_index,omitempty"`
}

func (x *Execution_TransferEventOutput) Reset() {
	*x = Execution_TransferEventOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Execution_TransferEventOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Execution_TransferEventOutput) ProtoMessage() {}

func (x *Execution_TransferEventOutput) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Execution_TransferEventOutput.ProtoReflect.Descriptor instead.
func (*Execution_TransferEventOutput) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{18, 1}
}

func (x *Execution_TransferEventOutput) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

func (x *Execution_TransferEventOutput) GetTokenSymbol() string {
	if x != nil {
		return x.TokenSymbol
	}
	return ""
}

func (x *Execution_TransferEventOutput) GetTokenDecimals() uint32 {
	if x != nil {
		return x.TokenDecimals
	}
	return 0
}

func (x *Execution_TransferEventOutput) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *Execution_TransferEventOutput) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Execution_TransferEventOutput) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Execution_TransferEventOutput) GetBlockTimestamp() uint64 {
	if x != nil {
		return x.BlockTimestamp
	}
	return 0
}

func (x *Execution_TransferEventOutput) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *Execution_TransferEventOutput) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *Execution_TransferEventOutput) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Execution_TransferEventOutput) GetValueFormatted() string {
	if x != nil {
		return x.ValueFormatted
	}
	return ""
}

func (x *Execution_TransferEventOutput) GetTransactionIndex() uint32 {
	if x != nil {
		return x.TransactionIndex
	}
	return 0
}

// When the trigger is not a transfer event, we will have a raw event output only
// These shape of data is https://docs.ethers.org/v6/api/providers/#Log
type Execution_RawEventOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address          string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	BlockHash        string   `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockNumber      uint64   `protobuf:"varint,3,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Data             string   `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Index            uint32   `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
	Topics           []string `protobuf:"bytes,6,rep,name=topics,proto3" json:"topics,omitempty"`
	TransactionHash  string   `protobuf:"bytes,7,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	TransactionIndex uint32   `protobuf:"varint,8,opt,name=transaction_index,json=transactionIndex,proto3" json:"transaction_index,omitempty"`
}

func (x *Execution_RawEventOutput) Reset() {
	*x = Execution_RawEventOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Execution_RawEventOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Execution_RawEventOutput) ProtoMessage() {}

func (x *Execution_RawEventOutput) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Execution_RawEventOutput.ProtoReflect.Descriptor instead.
func (*Execution_RawEventOutput) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{18, 2}
}

func (x *Execution_RawEventOutput) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Execution_RawEventOutput) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *Execution_RawEventOutput) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Execution_RawEventOutput) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *Execution_RawEventOutput) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Execution_RawEventOutput) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *Execution_RawEventOutput) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *Execution_RawEventOutput) GetTransactionIndex() uint32 {
	if x != nil {
		return x.TransactionIndex
	}
	return 0
}

type Execution_BlockOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockNumber uint64 `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
}

func (x *Execution_BlockOutput) Reset() {
	*x = Execution_BlockOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Execution_BlockOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Execution_BlockOutput) ProtoMessage() {}

func (x *Execution_BlockOutput) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Execution_BlockOutput.ProtoReflect.Descriptor instead.
func (*Execution_BlockOutput) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{18, 3}
}

func (x *Execution_BlockOutput) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

type Execution_TimeOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *Execution_TimeOutput) Reset() {
	*x = Execution_TimeOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Execution_TimeOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Execution_TimeOutput) ProtoMessage() {}

func (x *Execution_TimeOutput) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Execution_TimeOutput.ProtoReflect.Descriptor instead.
func (*Execution_TimeOutput) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{18, 4}
}

func (x *Execution_TimeOutput) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

type ListTasksResp_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner              string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	SmartWalletAddress string `protobuf:"bytes,3,opt,name=smart_wallet_address,json=smartWalletAddress,proto3" json:"smart_wallet_address,omitempty"`
	// task won't be check before this
	StartAt int64 `protobuf:"varint,4,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	// task won't be run/check after this
	ExpiredAt int64 `protobuf:"varint,5,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`
	// arbitrary data about this task. has a limit of 255 character
	Name        string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	CompletedAt int64  `protobuf:"varint,7,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	// limit on how many time this task can run. Set to 0 will make it run unlimited until cancelling or reaching its expired time
	MaxExecution int64 `protobuf:"varint,8,opt,name=max_execution,json=maxExecution,proto3" json:"max_execution,omitempty"`
	// return how many time this task has run
	TotalExecution int64        `protobuf:"varint,9,opt,name=total_execution,json=totalExecution,proto3" json:"total_execution,omitempty"`
	LastRanAt      int64        `protobuf:"varint,10,opt,name=last_ran_at,json=lastRanAt,proto3" json:"last_ran_at,omitempty"`
	Status         TaskStatus   `protobuf:"varint,11,opt,name=status,proto3,enum=aggregator.TaskStatus" json:"status,omitempty"`
	Trigger        *TaskTrigger `protobuf:"bytes,12,opt,name=trigger,proto3" json:"trigger,omitempty"`
}

func (x *ListTasksResp_Item) Reset() {
	*x = ListTasksResp_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTasksResp_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksResp_Item) ProtoMessage() {}

func (x *ListTasksResp_Item) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksResp_Item.ProtoReflect.Descriptor instead.
func (*ListTasksResp_Item) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{28, 0}
}

func (x *ListTasksResp_Item) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListTasksResp_Item) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ListTasksResp_Item) GetSmartWalletAddress() string {
	if x != nil {
		return x.SmartWalletAddress
	}
	return ""
}

func (x *ListTasksResp_Item) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *ListTasksResp_Item) GetExpiredAt() int64 {
	if x != nil {
		return x.ExpiredAt
	}
	return 0
}

func (x *ListTasksResp_Item) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListTasksResp_Item) GetCompletedAt() int64 {
	if x != nil {
		return x.CompletedAt
	}
	return 0
}

func (x *ListTasksResp_Item) GetMaxExecution() int64 {
	if x != nil {
		return x.MaxExecution
	}
	return 0
}

func (x *ListTasksResp_Item) GetTotalExecution() int64 {
	if x != nil {
		return x.TotalExecution
	}
	return 0
}

func (x *ListTasksResp_Item) GetLastRanAt() int64 {
	if x != nil {
		return x.LastRanAt
	}
	return 0
}

func (x *ListTasksResp_Item) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_Active
}

func (x *ListTasksResp_Item) GetTrigger() *TaskTrigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

type ListSecretsResp_ResponseSecret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// when listing secret, we don't return its value, just secret and last update
	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Scope      string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	WorkflowId string `protobuf:"bytes,4,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	OrgId      string `protobuf:"bytes,5,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *ListSecretsResp_ResponseSecret) Reset() {
	*x = ListSecretsResp_ResponseSecret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_avs_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSecretsResp_ResponseSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecretsResp_ResponseSecret) ProtoMessage() {}

func (x *ListSecretsResp_ResponseSecret) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_avs_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecretsResp_ResponseSecret.ProtoReflect.Descriptor instead.
func (*ListSecretsResp_ResponseSecret) Descriptor() ([]byte, []int) {
	return file_protobuf_avs_proto_rawDescGZIP(), []int{42, 0}
}

func (x *ListSecretsResp_ResponseSecret) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListSecretsResp_ResponseSecret) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ListSecretsResp_ResponseSecret) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *ListSecretsResp_ResponseSecret) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

var File_protobuf_avs_proto protoreflect.FileDescriptor

var file_protobuf_avs_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x76, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x17, 0x0a, 0x05, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x12, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x06, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x73, 0x22, 0x2b, 0x0a, 0x0d, 0x43, 0x72, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x2c, 0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x22, 0xa3, 0x01, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x33, 0x0a, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb5, 0x02, 0x0a, 0x0b, 0x54, 0x61,
	0x73, 0x6b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x72, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x32, 0x0a,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x4b, 0x0a, 0x0f, 0x45, 0x54, 0x48, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x7e,
	0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x62, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x62, 0x69, 0x22, 0x7d,
	0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x61, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x62, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x62, 0x69, 0x22, 0xc3, 0x01,
	0x0a, 0x10, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x49, 0x0a, 0x09, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x51, 0x4c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xc7, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x74, 0x41, 0x50, 0x49, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3e, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x58, 0x0a,
	0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x4f, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x43, 0x0a, 0x0a, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x42, 0x0a,
	0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x22, 0xf2, 0x03, 0x0a, 0x08, 0x4c, 0x6f, 0x6f, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x69, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x0c, 0x65, 0x74,
	0x68, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x54,
	0x48, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x65, 0x74, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x61, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x61, 0x64, 0x12, 0x4c, 0x0a, 0x12, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x71, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e,
	0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x10, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x74, 0x5f,
	0x61, 0x70, 0x69, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x41, 0x50, 0x49, 0x4e, 0x6f,
	0x64, 0x65, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x73, 0x74, 0x41, 0x70, 0x69, 0x12, 0x3d, 0x0a,
	0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x4a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x64,
	0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x22, 0xd4, 0x04, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x65, 0x74, 0x68, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x54, 0x48, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x74, 0x68, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x43, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x61, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x61, 0x64, 0x12, 0x43, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x74, 0x5f,
	0x61, 0x70, 0x69, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x41, 0x50, 0x49, 0x4e, 0x6f,
	0x64, 0x65, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x73, 0x74, 0x41, 0x70, 0x69, 0x12, 0x30, 0x0a,
	0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12,
	0x30, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x6f, 0x6f, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x6f, 0x6f,
	0x70, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x6f, 0x6f, 0x70, 0x12, 0x3d, 0x0a,
	0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x8e, 0x0c, 0x0a, 0x09, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x05,
	0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x52, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x09, 0x72, 0x61, 0x77, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x52, 0x61, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x00,
	0x52, 0x08, 0x72, 0x61, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x05,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0xcc, 0x01,
	0x0a, 0x04, 0x53, 0x74, 0x65, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65,
	0x6e, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x1a, 0xbd, 0x03, 0x0a,
	0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x21,
	0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x12,
	0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x86, 0x02, 0x0a,
	0x0e, 0x52, 0x61, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x30, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x22, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf8, 0x03, 0x0a, 0x04, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x41, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x2a, 0x0a,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x64, 0x67,
	0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x64, 0x67, 0x65, 0x52, 0x05,
	0x65, 0x64, 0x67, 0x65, 0x73, 0x22, 0xbf, 0x02, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x78,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x65,
	0x64, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x64, 0x67, 0x65,
	0x52, 0x05, 0x65, 0x64, 0x67, 0x65, 0x73, 0x22, 0x20, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x24, 0x0a, 0x0c, 0x4e, 0x6f, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22,
	0x21, 0x0a, 0x09, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x22, 0x4c, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x61, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74,
	0x22, 0x55, 0x0a, 0x0b, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x3f, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x7c, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x50,
	0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x9b, 0x04, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x6f,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72,
	0x65, 0x1a, 0xa0, 0x03, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x30, 0x0a, 0x14, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x5f, 0x61, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x41,
	0x74, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x31, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x07, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x22, 0x6a, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0d,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65,
	0x22, 0x74, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x68,
	0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68,
	0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x22, 0x4a, 0x0a, 0x0c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x4a, 0x0a, 0x13, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xce,
	0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x37, 0x0a,
	0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22,
	0x1b, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x8e, 0x02, 0x0a,
	0x0d, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x39, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x53, 0x0a, 0x0b, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x6e, 0x73, 0x65, 0x74,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x10, 0x02, 0x12, 0x0d,
	0x0a, 0x09, 0x46, 0x69, 0x78, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x03, 0x12, 0x08, 0x0a,
	0x04, 0x43, 0x72, 0x6f, 0x6e, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x06, 0x22, 0x4b, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x61, 0x6c,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xca, 0x02, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a,
	0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x6d, 0x0a, 0x13, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7d, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x0e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x22, 0xc7, 0x01, 0x0a,
	0x0f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x40, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x1a, 0x72, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x64, 0x2a, 0xdf, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x0f, 0x0a, 0x0b, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0c, 0x52, 0x70, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0xe8, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x6e,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0xd0, 0x0f, 0x12, 0x16, 0x0a, 0x11,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0xd1, 0x0f, 0x12, 0x18, 0x0a, 0x13, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x52, 0x70, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xf0, 0x2e, 0x12, 0x1d,
	0x0a, 0x18, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x6f, 0x74,
	0x46, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xf1, 0x2e, 0x12, 0x16, 0x0a,
	0x11, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74,
	0x65, 0x64, 0x10, 0xd8, 0x36, 0x12, 0x19, 0x0a, 0x14, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xd9, 0x36,
	0x12, 0x15, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0xdb, 0x36, 0x2a, 0x50, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x2a, 0x2b, 0x0a, 0x0f, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x10, 0x02, 0x2a, 0x20, 0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x43, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x0a, 0x4a, 0x61, 0x76, 0x61,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x10, 0x00, 0x32, 0xc0, 0x09, 0x0a, 0x0a, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x15, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x3d, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x2e, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x42,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x18, 0x2e, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x46, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x12, 0x19, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x19, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x42, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x18,
	0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x11, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x2e, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x2e, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x51, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x3d, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x11,
	0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12,
	0x3d, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x11, 0x2e,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x50,
	0x0a, 0x0b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1e, 0x2e,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x51, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x23, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x1b, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x48,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x1a, 0x2e,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x23, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x42, 0x0c, 0x5a, 0x0a, 0x2e,
	0x2f, 0x61, 0x76, 0x73, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_protobuf_avs_proto_rawDescOnce sync.Once
	file_protobuf_avs_proto_rawDescData = file_protobuf_avs_proto_rawDesc
)

func file_protobuf_avs_proto_rawDescGZIP() []byte {
	file_protobuf_avs_proto_rawDescOnce.Do(func() {
		file_protobuf_avs_proto_rawDescData = protoimpl.X.CompressGZIP(file_protobuf_avs_proto_rawDescData)
	})
	return file_protobuf_avs_proto_rawDescData
}

var file_protobuf_avs_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_protobuf_avs_proto_msgTypes = make([]protoimpl.MessageInfo, 54)
var file_protobuf_avs_proto_goTypes = []interface{}{
	(Error)(0),                             // 0: aggregator.Error
	(TaskStatus)(0),                        // 1: aggregator.TaskStatus
	(ExecutionStatus)(0),                   // 2: aggregator.ExecutionStatus
	(CustomCodeLang)(0),                    // 3: aggregator.CustomCodeLang
	(TriggerReason_TriggerType)(0),         // 4: aggregator.TriggerReason.TriggerType
	(*IdReq)(nil),                          // 5: aggregator.IdReq
	(*FixedTimeCondition)(nil),             // 6: aggregator.FixedTimeCondition
	(*CronCondition)(nil),                  // 7: aggregator.CronCondition
	(*BlockCondition)(nil),                 // 8: aggregator.BlockCondition
	(*EventCondition)(nil),                 // 9: aggregator.EventCondition
	(*TaskTrigger)(nil),                    // 10: aggregator.TaskTrigger
	(*ETHTransferNode)(nil),                // 11: aggregator.ETHTransferNode
	(*ContractWriteNode)(nil),              // 12: aggregator.ContractWriteNode
	(*ContractReadNode)(nil),               // 13: aggregator.ContractReadNode
	(*GraphQLQueryNode)(nil),               // 14: aggregator.GraphQLQueryNode
	(*RestAPINode)(nil),                    // 15: aggregator.RestAPINode
	(*CustomCodeNode)(nil),                 // 16: aggregator.CustomCodeNode
	(*Condition)(nil),                      // 17: aggregator.Condition
	(*BranchNode)(nil),                     // 18: aggregator.BranchNode
	(*FilterNode)(nil),                     // 19: aggregator.FilterNode
	(*LoopNode)(nil),                       // 20: aggregator.LoopNode
	(*TaskEdge)(nil),                       // 21: aggregator.TaskEdge
	(*TaskNode)(nil),                       // 22: aggregator.TaskNode
	(*Execution)(nil),                      // 23: aggregator.Execution
	(*Task)(nil),                           // 24: aggregator.Task
	(*CreateTaskReq)(nil),                  // 25: aggregator.CreateTaskReq
	(*CreateTaskResp)(nil),                 // 26: aggregator.CreateTaskResp
	(*NonceRequest)(nil),                   // 27: aggregator.NonceRequest
	(*NonceResp)(nil),                      // 28: aggregator.NonceResp
	(*ListWalletReq)(nil),                  // 29: aggregator.ListWalletReq
	(*SmartWallet)(nil),                    // 30: aggregator.SmartWallet
	(*ListWalletResp)(nil),                 // 31: aggregator.ListWalletResp
	(*ListTasksReq)(nil),                   // 32: aggregator.ListTasksReq
	(*ListTasksResp)(nil),                  // 33: aggregator.ListTasksResp
	(*ListExecutionsReq)(nil),              // 34: aggregator.ListExecutionsReq
	(*ListExecutionsResp)(nil),             // 35: aggregator.ListExecutionsResp
	(*ExecutionReq)(nil),                   // 36: aggregator.ExecutionReq
	(*ExecutionStatusResp)(nil),            // 37: aggregator.ExecutionStatusResp
	(*GetKeyReq)(nil),                      // 38: aggregator.GetKeyReq
	(*KeyResp)(nil),                        // 39: aggregator.KeyResp
	(*TriggerReason)(nil),                  // 40: aggregator.TriggerReason
	(*GetWalletReq)(nil),                   // 41: aggregator.GetWalletReq
	(*GetWalletResp)(nil),                  // 42: aggregator.GetWalletResp
	(*UserTriggerTaskReq)(nil),             // 43: aggregator.UserTriggerTaskReq
	(*UserTriggerTaskResp)(nil),            // 44: aggregator.UserTriggerTaskResp
	(*CreateOrUpdateSecretReq)(nil),        // 45: aggregator.CreateOrUpdateSecretReq
	(*ListSecretsReq)(nil),                 // 46: aggregator.ListSecretsReq
	(*ListSecretsResp)(nil),                // 47: aggregator.ListSecretsResp
	(*DeleteSecretReq)(nil),                // 48: aggregator.DeleteSecretReq
	(*EventCondition_Matcher)(nil),         // 49: aggregator.EventCondition.Matcher
	nil,                                    // 50: aggregator.GraphQLQueryNode.VariablesEntry
	nil,                                    // 51: aggregator.RestAPINode.HeadersEntry
	(*Execution_Step)(nil),                 // 52: aggregator.Execution.Step
	(*Execution_TransferEventOutput)(nil),  // 53: aggregator.Execution.TransferEventOutput
	(*Execution_RawEventOutput)(nil),       // 54: aggregator.Execution.RawEventOutput
	(*Execution_BlockOutput)(nil),          // 55: aggregator.Execution.BlockOutput
	(*Execution_TimeOutput)(nil),           // 56: aggregator.Execution.TimeOutput
	(*ListTasksResp_Item)(nil),             // 57: aggregator.ListTasksResp.Item
	(*ListSecretsResp_ResponseSecret)(nil), // 58: aggregator.ListSecretsResp.ResponseSecret
	(*timestamppb.Timestamp)(nil),          // 59: google.protobuf.Timestamp
	(*wrapperspb.BoolValue)(nil),           // 60: google.protobuf.BoolValue
}
var file_protobuf_avs_proto_depIdxs = []int32{
	49, // 0: aggregator.EventCondition.matcher:type_name -> aggregator.EventCondition.Matcher
	6,  // 1: aggregator.TaskTrigger.fixed_time:type_name -> aggregator.FixedTimeCondition
	7,  // 2: aggregator.TaskTrigger.cron:type_name -> aggregator.CronCondition
	8,  // 3: aggregator.TaskTrigger.block:type_name -> aggregator.BlockCondition
	9,  // 4: aggregator.TaskTrigger.event:type_name -> aggregator.EventCondition
	50, // 5: aggregator.GraphQLQueryNode.variables:type_name -> aggregator.GraphQLQueryNode.VariablesEntry
	51, // 6: aggregator.RestAPINode.headers:type_name -> aggregator.RestAPINode.HeadersEntry
	3,  // 7: aggregator.CustomCodeNode.lang:type_name -> aggregator.CustomCodeLang
	17, // 8: aggregator.BranchNode.conditions:type_name -> aggregator.Condition
	11, // 9: aggregator.LoopNode.eth_transfer:type_name -> aggregator.ETHTransferNode
	12, // 10: aggregator.LoopNode.contract_write:type_name -> aggregator.ContractWriteNode
	13, // 11: aggregator.LoopNode.contract_read:type_name -> aggregator.ContractReadNode
	14, // 12: aggregator.LoopNode.graphql_data_query:type_name -> aggregator.GraphQLQueryNode
	15, // 13: aggregator.LoopNode.rest_api:type_name -> aggregator.RestAPINode
	16, // 14: aggregator.LoopNode.custom_code:type_name -> aggregator.CustomCodeNode
	11, // 15: aggregator.TaskNode.eth_transfer:type_name -> aggregator.ETHTransferNode
	12, // 16: aggregator.TaskNode.contract_write:type_name -> aggregator.ContractWriteNode
	13, // 17: aggregator.TaskNode.contract_read:type_name -> aggregator.ContractReadNode
	14, // 18: aggregator.TaskNode.graphql_query:type_name -> aggregator.GraphQLQueryNode
	15, // 19: aggregator.TaskNode.rest_api:type_name -> aggregator.RestAPINode
	18, // 20: aggregator.TaskNode.branch:type_name -> aggregator.BranchNode
	19, // 21: aggregator.TaskNode.filter:type_name -> aggregator.FilterNode
	20, // 22: aggregator.TaskNode.loop:type_name -> aggregator.LoopNode
	16, // 23: aggregator.TaskNode.custom_code:type_name -> aggregator.CustomCodeNode
	40, // 24: aggregator.Execution.reason:type_name -> aggregator.TriggerReason
	52, // 25: aggregator.Execution.steps:type_name -> aggregator.Execution.Step
	53, // 26: aggregator.Execution.transfer_event:type_name -> aggregator.Execution.TransferEventOutput
	54, // 27: aggregator.Execution.raw_event:type_name -> aggregator.Execution.RawEventOutput
	55, // 28: aggregator.Execution.block:type_name -> aggregator.Execution.BlockOutput
	56, // 29: aggregator.Execution.time:type_name -> aggregator.Execution.TimeOutput
	1,  // 30: aggregator.Task.status:type_name -> aggregator.TaskStatus
	10, // 31: aggregator.Task.trigger:type_name -> aggregator.TaskTrigger
	22, // 32: aggregator.Task.nodes:type_name -> aggregator.TaskNode
	21, // 33: aggregator.Task.edges:type_name -> aggregator.TaskEdge
	10, // 34: aggregator.CreateTaskReq.trigger:type_name -> aggregator.TaskTrigger
	22, // 35: aggregator.CreateTaskReq.nodes:type_name -> aggregator.TaskNode
	21, // 36: aggregator.CreateTaskReq.edges:type_name -> aggregator.TaskEdge
	30, // 37: aggregator.ListWalletResp.items:type_name -> aggregator.SmartWallet
	57, // 38: aggregator.ListTasksResp.items:type_name -> aggregator.ListTasksResp.Item
	23, // 39: aggregator.ListExecutionsResp.items:type_name -> aggregator.Execution
	2,  // 40: aggregator.ExecutionStatusResp.status:type_name -> aggregator.ExecutionStatus
	59, // 41: aggregator.GetKeyReq.issued_at:type_name -> google.protobuf.Timestamp
	59, // 42: aggregator.GetKeyReq.expired_at:type_name -> google.protobuf.Timestamp
	4,  // 43: aggregator.TriggerReason.type:type_name -> aggregator.TriggerReason.TriggerType
	40, // 44: aggregator.UserTriggerTaskReq.reason:type_name -> aggregator.TriggerReason
	2,  // 45: aggregator.UserTriggerTaskResp.status:type_name -> aggregator.ExecutionStatus
	58, // 46: aggregator.ListSecretsResp.items:type_name -> aggregator.ListSecretsResp.ResponseSecret
	1,  // 47: aggregator.ListTasksResp.Item.status:type_name -> aggregator.TaskStatus
	10, // 48: aggregator.ListTasksResp.Item.trigger:type_name -> aggregator.TaskTrigger
	38, // 49: aggregator.Aggregator.GetKey:input_type -> aggregator.GetKeyReq
	27, // 50: aggregator.Aggregator.GetNonce:input_type -> aggregator.NonceRequest
	41, // 51: aggregator.Aggregator.GetWallet:input_type -> aggregator.GetWalletReq
	29, // 52: aggregator.Aggregator.ListWallets:input_type -> aggregator.ListWalletReq
	25, // 53: aggregator.Aggregator.CreateTask:input_type -> aggregator.CreateTaskReq
	32, // 54: aggregator.Aggregator.ListTasks:input_type -> aggregator.ListTasksReq
	5,  // 55: aggregator.Aggregator.GetTask:input_type -> aggregator.IdReq
	34, // 56: aggregator.Aggregator.ListExecutions:input_type -> aggregator.ListExecutionsReq
	36, // 57: aggregator.Aggregator.GetExecution:input_type -> aggregator.ExecutionReq
	36, // 58: aggregator.Aggregator.GetExecutionStatus:input_type -> aggregator.ExecutionReq
	5,  // 59: aggregator.Aggregator.CancelTask:input_type -> aggregator.IdReq
	5,  // 60: aggregator.Aggregator.DeleteTask:input_type -> aggregator.IdReq
	43, // 61: aggregator.Aggregator.TriggerTask:input_type -> aggregator.UserTriggerTaskReq
	45, // 62: aggregator.Aggregator.CreateSecret:input_type -> aggregator.CreateOrUpdateSecretReq
	48, // 63: aggregator.Aggregator.DeleteSecret:input_type -> aggregator.DeleteSecretReq
	46, // 64: aggregator.Aggregator.ListSecrets:input_type -> aggregator.ListSecretsReq
	45, // 65: aggregator.Aggregator.UpdateSecret:input_type -> aggregator.CreateOrUpdateSecretReq
	39, // 66: aggregator.Aggregator.GetKey:output_type -> aggregator.KeyResp
	28, // 67: aggregator.Aggregator.GetNonce:output_type -> aggregator.NonceResp
	42, // 68: aggregator.Aggregator.GetWallet:output_type -> aggregator.GetWalletResp
	31, // 69: aggregator.Aggregator.ListWallets:output_type -> aggregator.ListWalletResp
	26, // 70: aggregator.Aggregator.CreateTask:output_type -> aggregator.CreateTaskResp
	33, // 71: aggregator.Aggregator.ListTasks:output_type -> aggregator.ListTasksResp
	24, // 72: aggregator.Aggregator.GetTask:output_type -> aggregator.Task
	35, // 73: aggregator.Aggregator.ListExecutions:output_type -> aggregator.ListExecutionsResp
	23, // 74: aggregator.Aggregator.GetExecution:output_type -> aggregator.Execution
	37, // 75: aggregator.Aggregator.GetExecutionStatus:output_type -> aggregator.ExecutionStatusResp
	60, // 76: aggregator.Aggregator.CancelTask:output_type -> google.protobuf.BoolValue
	60, // 77: aggregator.Aggregator.DeleteTask:output_type -> google.protobuf.BoolValue
	44, // 78: aggregator.Aggregator.TriggerTask:output_type -> aggregator.UserTriggerTaskResp
	60, // 79: aggregator.Aggregator.CreateSecret:output_type -> google.protobuf.BoolValue
	60, // 80: aggregator.Aggregator.DeleteSecret:output_type -> google.protobuf.BoolValue
	47, // 81: aggregator.Aggregator.ListSecrets:output_type -> aggregator.ListSecretsResp
	60, // 82: aggregator.Aggregator.UpdateSecret:output_type -> google.protobuf.BoolValue
	66, // [66:83] is the sub-list for method output_type
	49, // [49:66] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_protobuf_avs_proto_init() }
func file_protobuf_avs_proto_init() {
	if File_protobuf_avs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protobuf_avs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixedTimeCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ETHTransferNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractWriteNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractReadNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQLQueryNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestAPINode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomCodeNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoopNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskEdge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Execution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWalletReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmartWallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWalletResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTasksReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTasksResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExecutionsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExecutionsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWalletReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWalletResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTriggerTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTriggerTaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrUpdateSecretReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSecretsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSecretsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSecretReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventCondition_Matcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Execution_Step); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Execution_TransferEventOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Execution_RawEventOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Execution_BlockOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Execution_TimeOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTasksResp_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_avs_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSecretsResp_ResponseSecret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protobuf_avs_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*TaskTrigger_Manual)(nil),
		(*TaskTrigger_FixedTime)(nil),
		(*TaskTrigger_Cron)(nil),
		(*TaskTrigger_Block)(nil),
		(*TaskTrigger_Event)(nil),
	}
	file_protobuf_avs_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*LoopNode_EthTransfer)(nil),
		(*LoopNode_ContractWrite)(nil),
		(*LoopNode_ContractRead)(nil),
		(*LoopNode_GraphqlDataQuery)(nil),
		(*LoopNode_RestApi)(nil),
		(*LoopNode_CustomCode)(nil),
	}
	file_protobuf_avs_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*TaskNode_EthTransfer)(nil),
		(*TaskNode_ContractWrite)(nil),
		(*TaskNode_ContractRead)(nil),
		(*TaskNode_GraphqlQuery)(nil),
		(*TaskNode_RestApi)(nil),
		(*TaskNode_Branch)(nil),
		(*TaskNode_Filter)(nil),
		(*TaskNode_Loop)(nil),
		(*TaskNode_CustomCode)(nil),
	}
	file_protobuf_avs_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*Execution_TransferEvent)(nil),
		(*Execution_RawEvent)(nil),
		(*Execution_Block)(nil),
		(*Execution_Time)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protobuf_avs_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   54,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protobuf_avs_proto_goTypes,
		DependencyIndexes: file_protobuf_avs_proto_depIdxs,
		EnumInfos:         file_protobuf_avs_proto_enumTypes,
		MessageInfos:      file_protobuf_avs_proto_msgTypes,
	}.Build()
	File_protobuf_avs_proto = out.File
	file_protobuf_avs_proto_rawDesc = nil
	file_protobuf_avs_proto_goTypes = nil
	file_protobuf_avs_proto_depIdxs = nil
}
