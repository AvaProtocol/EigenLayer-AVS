syntax = "proto3";
package aggregator;

option go_package = "./avsproto";

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

enum TaskType {
  // Handle default/missing data
  ETHTransferTask = 0;
  
  // Generic contract execution which can be used for:
  // ERC20 Transfer, NFT Transfer, auto reclaim, auto restaking etc
  ContractExecutionTask = 1;
}

enum TriggerType {
  TimeTrigger = 0;
  ContractCallTrigger = 1;
}

message UUID {
  string bytes = 1;
}

message Checkin {
  string id = 1;
  string address = 2;
  string signature = 3;

  message Status {
    int64 uptime = 1;
    int64 queueDepth = 2;
    google.protobuf.Timestamp last_heartbeat = 3;
  }

  Status status = 4;

  string version = 5;
  int32 metricsPort = 6;
  string remoteIP = 7;
}

message CheckinResp {
  google.protobuf.Timestamp updated_at = 1;
}

message SyncTasksReq {
  string id = 1;
  string address = 2;
  string signature = 3;
}

message SyncTasksResp {
  string id = 1;
  string taskType = 2;
}

service Aggregator {
  // Auth
  rpc GetKey(GetKeyReq) returns (KeyResp) {};

  // Smart Acccount
  rpc GetNonce(NonceRequest) returns (NonceResp) {};
  rpc GetSmartAccountAddress(AddressRequest) returns (AddressResp) {};

  // Task Management
  rpc CreateTask(CreateTaskReq) returns (CreateTaskResp) {};
  rpc ListTasks(ListTasksReq) returns (ListTasksResp) {};
  rpc GetTask(UUID) returns (Task) {};
  rpc CancelTask(UUID) returns (google.protobuf.BoolValue) {};

  // Operator endpoint
  rpc Ping(Checkin) returns (CheckinResp) {};
  rpc SyncTasks(SyncTasksReq) returns (stream SyncTasksResp) {};
}

message ETHTransfer {
  string destination = 1;
  string amount = 2;
}

message ContractExecution {
  string contract_address = 1;
  string method = 2;
  string encoded_params = 3;
};

message TaskBody {
  ETHTransfer eth_transfer = 1;
  ContractExecution contract_execution = 2;
}

message TaskTrigger {
  message TimeCondition {
    repeated int64 fixed = 1;
    string cron = 2;
  }

  TriggerType type = 1;
  TimeCondition schedule = 2;
}


message Task {
    string owner = 1;
    string smart_account_address = 2;

    UUID id = 3;
    TaskType task_type = 4;
    TaskTrigger trigger = 5;
    TaskBody body= 6;

    int64 expired_at = 7;
    string memo = 8;
}

message CreateTaskReq {
    TaskType task_type = 1;
    TaskTrigger trigger = 2;
    TaskBody body= 3;

    int64 expired_at = 4;
    string memo = 5;
}

message CreateTaskResp {
    string id = 1;
}


message NonceRequest {
    string owner = 1;
}

message NonceResp {
    string nonce = 1;
}

message AddressRequest {
    string owner = 1;
}

message AddressResp {
    string smart_account_address = 1;
    string nonce = 2;
}

message ListTasksReq {}

message ListTasksResp {
    message TaskItemResp {
        string id = 1;
    }

    repeated TaskItemResp tasks = 1;
}

message GetKeyReq {
    string owner = 1;
    int64 expired_at = 2;
    string signature = 3;
}

message KeyResp {
    string key=1;
}
