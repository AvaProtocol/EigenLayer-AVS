syntax = "proto3";
package aggregator;

option go_package = "./avsproto";

import "google/protobuf/wrappers.proto";

message IdReq {
  string id = 1;
}

message FixedTimeCondition {
  repeated int64 epochs = 1;
}
// Simple timebase or cron syntax.
message CronCondition {
  repeated string schedule = 1;
}

message BlockCondition {
  int64 interval = 1;
}

// An arbitrary expression to express the condition.
// People can define condition example
//   chainlinkPrice("address-of-eth-usd-pair") > 2644500 && queryContract("contractaddress", "callmsg")[2] < = 5
// By allow arbitrary expression, people can mix and match to create conplex
// condition that match their workload
//
// The function to be used need to be pre-defined on our task egnine runtime.
// When a new block is build, our engine will execute these check
//
// The expression language is re-present by https://expr-lang.org/
message EventCondition {
  string expression = 1;
}

message TaskTrigger {
  string name = 1;
  oneof trigger_type {
    // manual task will not be check to be trigger, instead it can be trigger adhoc
    bool               manual = 2;
    // run at a specific epoch, name inspired by unix `at` utility
    FixedTimeCondition fixed_time   = 3;

    // interval such as every hour/day/ etc can be converted to cronsyntax by the sdk/studio
    CronCondition      cron    = 4;
   
    // currently the only support syntax is every <x> blocks
    BlockCondition     block   = 5;

    // support filter by event expression such as topic0, topic1, topoc2 and event_data and contract_address
    EventCondition     event   = 6;
  }
}

// gRPC internal error code use up to 17, we extend and start from 1000 to avoid any conflict 
// Guide: https://grpc.io/docs/guides/error/
// Go: https://github.com/grpc/grpc-go/blob/master/codes/codes.go#L199
enum Error {
  // An error that happen when the app can be recovered but the cause is unknow, rarely use, we try to use specific error as much as we can
  UnknowError              = 0;
  // internal rpc node error
  RpcNodeError             = 1000;
  // storage system isn't available to respond to query
  StorageUnavailable       = 2000;
  StorageWriteError        = 2001;
  // target chain of smart wallet is error and cannot used to determine smartwallet info
  SmartWalletRpcError      = 6000;
  SmartWalletNotFoundError = 6001;

  // Error occurs when we failed to migrate task data and it cannot be decode
  TaskDataCorrupted    = 7000;
  TaskDataMissingError = 7001;
}


// TaskStatus represents status of the task. The transition is as follow
enum TaskStatus {
  Active    = 0;
  Completed = 1;
  Failed    = 2;
  Canceled  = 3;
  Executing = 4;
}

message ETHTransferNode {
  string destination = 1;
  string amount = 2;
}

message ContractWriteNode {
  string contract_address = 1;
  string call_data = 2;

  // abi is necessary to decode the return
  string contract_abi = 3;
}

message ContractReadNode {
  string contract_address = 1;
  string call_data = 2;

  // abi and method name is necessary to decode the return
  string contract_abi = 3;
  string method = 4;
}


message GraphQLQueryNode {
  string url   = 1;
  string query = 2;

  map<string, string> variables = 3;
}

message RestAPINode {
  string              url     = 1;
  map<string, string> headers = 2;
  string              body    = 3;
  string              method  = 4;
}

enum CustomCodeLang {
  JavaScript = 0;
}

message CustomCodeNode {
  CustomCodeLang lang     = 1;
  string         source    = 2;
}

message Condition {
  string id = 1;
  string type = 2;
  string expression = 3;
}

message BranchNode {
  repeated Condition conditions = 1;
}

message FilterNode {
  // Filter node acts like .select or .filter to pluck out element in an array that evaluate the expression to true
  string expression = 1;
}

// LoopNode currently not support, but we pre-defined to reverse the field id
message LoopNode {
  // this is the variable name of any previous step so we can took it
  string input   = 1;

  // a var that the function can refer to it
  string iter_val = 2;
  string iter_key = 3;


  // inside the runner, it can access to the current value of the loop iteration through the iter_val/iter_key above
  oneof runner {
    // Transfer eth require no calldata etc, just a destination address and an eth amount to be sent
    ETHTransferNode   eth_transfer = 10;

    // Run one ore more contracts. The call call also be batched with tool like
    // multicall to wrap many calls. in a contract write, we need to generate signature and send as userops.
    ContractWriteNode contract_write = 11;
    // read data fron a target contract
    ContractReadNode contract_read = 12;
    // Make call to a graphql endpoint
    GraphQLQueryNode  graphql_data_query = 13 ;
    // Make call to a HTTP endpoint
    RestAPINode       rest_api = 14;
    CustomCodeNode    custom_code = 15;
  }
}

// The edge is relationship or direct between node
message TaskEdge {
  string id     = 1 ;
  string source = 2 ;
  string target = 3 ; 
}

message TaskNode {
  string id   = 2;
  string name = 3;

  // based on node_type one and only one of these field are set
  oneof task_type {
    // Transfer eth require no calldata etc, just a destination address and an eth amount to be sent
    ETHTransferNode   eth_transfer = 10;

    // Run one ore more contracts. The call call also be batched with tool like
    // multicall to wrap many calls. in a contract write, we need to generate signature and send as userops.
    ContractWriteNode contract_write = 11;
    // read data fron a target contract
    ContractReadNode contract_read = 12;
    // Make call to a graphql endpoint
    GraphQLQueryNode  graphql_query = 13;
    // Make call to a HTTP endpoint
    RestAPINode       rest_api = 14;
    // CustomCode allow to run arbitraty JavaScript.
    BranchNode        branch = 15;
    FilterNode        filter = 16;
    LoopNode          loop = 17;
    CustomCodeNode    custom_code = 18;
  }
}

message Execution {
  string id       = 1;
  int64 start_at = 2;
  int64 end_at   = 3;
  bool   success = 4;
  string error   = 5;

  TriggerMark trigger_mark = 6;
  // final return data of the whole execution of the task
  string result = 7;

  message Step {
    string node_id = 1;
    bool   success  = 2;
    // serialize data of the result. This is the value that we bind to step variable in subsequent step
    string output_data = 3;
    string log = 4; 
    string error = 5;
    int64 start_at = 6;
    int64 end_at = 7;
  }

  repeated Step steps = 8;
}

message Task {
  string id                   = 1;
  string owner                = 2;
  string smart_wallet_address = 3;

  // task won't be check before this
  int64  start_at   = 4;
  // task won't be run/check after this
  int64  expired_at = 5;
  // arbitrary data about this task. has a limit of 255 character
  string memo = 6;

  int64 completed_at = 7;

  // limit on how many time this task can run. Set to 0 will make it run unlimited until cancelling or reaching its expired time
  int64 max_execution = 8;
  // return how many time this task has run
  int64 total_execution = 9;
  int64 last_ran_at = 10;

  TaskStatus status  = 11;
  TaskTrigger trigger = 12;
  repeated TaskNode nodes = 13;
  repeated TaskEdge edges = 14;
}


message CreateTaskReq {
  TaskTrigger trigger          = 1;

  int64 start_at               = 2;
  int64 expired_at             = 3;

  int64 max_execution          = 4;

  // the smart wallet address that will be used to run this task
  // When leaving out, we will use the default(salt=0) wallet
  string smart_wallet_address  = 5;

  string memo                  = 6;
  repeated TaskNode nodes      = 7;
  repeated TaskEdge edges      = 8;
}

message CreateTaskResp {
  string id = 1;
}

message NonceRequest {
  string owner = 1;
}

message NonceResp {
  string nonce = 1;
}

message ListWalletReq {
  // filter out by factory address or salt
  // otherwise return all the wallet
  string factory = 1;
  string salt = 2;
}

message SmartWallet {
  string address = 1;
  string salt = 2;
  string factory = 3;
}

message ListWalletResp {
  repeated SmartWallet wallets = 1;
}


message ListTasksReq {
  // Filter out by the smart_wallet_address
  string smart_wallet_address = 1;
  string cursor = 2;
  int64 item_per_page = 3;
}

message ListTasksResp {
  message Item {
    string id                   = 1;
    string owner                = 2;
    string smart_wallet_address = 3;

    // task won't be check before this
    int64  start_at   = 4;
    // task won't be run/check after this
    int64  expired_at = 5;
    // arbitrary data about this task. has a limit of 255 character
    string memo = 6;

    int64 completed_at = 7;

    // limit on how many time this task can run. Set to 0 will make it run unlimited until cancelling or reaching its expired time
    int64 max_execution = 8;
    // return how many time this task has run
    int64 total_execution = 9;
    int64 last_ran_at = 10;

    TaskStatus status  = 11;
    TaskTrigger trigger = 12;
  }

  repeated Item tasks = 1;
  string cursor = 2;
}

message ListExecutionsReq {
  string id = 1;
  string cursor = 2;
  int64 item_per_page = 3;
}

message ListExecutionsResp {
  repeated Execution executions = 1;
  string cursor = 2;
}

message GetKeyReq {
  string owner = 1;
  int64  expired_at = 2;
  string signature = 3;
}

message KeyResp {
  string key=1;
}


// TriggerMark represent a lookup that we can use to identify when/where/how it is trigger
// In a block trigger, we will have block_number
// In an event trigger, we will have the log_index, tx_hash and the block_number
// In a time based trigger(cron/fixed time) we will have the epoch.
//
// TriggerMark is used to populate the `trigger.data` variable. Example, if this is a transfer
// event, then you will have access to trigger1.data.from_address trigger1.data.value
message TriggerMark {
  uint64 block_number = 1;
  uint64 log_index    = 2;
  string tx_hash      = 3;
  uint64 epoch        = 4;
}

message CreateWalletReq {
  string salt = 1;
  // this is the factory address for the wallet, when leaving its empty, we will use our default factory address
  string factory_address = 2;
}

message CreateWalletResp {
  string address = 1;
  string salt = 2;
  string factory_address = 3;
}

message UserTriggerTaskReq {
  string task_id = 1;
  TriggerMark trigger_mark = 2;
  // when setting run_inline=true, the execution run in the same request. the request is blocked until the execution is done
  // setting to false, the task will be execute in our normal queueu system, and the request won't block.
  // default value is false, for interact testing, set this to true
  bool run_inline = 3;
}

message UserTriggerTaskResp {
  bool result = 1;
  // if trigger inline, the execution id will be returned
  string execution_id = 2;
}

service Aggregator {
  // Exchange for an Auth Key to authenticate in subsequent request
  rpc GetKey(GetKeyReq) returns (KeyResp) {};

  // Smart Acccount Operation
  rpc GetNonce(NonceRequest)        returns (NonceResp) {};
  rpc CreateWallet(CreateWalletReq)       returns (CreateWalletResp) {};
  rpc ListWallets(ListWalletReq)    returns (ListWalletResp) {};

  // Task Management Operation
  rpc CreateTask(CreateTaskReq)         returns (CreateTaskResp) {};
  rpc ListTasks(ListTasksReq)           returns (ListTasksResp) {};
  rpc GetTask(IdReq)                    returns (Task) {};
  rpc ListExecutions(ListExecutionsReq) returns (ListExecutionsResp) {};
  rpc CancelTask(IdReq)                 returns (google.protobuf.BoolValue) {};
  rpc DeleteTask(IdReq)                 returns (google.protobuf.BoolValue) {};
  rpc TriggerTask(UserTriggerTaskReq)   returns (UserTriggerTaskResp) {};
}
