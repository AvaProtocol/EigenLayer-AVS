syntax = "proto3";
package aggregator;

option go_package = "./avsproto";

import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";

message IdReq {
  string id = 1;
}

enum Lang {
  JavaScript = 0;
}

// Triggers are always the first element in a task execution flow
// They have Config (static parameters) but no Input (no preceding nodes)

message FixedTimeTrigger {
  message Config {
    repeated int64 epochs = 1;
  }
  
  message Output {
    uint64 epoch = 1;
  }

  // Include Config as field so it is generated in Go
  Config config = 1;
}

// Simple timebase or cron syntax.
message CronTrigger {
  message Config {
    repeated string schedule = 1;
  }
  
  message Output {
    uint64 epoch = 1;
    string schedule_matched = 2; // Which schedule pattern was matched
  }

  // Include Config as field so it is generated in Go
  Config config = 1;
}

message BlockTrigger {
  message Config {
    int64 interval = 1;
  }
  
  message Output {
    uint64 block_number = 1;
    string block_hash = 2;
    uint64 timestamp = 3;
    string parent_hash = 4;
    string difficulty = 5;
    uint64 gas_limit = 6;
    uint64 gas_used = 7;
  }

  // Include Config as field so it is generated in Go
  Config config = 1;
}

// EventTrigger is a filter to match on an event. It's adhoc logic expression re-present in an array to match an ethereum event
message EventTrigger {
  message Matcher {
    // the type of Filter we support, right now, we support below value for 
    //  - topics:
    //  - address:
     string type = 1;

    // the payload of the type data to be mached. Each type will have different semantic meaning on how to match
    // Given type=topics`. This value is the topic array, for every non null element of the array we perform an equal check
    // If all are equal, the filter resolve to true
    // 
    // Example:
    // To find all ERC20 transfer event into or out to wallet 0x5DD596C901987A2b28C38A9C1DfBf86fFFc15d77 we can do
    // value = [
    //   [
    //     "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
    //     "0x5DD596C901987A2b28C38A9C1DfBf86fFFc15d77", // tx out
    //   ],
    //   [
    //     "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
    //     null,
    //     "0x5DD596C901987A2b28C38A9C1DfBf86fFFc15d77" // tx in
    //   ],
    // ]
    repeated string value = 2;
  }

  message Config {
    // an array of filter to be mach, as soon as any element of the array mach, the trigger is fired.
    repeated Matcher matcher = 1;
    string expression = 2;
  }
  
  message Output {
    // When the trigger is not a transfer event, we will have a raw event output only
    // These shape of data is https://docs.ethers.org/v6/api/providers/#Log
    Evm.Log evm_log = 1;
    
    // For transfer events specifically, we have enriched data
    TransferLogOutput transfer_log = 2;
  }
  
  message TransferLogOutput {
    string token_name = 1;
    string token_symbol = 2;
    uint32 token_decimals = 3;
    string transaction_hash = 4;
    string address = 5;
    uint64 block_number = 6;
    // timestamp of the block (in milliseconds)
    uint64 block_timestamp = 7;
    string from_address = 8;
    string to_address = 9;
    string value = 10;
    string value_formatted = 11;
    uint32 transaction_index = 12;
    uint32 log_index = 13;
  }

  // Include Config as field so it is generated in Go
  Config config = 1;
}


message TaskTrigger {
  string name = 1;
  oneof trigger_type {
    // manual task will not be check to be trigger, instead it can be trigger adhoc
    bool               manual = 2;
    // run at a specific epoch, name inspired by unix `at` utility
    FixedTimeTrigger fixed_time   = 3;

    // interval such as every hour/day/ etc can be converted to cronsyntax by the sdk/studio
    CronTrigger      cron    = 4;
   
    // currently the only support syntax is every <x> blocks
    BlockTrigger     block   = 5;

    // support filter by event expression such as topic0, topic1, topoc2 and event_data and contract_address
    EventTrigger     event   = 6;
  }
  string id = 7;
}

// gRPC internal error code use up to 17, we extend and start from 1000 to avoid any conflict 
// Guide: https://grpc.io/docs/guides/error/
// Go: https://github.com/grpc/grpc-go/blob/master/codes/codes.go#L199
enum Error {
  // An error that happen when the app can be recovered but the cause is unknow, rarely use, we try to use specific error as much as we can
  UnknowError              = 0;
  // internal rpc node error
  RpcNodeError             = 1000;
  // storage system isn't available to respond to query
  StorageUnavailable       = 2000;
  StorageWriteError        = 2001;
  // target chain of smart wallet is error and cannot used to determine smartwallet info
  SmartWalletRpcError      = 6000;
  SmartWalletNotFoundError = 6001;

  // Error occurs when we failed to migrate task data and it cannot be decode
  TaskDataCorrupted    = 7000;
  TaskDataMissingError = 7001;
  // Trigger Task failed
  TaskTriggerError     = 7003;
}


// TaskStatus represents status of the task. The transition is as follow
enum TaskStatus {
  Active    = 0;
  // Task is completd when it's reaching its max_execution or its expiration time
  Completed = 1;
  Failed    = 2;
  Canceled  = 3;
  Executing = 4;
}

// Execution Status re-present a run of the task
enum ExecutionStatus {
  Queued = 0;
  Finished = 2;
}


// Nodes process data from preceding triggers/nodes
// They have both Config (static parameters) and Input (runtime variables)

message ETHTransferNode {
  message Config {
    string destination = 1;
    string amount = 2;
  }

  message Output {
    string transaction_hash = 1;
  }

  // Include Config and Input as fields so they are generated in Go
  Config config = 1;
}

message ContractWriteNode {
  message Config {
    string contract_address = 1;
    string call_data = 2;
    // The ABI is only required to decode the return value of a method call.
    // If we don't need the result and only want the transaction hash (which is usually sufficient),
    // then we don't need to provide the ABI.
    string contract_abi = 3;
  }

  message Output {
    // The requirement for this shape of data is requested in https://github.com/AvaProtocol/EigenLayer-AVS/issues/153
    // https://docs.ethers.org/v6/api/providers/#TransactionReceipt
    // Ideally we shouldn't have to transport or store this at all. We should only store/pass the txhash, the consumer can construct
    // a full message of these through EVM RPC.
    // But due to requirement for easy to debug on client, we're storing and transport these over the wire
    Evm.UserOp user_op = 1;
    Evm.TransactionReceipt tx_receipt = 2;
  }

  // Include Config and Input as fields so they are generated in Go
  Config config = 1;
}

message ContractReadNode {
  message Config {
    string contract_address = 1;
    string call_data = 2;
    // The ABI are required to decode the return value and pass it to the next step.
    // Currently, we need to provide the contract ABI as a JSON string.
    // We don't need to include the full ABIâ€”just enough to decode the method call.
    string contract_abi = 3;
  }

  message Output {
    // The data is the result of querying the contract method. Becuase this is fetching data from the outside world,
    // we don't know the shape of data ahead of time.
    // At runtime, the data is dynamically parsed into the correct type for the node to consume
    // In case of smart contract, the return is always an array, then it's up to the client to map to the right field based on method signature
    repeated google.protobuf.Value data = 1;
  }

  // Include Config and Input as fields so they are generated in Go
  Config config = 1;
}


message GraphQLQueryNode {
  message Config {
    // Static configuration set at node creation time
    string url = 1;
    string query = 2;
    map<string, string> variables = 3;
  }

  message Output {
    // The data is the result of the graphql query. Becuase this is GraphQL, the data is a json object
    // The field of the json object is unknow, its depend on the query
    google.protobuf.Any data = 1;
  }

  // Include Config and Input as fields so they are generated in Go
  Config config = 1;
}

message RestAPINode {
  message Config {
    string url = 1;
    map<string, string> headers = 2;
    string body = 3;
    string method = 4;
  }

  message Output {
    google.protobuf.Any data = 1;
  }

  // Include Config and Input as fields so they are generated in Go
  Config config = 1;
}

message CustomCodeNode {
  message Config {
    Lang lang = 1;  // Language is static config set at creation time
    string source = 2;  // Source code can be provided as input variable
  }

  message Output {
    // Changed from google.protobuf.Any to google.protobuf.Value for better JavaScript native type support
    google.protobuf.Value data = 1;
  }

  // Include Config and Input as fields so they are generated in Go
  Config config = 1;
}

message BranchNode {
  message Condition {
    string id = 1;
    string type = 2;
    string expression = 3;
  }

  message Config {
    repeated Condition conditions = 1;
  }

  message Output {
    // the output of the branch node is the id of the condition that is true
    // the execution will continue to the next node belong to this condition 
    // In front-end, when rendering the historical execution, we can draw the relationship coming out of the condition that match this id
    string condition_id = 1;
  }

  // Include Config and Input as fields so they are generated in Go
  Config config = 1;
}

message FilterNode {
  message Config {
    // Filter node acts like .select or .filter to pluck out element in an array that evaluate the expression to true
    string expression = 1;
    
    // The node Id of a source node; we will extract the output of the source node at runtime.
    // The data should be iterable (array, object, etc.). Runtime validation will check compatibility.
    string source_id = 2;
  }

  message Output {
    // the output of the filter node is the filtered array after apply the filter expression. It works similar to filter of javascript
    google.protobuf.Any data = 1;
  }

  // Include Config and Input as fields so they are generated in Go
  Config config = 1;
}

// LoopNode currently not support, but we pre-defined to reverse the field id
message LoopNode {
  message Config {
    // source_variable is the variable name from a previous node whose data will be iterated over.
    // The node Id of a source node; we will extract the output of the source node at runtime.
    string source_id = 1;
    // iter_val is the variable name that will hold the current value during each iteration
    string iter_val = 2;
    // iter_key is the variable name that will hold the current key/index during each iteration
    string iter_key = 3;
  }

  // inside the runner, it can access to the current value of the loop iteration through the iter_val/iter_key above
  oneof runner {
    // Transfer eth require no calldata etc, just a destination address and an eth amount to be sent
    ETHTransferNode   eth_transfer = 10;

    // Run one ore more contracts. The call call also be batched with tool like
    // multicall to wrap many calls. in a contract write, we need to generate signature and send as userops.
    ContractWriteNode contract_write = 11;
    // read data fron a target contract
    ContractReadNode  contract_read = 12;
    // Make call to a graphql endpoint
    GraphQLQueryNode  graphql_data_query = 13 ;
    // Make call to a HTTP endpoint
    RestAPINode       rest_api = 14;
    CustomCodeNode    custom_code = 15;
  }

  message Output {
    string data = 1;
  }

  // Include Config and Input as fields so they are generated in Go
  Config config = 1;
}

// The edge is relationship or direct between node
message TaskEdge {
  string id     = 1 ;
  string source = 2 ;
  string target = 3 ; 
}

message TaskNode {
  string id   = 2;
  string name = 3;

  // based on node_type one and only one of these field are set
  oneof task_type {
    // Transfer eth require no calldata etc, just a destination address and an eth amount to be sent
    ETHTransferNode   eth_transfer = 10;

    // Run one ore more contracts. The call call also be batched with tool like
    // multicall to wrap many calls. in a contract write, we need to generate signature and send as userops.
    ContractWriteNode contract_write = 11;
    // read data fron a target contract
    ContractReadNode contract_read = 12;
    // Make call to a graphql endpoint
    GraphQLQueryNode  graphql_query = 13;
    // Make call to a HTTP endpoint
    RestAPINode       rest_api = 14;
    // CustomCode allow to run arbitraty JavaScript.
    BranchNode        branch = 15;
    FilterNode        filter = 16;
    LoopNode          loop = 17;
    CustomCodeNode    custom_code = 18;
  }
}

message Execution {
  string id      = 1;
  // timestamp when execution started (in milliseconds)
  int64 start_at = 2;
  // timestamp when execution ended (in milliseconds)
  int64 end_at   = 3;
  bool   success = 4;
  string error   = 5;

  TriggerReason reason = 6;

  message Step {
    string node_id = 1;
    bool   success  = 2;
    
    oneof output_data {
      ETHTransferNode.Output eth_transfer = 3;
      GraphQLQueryNode.Output graphql = 4;
      ContractReadNode.Output contract_read = 5;
      ContractWriteNode.Output contract_write = 6;
      CustomCodeNode.Output custom_code = 7;
      RestAPINode.Output rest_api = 8;
      BranchNode.Output branch = 9;
      FilterNode.Output filter = 10;
      LoopNode.Output loop = 11;
    }

    string log = 12; 
    string error = 13;
    // timestamp when step started (in milliseconds)
    int64 start_at = 14;
    // timestamp when step ended (in milliseconds)
    int64 end_at = 15;

    // Reference ticket: https://github.com/AvaProtocol/EigenLayer-AVS/issues/151
    repeated string inputs = 16;
  }

  repeated Step steps = 8;

  string trigger_name = 9;

  // Despite the name outputData this is actually the data after we enrich based the metadata at the point where the event is trigger.
  // Example at the time of triggering a transfer event, the only ifformation we had is ERC20 address, the topics, the from/to and amount, the log id and transaction hash
  // We then query Etherem RPC to find out more information such as token symbol, token decimal, parse the amount of out event raw data
  // Reference ticket: https://github.com/AvaProtocol/EigenLayer-AVS/issues/151
  //  
  // For transfer event, we had a set of fields
  // Chris define them here https://avaprotocol.slack.com/archives/D0570FNE0SJ/p1733336982524899
  // // The selected fields of the response to return to the client
  //  const FILTERED_FIELDS = [
  //    "token_name",
  //    "token_symbol",
  //    "token_decimals",
  //    "transaction_hash",
  //    "address",
  //    "block_timestamp",
  //    "block_number",
  //    "from_address",
  //    "to_address",
  //    "value",
  //    "value_formatted", // Formatted value
  //    "transaction_index",
  //    "log_index",
  //  ];
  // 
  // For non transfer event, we just have the raw data
  // For block event, we had the number at that trigger is meet.
  // For time trigger, it is the epoch
  oneof output_data {
    // For block triggers
    BlockTrigger.Output block_trigger = 10;
    
    // For time triggers
    FixedTimeTrigger.Output fixed_time_trigger = 11;
    CronTrigger.Output cron_trigger = 12;
    
    // For event triggers
    EventTrigger.Output event_trigger = 13;
  }
}


message Task {
  string id                   = 1;
  string owner                = 2;
  string smart_wallet_address = 3;

  // task won't be check before this (timestamp in milliseconds)
  int64  start_at   = 4;
  // task won't be run/check after this (timestamp in milliseconds)
  int64  expired_at = 5;
  // arbitrary data about this task. has a limit of 255 character
  string name = 6;

  // timestamp when task was completed (in milliseconds)
  int64 completed_at = 7;

  // limit on how many time this task can run. Set to 0 will make it run unlimited until cancelling or reaching its expired time
  int64 max_execution = 8;
  // return how many time this task has run
  int64 execution_count = 9;
  // timestamp when task was last executed (in milliseconds)
  int64 last_ran_at = 10;

  TaskStatus status  = 11;
  TaskTrigger trigger = 12;
  repeated TaskNode nodes = 13;
  repeated TaskEdge edges = 14;
}


message CreateTaskReq {
  TaskTrigger trigger          = 1;

  int64 start_at               = 2;
  int64 expired_at             = 3;

  int64 max_execution          = 4;

  // the smart wallet address that will be used to run this task
  // When leaving out, we will use the default(salt=0) wallet
  string smart_wallet_address  = 5;

  string name                  = 6;
  repeated TaskNode nodes      = 7;
  repeated TaskEdge edges      = 8;
}

message CreateTaskResp {
  string id = 1;
}

message NonceRequest {
  string owner = 1;
}

message NonceResp {
  string nonce = 1;
}

message ListWalletReq {
  // filter out by factory address or salt
  // otherwise return all the wallet
  string factory_address = 1; // TODO: Consider renaming to factoryAddress for consistency if this is used as a filter key matching SmartWallet.factoryAddress
  string salt            = 2;
}

message SmartWallet {
  string address = 1;
  string salt = 2;
  string factory = 3;
  bool is_hidden = 4;  // Whether the wallet is hidden
}

message ListWalletResp {
  repeated SmartWallet items = 1;
}


message ListTasksReq {
  // Filter out by the smart_wallet_address
  repeated string smart_wallet_address = 1;
  // Deprecated: Use before or after instead
  string cursor = 2 [deprecated=true];
  // Get items before this cursor value (for backward pagination)
  string before = 3;
  // Get items after this cursor value (for forward pagination)
  string after = 4;
  int64 limit = 5;
}

message ListTasksResp {
  message Item {
    string id                   = 1;
    string owner                = 2;
    string smart_wallet_address = 3;

    // task won't be check before this (timestamp in milliseconds)
    int64  start_at   = 4;
    // task won't be run/check after this (timestamp in milliseconds)
    int64  expired_at = 5;
    // arbitrary data about this task. has a limit of 255 character
    string name = 6;

    // timestamp when task was completed (in milliseconds)
    int64 completed_at = 7;

    // limit on how many time this task can run. Set to 0 will make it run unlimited until cancelling or reaching its expired time
    int64 max_execution = 8;
    // return how many time this task has run
    int64 execution_count = 9;
    // timestamp when task was last executed (in milliseconds)
    int64 last_ran_at = 10;

    TaskStatus status  = 11;
    TaskTrigger trigger = 12;
  }

  repeated Item items = 1;
  string cursor = 2;
  bool has_more = 3;
}

message ListExecutionsReq {
  repeated string task_ids = 1;
  // Deprecated: Use before or after instead
  string cursor = 2;
  // Get items before this cursor value (for backward pagination)
  string before = 3;
  // Get items after this cursor value (for forward pagination)
  string after = 4;
  int64 limit = 5;
}

message ListExecutionsResp {
  repeated Execution items = 1;
  string cursor = 2;
  bool has_more = 4;
}

message ExecutionReq {
  string task_id = 1;
  string execution_id = 2;
}

message ExecutionStatusResp {
  ExecutionStatus status = 1;
}

message GetKeyReq {
  // The message to sign, provided by GetSignatureFormat
  string message = 1;
  // The signature of the message
  string signature = 2;
}

message KeyResp {
  string key=1;
}


// TriggerReason represent a lookup that we can use to identify when/where/how it is trigger
// In a block trigger, we will have block_number
// In an event trigger, we will have the log_index, tx_hash and the block_number
// In a time based trigger(cron/fixed time) we will have the epoch.
//
// TriggerReason is used to populate the `<trigger-name>.data` variable. Example, if this is a transfer
// event, then you will have access to <trigger-name>.data.from_address or <trigger-name>.data.value
message TriggerReason {
  uint64 block_number = 1;
  uint64 log_index    = 2;
  string tx_hash      = 3;
  uint64 epoch        = 4;

  // This value isn't needed because when we query an execution or trigger a task, we know the trigger type 
  // But, The JS SDK needed this value probabaly to saving the lookup time when it only have execution id somehow
  // So we added this value to the respose for the client to consume and use however it want
  // Internaly we don't make use of this field.
  // The client was map the field based on the one-off field number so we need to match this number with TaskTrigger.trigger_type
  enum TriggerType {
    Unset     = 0;
    Manual    = 2;
    FixedTime = 3;
    Cron      = 4;
    Block     = 5;
    Event     = 6;
  }
  TriggerType type = 5;
}

message GetWalletReq {
  string salt = 1;
  // this is the factory address for the wallet, when leaving its empty, we will use our default factory address
  string factory_address = 2;
}

message GetWalletResp {
  string address = 1;
  string salt = 2;
  string factory_address = 3;
  bool is_hidden = 4;
  uint64 total_task_count = 5;
  uint64 active_task_count = 6;
  uint64 completed_task_count = 7;
  uint64 failed_task_count = 8;
  uint64 canceled_task_count = 9;
}

message SetWalletReq {
  string salt = 1;
  // this is the factory address for the wallet, when leaving its empty, we will use our default factory address
  string factory_address = 2;
  // whether the wallet should be hidden in getWallets results
  bool is_hidden = 3;
}

message UserTriggerTaskReq {
  string task_id = 1;
  TriggerReason reason = 2;
  // when setting is_blocking=true, the execution run in the same request. the request is blocked until the execution is done
  // setting to false, the task will be execute in our normal queueu system, and the request won't block.
  // default value is false, for interact testing, set this to true
  bool is_blocking = 3;
}

message UserTriggerTaskResp {
  // Regardless whether it is a block or async, we always get back the same kind of id for this trigger.
  // The caller then make a second request to GetExecution to check for the execution status and data.
  // In the blocking mode, the execution_id is materialized and has been created, we can then call GetExecution on it immediately to receive result
  // In async mode, the execution_id is created ahead of time and not materialized, calling GetExecutionStatus on it will return Status=Pending for example. Once Status=Completed you can call GetExecution to get all log and detail. Call GetExecution before it is completed will result in "Execution Not Found"
  string execution_id = 1;
  ExecutionStatus status = 2;
}

message CreateOrUpdateSecretReq {
  // name of the secret. it should be [a-zA-Z0-9_]+
  string name = 1;

  // value can be any valid unicode string
  // Secret is the only thing we can change in an update. workflow and org id cannot be change
  string secret = 2;

  // A secret when define can be at these level
  // - org: available to everything in the org. Currently this isn't supported yet. reserve for future use
  // - user: available to all workflow of an user. This is the default level
  // - workflow: available to a single workflow. To make a secret available to multiple workflow, either use org/user level or define them on other workflow.
  string workflow_id = 3;
  string org_id = 4;
}

message ListSecretsReq {
  string workflow_id = 1;
  // Deprecated: Use before or after instead
  string cursor = 2 [deprecated=true];
  // Get items before this cursor value (for backward pagination)
  string before = 3;
  // Get items after this cursor value (for forward pagination)
  string after = 4;
  int64 limit = 5;
}

// Standard pagination info following GraphQL cursor-based pagination
message PageInfo {
  string start_cursor = 1;     // Cursor pointing to the first item in the current page
  string end_cursor = 2;       // Cursor pointing to the last item in the current page
  bool has_previous_page = 3;  // Whether there are more items before the current page
  bool has_next_page = 4;      // Whether there are more items after the current page
}

message ListSecretsResp {
  message ResponseSecret {
    // when listing secret, we don't return its value, just secret and last update
    string name = 1;
    string scope = 2;

    string workflow_id = 4;
    string org_id = 5;
  }
  repeated ResponseSecret items = 1;
  PageInfo page_info = 2;
}

message DeleteSecretReq {
  string name = 1;

  // Delete the secret belong to the specific workflow. Without its, we delete the one belong to user
  string workflow_id = 2;

  // Delete the secret belong to the specific prg. Without its, we delete the one belong to user
  string org_id = 3;
}

message GetSignatureFormatReq {
  // The wallet address to include in the signature format
  string wallet = 1;
}

message GetSignatureFormatResp {
  // The formatted signature message with server-side values filled in
  string message = 1;
}

service Aggregator {
  // Exchange for an Auth Key to authenticate in subsequent request
  rpc GetKey(GetKeyReq) returns (KeyResp) {};
  
  // Get the signature format template used for authentication
  rpc GetSignatureFormat(GetSignatureFormatReq) returns (GetSignatureFormatResp) {};

  // Smart Acccount Operation
  rpc GetNonce(NonceRequest)        returns (NonceResp) {};
  rpc GetWallet(GetWalletReq)       returns (GetWalletResp) {};
  rpc SetWallet(SetWalletReq)       returns (GetWalletResp) {};
  rpc ListWallets(ListWalletReq)    returns (ListWalletResp) {};

  
  // Task Management Operation
  rpc CreateTask(CreateTaskReq)         returns (CreateTaskResp) {};
  rpc ListTasks(ListTasksReq)           returns (ListTasksResp) {};
  rpc GetTask(IdReq)                    returns (Task) {};
  rpc ListExecutions(ListExecutionsReq) returns (ListExecutionsResp) {};

  rpc GetExecution(ExecutionReq)     returns (Execution) {};
  rpc GetExecutionStatus(ExecutionReq)     returns (ExecutionStatusResp) {};

  rpc CancelTask(IdReq)                 returns (google.protobuf.BoolValue) {};
  rpc DeleteTask(IdReq)                 returns (google.protobuf.BoolValue) {};
  rpc TriggerTask(UserTriggerTaskReq)   returns (UserTriggerTaskResp) {};

  // CreateSecret allow you to define a secret to be used in your tasks. The secret can be used with a special syntax of ${{secrets.name }}.
  // You can decide whether to grant secret to a single workflow or many workflow, or all of your workflow
  // By default, your secret is available across all of your tasks.
  rpc CreateSecret(CreateOrUpdateSecretReq) returns (google.protobuf.BoolValue) {};
  rpc DeleteSecret(DeleteSecretReq) returns (google.protobuf.BoolValue) {};

  // Return all secrets belong to this user. Currently we don't support any fine tune or filter yet.
  // Only secret names and config data are returned. The secret value aren't returned.
  rpc ListSecrets(ListSecretsReq) returns (ListSecretsResp) {};

  // For simplicity, currently only the user who create the secrets can update its value, or update its permission.
  // The current implementation is also limited, update is an override action, not an appending action. So when updating, you need to pass the whole payload
  rpc UpdateSecret(CreateOrUpdateSecretReq) returns (google.protobuf.BoolValue) {};

  // The spec of these 2 RPCs are based on the following issue:
  // Reference: https://github.com/AvaProtocol/EigenLayer-AVS/issues/150
  // GetWorkflowCount returns the total count of workflows for the given eoa addresses or a list of smart wallet addresses belongs to the eoa in the auth key
  // When passing a list of smart wallet addresses, we will return the total count of workflows belongs to all of them
  // If the smart wallet address is not found in our system, we will ignore it and not count towards the total
  // if smart wallet address doesn't belong to the eoa in the auth key, we will also ignore it and not count towards the total
  rpc GetWorkflowCount(GetWorkflowCountReq) returns (GetWorkflowCountResp);

  // GetExecutionCount returns the total number of executions for specified workflow IDs or all workflows linked to the EOA in the auth key.
  // If no workflow IDs are provided, it counts executions for all workflows of the EOA.
  // Workflow IDs not found in the system are ignored.
  // Workflow IDs not linked to the EOA in the auth key are also ignored.
  rpc GetExecutionCount(GetExecutionCountReq) returns (GetExecutionCountResp);

  // GetExecutionStats returns execution statistics for a specified time period
  // It counts total executions, successful executions, and failed executions
  // If no workflow IDs are provided, it counts for all workflows of the authenticated user
  rpc GetExecutionStats(GetExecutionStatsReq) returns (GetExecutionStatsResp);

  // RunNodeWithInputs allows executing a single node with provided inputs for testing purposes
  rpc RunNodeWithInputs(RunNodeWithInputsReq) returns (RunNodeWithInputsResp);
}

// Request message for GetWorkflowCount
message GetWorkflowCountReq {
  repeated string addresses = 1; // Optional array of smart wallet addresses
}

// Response message for GetWorkflowCount
message GetWorkflowCountResp {
  // TODO: eventually to support active, cancel and other metrics
  int64 total = 1; // the total count of workflow
}

message GetExecutionCountReq {
  repeated string workflow_ids = 1; // Optional array of workflow IDs, count all executions of the owner if not provided
}

// Response message for GetExecutionCount
message GetExecutionCountResp {
  // TODO: eventually to support success, error count execution
  int64 total = 1; // The total count of executions
}

// Request message for GetExecutionStats
message GetExecutionStatsReq {
  repeated string workflow_ids = 1; // Optional array of workflow IDs
  int64 days = 2; // Number of days to look back (default: 7)
}

// Response message for GetExecutionStats
message GetExecutionStatsResp {
  int64 total = 1; // Total number of executions
  int64 succeeded = 2; // Number of successful executions
  int64 failed = 3; // Number of failed executions
  double avg_execution_time = 4; // Average execution time in milliseconds
}

// Request message for RunNodeWithInputs
message RunNodeWithInputsReq {
  string node_type = 1; // Type of node to execute (e.g., "blockTrigger", "customCode")
  map<string, google.protobuf.Value> node_config = 2; // Configuration for the node
  map<string, google.protobuf.Value> input_variables = 3; // Input variables for the node
}

// Response message for RunNodeWithInputs
message RunNodeWithInputsResp {
  bool success = 1; // Whether the execution was successful
  string error = 3; // Error message if execution failed
  string node_id = 4; // ID of the executed node
  
  // Use specific output types instead of generic Value
  oneof output_data {
    // Node outputs
    ETHTransferNode.Output eth_transfer = 10;
    GraphQLQueryNode.Output graphql = 11;
    ContractReadNode.Output contract_read = 12;
    ContractWriteNode.Output contract_write = 13;
    CustomCodeNode.Output custom_code = 14;
    RestAPINode.Output rest_api = 15;
    BranchNode.Output branch = 16;
    FilterNode.Output filter = 17;
    LoopNode.Output loop = 18;
    
    // Trigger outputs
    BlockTrigger.Output block_trigger = 20;
    FixedTimeTrigger.Output fixed_time_trigger = 21;
    CronTrigger.Output cron_trigger = 22;
    EventTrigger.Output event_trigger = 23;
  }
}

message Evm {
  message Log {
    // Consensus fields
    string address = 1;                // Address of the contract that generated the event
    repeated string topics = 2;        // List of topics provided by the contract
    string data = 3;                   // Supplied by the contract, usually ABI-encoded

    // Derived fields (filled in by the node but not secured by consensus)
    uint64 block_number = 4;          // Block in which the transaction was included
    string transaction_hash = 5;               // Hash of the transaction
    uint32 transaction_index = 6;              // Index of the transaction in the block
    string block_hash = 7;            // Hash of the block in which the transaction was included
    uint32 index = 8;                 // Index of the log in the receipt
    bool removed = 9;                 // True if this log was reverted due to chain reorganization
  }

  // Define to match https://docs.ethers.org/v6/api/providers/#TransactionReceipt as required in this ticket: https://github.com/AvaProtocol/EigenLayer-AVS/issues/153
  message TransactionReceipt {
    string hash = 1;
    string block_hash = 2; 
    uint64 block_number = 3;
    string from = 4; 
    uint64 gas_used = 6;
    uint64 gas_price = 7;
    uint64 cumulative_gas_used = 8;
    uint64 fee = 9;
    string contract_address = 10; 
    uint64 index = 11; 
    repeated string logs = 12; 
    string logs_bloom = 13; 
    string root = 14; 
    uint32 status = 15;
    uint32 type = 16;
    uint64 blob_gas_price = 17; 
    uint64 blob_gas_used = 18;
    string to = 19;
  }

  message UserOp {
    string sender = 1;
    string nonce = 2;
    string init_code = 3;
    string call_data = 4;
    string call_gas_limit = 5;
    string verification_gas_limit = 6;
    string pre_verification_gas = 7;
    string max_fee_per_gas = 8;
    string max_priority_fee_per_gas = 9;
    string paymaster_and_data = 10;
    string signature = 11;
  }
}
