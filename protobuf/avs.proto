syntax = "proto3";
package aggregator;

option go_package = "./avsproto";

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

message UUID {
  string bytes = 1;
}

message Checkin {
  string id = 1;
  string address = 2;
  string signature = 3;

  message Status {
    int64 uptime = 1;
    int64 queueDepth = 2;
    google.protobuf.Timestamp last_heartbeat = 3;
  }

  Status status = 4;

  string version = 5;
  int32 metricsPort = 6;
  string remoteIP = 7;
}

message CheckinResp {
  google.protobuf.Timestamp updated_at = 1;
}

message SyncTasksReq {
  string id = 1;
  string address = 2;
  string signature = 3;
  int64  monotonic_clock = 4;
}

enum TriggerType {
  TimeTrigger          = 0;
  ContractQueryTrigger = 1;
  ExpressionTrigger    = 2;
}

message TaskTrigger {
  TriggerType            trigger_type   = 1;

  TimeCondition          schedule       = 2;
  ContractQueryCondition contract_query = 3;
  ExpressionCondition    expression     = 4;
}

// gRPC internal error code use up to 17, we extend and start from 1000 to avoid any conflict 
// Guide: https://grpc.io/docs/guides/error/
// Go: https://github.com/grpc/grpc-go/blob/master/codes/codes.go#L199
enum Error {
  // An error that happen when the app can be recovered but the cause is unknow, rarely use, we try to use specific error as much as we can
  UnknowError              = 0;
  // internal rpc node error
  RpcNodeError             = 1000;
  // storage system isn't available to respond to query
  StorageUnavailable       = 2000;
  // target chain of smart wallet is error and cannot used to determine smartwallet info
  SmartWalletRpcError      = 6000;
  SmartWalletNotFoundError = 6001;
}

// Simple timebase or cron syntax.
message TimeCondition {
  repeated int64 fixed = 1;
  string cron = 2;
}
// A contract method that return true/false
// Ideally to use when we already have an existing contract that perform the
// check.
// This method will be evaluate every block
message ContractQueryCondition {
  string contract_address = 1;
  string callmsg = 2;
}

// An arbitrary expression to express the condition.
// People can define condition example
//   chainlinkPrice("address-of-eth-usd-pair") > 2644500 && queryContract("contractaddress", "callmsg")[2] < = 5
// By allow arbitrary expression, people can mix and match to create conplex
// condition that match their workload
//
// The function to be used need to be pre-defined on our task egnine runtime.
// When a new block is build, our engine will execute these check
//
// The expression language is re-present by https://expr-lang.org/
message ExpressionCondition {
  string expression = 1;
}

message SyncTasksResp {
  string id        = 1;
  string checkType = 2;

  TaskTrigger trigger = 3;
}

// TaskType represents what kind of work the task will perform
enum TaskType {
  // Handle default/missing data
  ETHTransferTask = 0;
  
  // Generic contract execution which can be used for:
  // ERC20 Transfer, NFT Transfer, auto reclaim, auto restaking etc
  // When executing a contract we need at least 2 things:
  // - target contract address
  // - the message to send to that contract
  ContractExecutionTask = 1;

  GraphQLDataQueryTask = 2;
  // Make call to a HTTP endpoint
  HTTPAPICallTask = 3;
  // CustomCode allow to run arbitraty JavaScript.
  CustomCodeTask = 4;
  BranchActionTask = 5;
}

// TaskStatus represents status of the task. The transition is as follow
enum TaskStatus {
  Active = 0;
  Completed = 1;
  Failed = 2;
  Canceled = 3;
  Executing = 4;
}

message ETHTransfer {
  string destination = 1;
  string amount = 2;
}

message ContractExecution {
  string contract_address = 1;
  string call_data = 2;

  string method = 3;
  string encoded_params = 4;
}

message GraphQLDataQuery {
  // TODO: support graphql variable
  string url   = 1;
  string query = 2;
}

message HTTPAPICall {
  string              url     = 1;
  map<string, string> headers = 2;
  string              body    = 3;
}

enum CustomCodeType {
  JavaScript = 0;
}

message CustomCode {
  CustomCodeType type     = 1;
  string          body    = 2;
}

message ConditionJump {
  string expression  = 1;
  string next        = 2;
}

message BranchAction {
  ConditionJump If                  = 1;
  repeated ConditionJump ElseIfs    = 2;
  ConditionJump Else                = 3;
}

message TaskAction {
  TaskType task_type = 1;

  string id = 2;
  string name = 3;

  // Next can be empty. In some kind of block, such as branching, the next is
  // based on branching condition
  repeated string next = 4;

  // Transfer eth
  ETHTransfer eth_transfer = 10;
  // Run one ore more contracts. The call call also be batched with tool like
  // multicall to wrap many calls
  ContractExecution contract_execution = 11;
  // Make call to a graphql endpoint
  GraphQLDataQuery graphql_data_query = 12;
  // Make call to a HTTP endpoint
  HTTPAPICall http_data_query = 13;
  // CustomCode allow to run arbitraty JavaScript.
  CustomCode custom_code = 14;
  BranchAction branch = 15;
}

message Execution {
  int64 epoch = 1;
  string user_op_hash = 2;
  string error = 3;
}

message Task {
    UUID id = 1;
    string owner = 2;
    string smart_account_address = 3;
    TaskTrigger trigger = 4;
    repeated TaskAction nodes = 5;

    // task won't be check before this
    int64 start_at = 6;
    // task won't be run/check after this
    int64 expired_at = 7;
    // arbitrary data about this task
    string memo = 8;

    int64 completed_at = 9;
    TaskStatus status  = 10;
    // repeatable means a task can continue to run even after the first execution
    bool repeatable  = 11;
    repeated Execution executions = 12;
}

message CreateTaskReq {
  TaskTrigger trigger = 1;
  repeated TaskAction actions  = 2;
  int64 start_at      = 3;
  int64 expired_at    = 4;
  string memo         = 5;
  // A repeatable task will continue to be run
  bool repeatable     = 6;
}

message CreateTaskResp {
  string id = 1;
}

message NonceRequest {
  string owner = 1;
}

message NonceResp {
  string nonce = 1;
}

message AddressRequest {
  string owner = 1;
}

message AddressResp {
  string smart_account_address = 1;
  // we need to use string to re-present the bigint salt, the client can decode it with etherjs for example
  string salt = 2;
}

message ListTasksReq {}

message ListTasksResp {
    message TaskItemResp {
        string id = 1;
        TaskStatus status = 2;
    }

    repeated TaskItemResp tasks = 1;
}

message GetKeyReq {
    string owner = 1;
    int64  expired_at = 2;
    string signature = 3;
}

message KeyResp {
    string key=1;
}

message UpdateChecksReq {
  string address = 1;
  string signature = 2;
  repeated string id = 3;
}

message UpdateChecksResp {
  google.protobuf.Timestamp updated_at = 1;
}

service Aggregator {
  // Auth
  rpc GetKey(GetKeyReq) returns (KeyResp) {};

  // Smart Acccount
  rpc GetNonce(NonceRequest) returns (NonceResp) {};
  rpc GetSmartAccountAddress(AddressRequest) returns (AddressResp) {};

  // Task Management
  rpc CreateTask(CreateTaskReq) returns (CreateTaskResp) {};
  rpc ListTasks(ListTasksReq) returns (ListTasksResp) {};
  rpc GetTask(UUID) returns (Task) {};
  rpc CancelTask(UUID) returns (google.protobuf.BoolValue) {};
  rpc DeleteTask(UUID) returns (google.protobuf.BoolValue) {};

  // Operator endpoint
  rpc Ping(Checkin) returns (CheckinResp) {};
  rpc SyncTasks(SyncTasksReq) returns (stream SyncTasksResp) {};
  rpc UpdateChecks(UpdateChecksReq) returns (UpdateChecksResp) {};
}
