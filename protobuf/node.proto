syntax = "proto3";
package aggregator;

option go_package = "./avsproto";

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "avs.proto";

message Checkin {
  string id = 1;
  string address = 2;
  string signature = 3;

  message Status {
    int64 uptime = 1;
    int64 queueDepth = 2;
    google.protobuf.Timestamp last_heartbeat = 3;
  }

  Status status = 4;

  string version = 5;
  int32 metricsPort = 6;
  string remoteIP = 7;
  int64 block_number = 8;
  int64 event_count = 9;
}

message CheckinResp {
  google.protobuf.Timestamp updated_at = 1;
}

message SyncMessagesReq {
  string id = 1;
  string address = 2;
  bytes  signature = 3;
  int64  monotonic_clock = 4;
}

enum MessageOp {
  Unset              = 0;
  MonitorTaskTrigger = 1;
  CancelTask         = 2;
  DeleteTask         = 3;
  CompletedTask      = 4;
}

message SyncMessagesResp {
  // message id is used to support dedup
  string id = 1;
  MessageOp op = 2;

  message TaskMetadata {
    string task_id = 1;
    // how many time this task can run
    int64 remain = 2;
    int64 expired_at = 3;
    TaskTrigger trigger = 4;
  };

  TaskMetadata task_metadata = 3;
}

message AckMessageReq {
  string id = 1;
}

message NotifyTriggersReq {
  string address = 1;
  string signature = 2;

  string task_id = 3;
  
  // Flattened from TriggerReason: Use the top-level TriggerType enum for consistency
  TriggerType trigger_type = 4;

  // Flattened from TriggerReason: trigger output data based on type
  oneof trigger_output {
    BlockTrigger.Output block_trigger = 5;
    FixedTimeTrigger.Output fixed_time_trigger = 6;
    CronTrigger.Output cron_trigger = 7;
    EventTrigger.Output event_trigger = 8;
    ManualTrigger.Output manual_trigger = 9;
  }
}

message NotifyTriggersResp {
  google.protobuf.Timestamp updated_at = 1;
}

service Node {
  // Operator endpoint
  rpc Ping(Checkin) returns (CheckinResp) {};
  rpc SyncMessages(SyncMessagesReq) returns (stream SyncMessagesResp) {};
  rpc Ack(AckMessageReq) returns (google.protobuf.BoolValue) {};
  rpc NotifyTriggers(NotifyTriggersReq) returns (NotifyTriggersResp) {};
}
