on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  workflow_dispatch:
    inputs:
      tag:
        description: tag the release
        required: true

name: Latest Release

defaults:
  run:
    shell: bash

jobs:
  # TODO: enable later
  #  lint:
  #    name: Lint files
  #    runs-on: 'ubuntu-latest'
  #    steps:
  #      - uses: actions/checkout@v2
  #      - uses: actions/setup-go@v2
  #        with:
  #          go-version: '1.16.3'
  #      - name: golangci-lint
  #        uses: golangci/golangci-lint-action@v2.5.2
  #        with:
  #          version: latest
  #  test:
  #    name: Run tests
  #    runs-on: 'ubuntu-latest'
  #    needs: lint
  #    steps:
  #      - uses: actions/checkout@v2
  #      - uses: actions/setup-go@v2
  #        with:
  #          go-version: '1.16.3'
  #      - run: go test -v -cover
  publish-docker:
    name: Publish latest image to docker hub
    runs-on: 'ubuntu-latest'
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            avaprotocol/ap-avs
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=raw,value={{sha}},enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          context: .
          file: dockerfiles/operator.Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  release:
    name: Create Release
    runs-on: 'ubuntu-latest'
    # needs: test
    strategy:
      matrix:
        goosarch:
          - 'darwin/amd64'
          - 'darwin/arm64'
          - 'linux/amd64'
          - 'linux/arm64'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v2
        with:
          go-version: '1.22.0'
      - name: Get OS and arch info
        run: |
          GOOSARCH=${{matrix.goosarch}}
          GOOS=${GOOSARCH%/*}
          GOARCH=${GOOSARCH#*/}
          #BINARY_NAME=${{github.repository}}-$GOOS-$GOARCH
          BINARY_NAME=ap-avs-$GOOS-$GOARCH
          echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV
          echo "GOOS=$GOOS" >> $GITHUB_ENV
          echo "GOARCH=$GOARCH" >> $GITHUB_ENV
      - name: Build
        run: |
          go build -o "$BINARY_NAME" -v
      - name: Release Notes
        run:
          git log $(git describe HEAD~ --tags --abbrev=0)..HEAD --pretty='format:* %h %s%n  * %an <%ae>' --no-merges >> ".github/RELEASE-TEMPLATE.md"
      - name: Release with Notes
        uses: softprops/action-gh-release@v1
        with:
          body_path: ".github/RELEASE-TEMPLATE.md"
          draft: true
          files: ${{env.BINARY_NAME}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


