name: Build and Publish PR Pre-release Docker

on:
  pull_request:
    types:
      - opened
      - synchronize
    branches:
      - main

jobs:
  build-and-publish-pr-docker:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for go-semantic-release

      - name: Setup Go environment
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Run Go linter
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

      - name: Run Go tests
        run: go test -v ./...

      - name: Generate commit summary
        id: git-summary
        run: |
          echo "## Summary" >> commit-summary.md
          echo "" >> commit-summary.md
          FEATURES=$(git log $(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)..HEAD --pretty=format:"%s" --no-merges | grep -i "^feat" | wc -l)
          FIXES=$(git log $(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)..HEAD --pretty=format:"%s" --no-merges | grep -i "^fix" | wc -l)
          DOCS=$(git log $(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)..HEAD --pretty=format:"%s" --no-merges | grep -i "^docs" | wc -l)
          echo "* $FEATURES new features" >> commit-summary.md
          echo "* $FIXES bug fixes" >> commit-summary.md
          echo "* $DOCS documentation updates" >> commit-summary.md
          echo "" >> commit-summary.md
          echo "## Changes since last release" >> commit-summary.md
          echo "" >> commit-summary.md
          git log $(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)..HEAD --pretty=format:"* %s (%h)" --no-merges >> commit-summary.md
          echo "COMMIT_SUMMARY<<EOF" >> $GITHUB_ENV
          cat commit-summary.md >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Run semantic versioning and create pre-release
        id: semantic-release
        uses: go-semantic-release/action@v1
        with:
          hooks: goreleaser
          changelog: ${{ env.COMMIT_SUMMARY }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Format Pre-release Version for Docker Tag
        id: formatted-version
        if: steps.semantic-release.outputs.new_release_published == 'true'
        run: |
          SEMREL_VERSION="${{ steps.semantic-release.outputs.new_version }}"
          # Extract base version (e.g., v1.2.3)
          BASE_VERSION=$(echo "$SEMREL_VERSION" | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+')
          # Extract the part after the base version and the first hyphen (the pre-release suffix)
          ORIGINAL_SUFFIX=$(echo "$SEMREL_VERSION" | sed -E "s/^${BASE_VERSION}-?(.*)$/\1/")

          if [[ -z "$BASE_VERSION" ]]; then # Should not happen with semantic versions
            echo "Error: Could not parse base version from $SEMREL_VERSION"
            exit 1
          fi

          if [[ -z "$ORIGINAL_SUFFIX" ]]; then # Not a pre-release, or unexpected format
            # This case should ideally not occur for a PR pre-release workflow.
            # Defaulting to base version with -rc.0 if suffix is missing.
            FINAL_DOCKER_TAG="${BASE_VERSION}-rc.0"
          elif [[ "$ORIGINAL_SUFFIX" == rc\.* ]]; then
            # Already in the desired rc.N format (e.g., rc.1, rc.10)
            FINAL_DOCKER_TAG="$SEMREL_VERSION"
          else
            # Extract trailing digits from the original suffix for the increment
            INCREMENT=$(echo "$ORIGINAL_SUFFIX" | grep -oE '[0-9]+$' || echo "0")
            FINAL_DOCKER_TAG="${BASE_VERSION}-rc.${INCREMENT}"
          fi
          echo "Original semantic-release version: $SEMREL_VERSION"
          echo "Formatted Docker tag: $FINAL_DOCKER_TAG"
          echo "docker_tag=${FINAL_DOCKER_TAG}" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Print Formatted Docker Tag (Debug)
        if: steps.semantic-release.outputs.new_release_published == 'true'
        run: |
          echo "The formatted Docker tag that will be used is: ${{ steps.formatted-version.outputs.docker_tag }}"

      - name: Login to Docker Hub
        if: steps.semantic-release.outputs.new_release_published == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        if: steps.semantic-release.outputs.new_release_published == 'true'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.semantic-release.outputs.new_release_published == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        if: steps.semantic-release.outputs.new_release_published == 'true'
        uses: docker/metadata-action@v5
        with:
          images: |
            avaprotocol/ap-avs
          tags: |
            # Only tag with the formatted pre-release version number
            type=raw,value=${{ steps.formatted-version.outputs.docker_tag }}

      - name: Build and push Docker image
        if: steps.semantic-release.outputs.new_release_published == 'true'
        uses: docker/build-push-action@v6
        with:
          build-args: |
            RELEASE_TAG=${{ steps.semantic-release.outputs.new_version }}
          platforms: linux/amd64,linux/arm64
          context: .
          file: dockerfiles/operator.Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
