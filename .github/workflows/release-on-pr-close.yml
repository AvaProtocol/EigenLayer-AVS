name: Create Release and Publish Docker on Main Merge

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  release-and-publish:
    # Only run this job if the PR was merged
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for go-semantic-release to create tags and releases
      packages: write # If you use GitHub Packages for Docker images (good to have)
    steps:
      - name: Checkout repository with full history
        uses: actions/checkout@v4
        with:
          # Fetch all history so go-semantic-release can determine the version based on all commits
          fetch-depth: 0
          # We need to check out the main branch itself after the merge, not the PR ref
          ref: main

      - name: Setup Go environment
        uses: actions/setup-go@v4
        with:
          go-version: '1.22' # Or your project's Go version

      # Optional: Add linting and testing steps here if you want to be absolutely sure
      # before a release, though these should ideally be covered by PR checks.
      # - name: Run Go linter
      #   uses: golangci/golangci-lint-action@v3
      #   with:
      #     version: latest
      # - name: Run Go tests
      #   run: go test -v ./...

      - name: Generate commit summary for changelog
        id: git-summary
        run: |
          echo "## Summary" >> commit-summary.md
          echo "" >> commit-summary.md
          # Correctly get commits since the last full tag on the main branch
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || git rev-list --max-parents=0 HEAD)
          echo "Last tag for changelog: $LAST_TAG"
          FEATURES=$(git log $LAST_TAG..HEAD --pretty=format:"%s" --no-merges | grep -i "^feat" | wc -l)
          FIXES=$(git log $LAST_TAG..HEAD --pretty=format:"%s" --no-merges | grep -i "^fix" | wc -l)
          DOCS=$(git log $LAST_TAG..HEAD --pretty=format:"%s" --no-merges | grep -i "^docs" | wc -l)
          echo "* $FEATURES new features" >> commit-summary.md
          echo "* $FIXES bug fixes" >> commit-summary.md
          echo "* $DOCS documentation updates" >> commit-summary.md
          echo "" >> commit-summary.md
          echo "## Changes since last release ($LAST_TAG)" >> commit-summary.md
          echo "" >> commit-summary.md
          git log $LAST_TAG..HEAD --pretty=format:"* %s (%h)" --no-merges >> commit-summary.md
          echo "COMMIT_SUMMARY<<EOF" >> $GITHUB_ENV
          cat commit-summary.md >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        shell: bash

      - name: Run semantic versioning and create full release
        id: semantic-release
        uses: go-semantic-release/action@v1
        with:
          # No pre-release flag needed; it should detect it's on main and do a full release
          hooks: goreleaser # Or other hooks you use for release asset generation
          changelog: ${{ env.COMMIT_SUMMARY }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Ensure these secrets are set in your repository for DockerHub push
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      # Docker build and push steps, only if a new release was published
      - name: Login to Docker Hub
        if: steps.semantic-release.outputs.new_release_published == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        if: steps.semantic-release.outputs.new_release_published == 'true'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.semantic-release.outputs.new_release_published == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        if: steps.semantic-release.outputs.new_release_published == 'true'
        uses: docker/metadata-action@v5
        with:
          images: |
            avaprotocol/ap-avs
          tags: |
            type=raw,value=latest # Push 'latest' tag
            type=raw,value=${{ steps.semantic-release.outputs.new_version }} # Push the full version tag (e.g., v1.2.3)
            type=semver,pattern={{version}} # Full semver (e.g., v1.2.3)
            type=semver,pattern={{major}}.{{minor}} # Major.minor (e.g., v1.2)
            type=semver,pattern={{major}} # Major only (e.g., v1)
            type=raw,value={{sha}} # Commit SHA

      - name: Build and push Docker image
        if: steps.semantic-release.outputs.new_release_published == 'true'
        uses: docker/build-push-action@v6
        with:
          build-args: |
            RELEASE_TAG=${{ steps.semantic-release.outputs.new_version }}
          platforms: linux/amd64,linux/arm64
          context: .
          file: dockerfiles/operator.Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
