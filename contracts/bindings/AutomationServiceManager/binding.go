// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contractAutomationServiceManager

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// BN254G1Point is an auto generated low-level Go binding around an user-defined struct.
type BN254G1Point struct {
	X *big.Int
	Y *big.Int
}

// BN254G2Point is an auto generated low-level Go binding around an user-defined struct.
type BN254G2Point struct {
	X [2]*big.Int
	Y [2]*big.Int
}

// IBLSSignatureCheckerNonSignerStakesAndSignature is an auto generated low-level Go binding around an user-defined struct.
type IBLSSignatureCheckerNonSignerStakesAndSignature struct {
	NonSignerQuorumBitmapIndices []uint32
	NonSignerPubkeys             []BN254G1Point
	QuorumApks                   []BN254G1Point
	ApkG2                        BN254G2Point
	Sigma                        BN254G1Point
	QuorumApkIndices             []uint32
	TotalStakeIndices            []uint32
	NonSignerStakeIndices        [][]uint32
}

// IBLSSignatureCheckerQuorumStakeTotals is an auto generated low-level Go binding around an user-defined struct.
type IBLSSignatureCheckerQuorumStakeTotals struct {
	SignedStakeForQuorum []*big.Int
	TotalStakeForQuorum  []*big.Int
}

// ISignatureUtilsSignatureWithSaltAndExpiry is an auto generated low-level Go binding around an user-defined struct.
type ISignatureUtilsSignatureWithSaltAndExpiry struct {
	Signature []byte
	Salt      [32]byte
	Expiry    *big.Int
}

// ContractAutomationServiceManagerMetaData contains all meta data concerning the ContractAutomationServiceManager contract.
var ContractAutomationServiceManagerMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"__avsDirectory\",\"type\":\"address\",\"internalType\":\"contractIAVSDirectory\"},{\"name\":\"__registryCoordinator\",\"type\":\"address\",\"internalType\":\"contractIRegistryCoordinator\"},{\"name\":\"__stakeRegistry\",\"type\":\"address\",\"internalType\":\"contractIStakeRegistry\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"avsDirectory\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"blsApkRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIBLSApkRegistry\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"checkSignatures\",\"inputs\":[{\"name\":\"msgHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"referenceBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"params\",\"type\":\"tuple\",\"internalType\":\"structIBLSSignatureChecker.NonSignerStakesAndSignature\",\"components\":[{\"name\":\"nonSignerQuorumBitmapIndices\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"},{\"name\":\"nonSignerPubkeys\",\"type\":\"tuple[]\",\"internalType\":\"structBN254.G1Point[]\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"quorumApks\",\"type\":\"tuple[]\",\"internalType\":\"structBN254.G1Point[]\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"apkG2\",\"type\":\"tuple\",\"internalType\":\"structBN254.G2Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"},{\"name\":\"Y\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"}]},{\"name\":\"sigma\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"quorumApkIndices\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"},{\"name\":\"totalStakeIndices\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"},{\"name\":\"nonSignerStakeIndices\",\"type\":\"uint32[][]\",\"internalType\":\"uint32[][]\"}]}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structIBLSSignatureChecker.QuorumStakeTotals\",\"components\":[{\"name\":\"signedStakeForQuorum\",\"type\":\"uint96[]\",\"internalType\":\"uint96[]\"},{\"name\":\"totalStakeForQuorum\",\"type\":\"uint96[]\",\"internalType\":\"uint96[]\"}]},{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"delegation\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIDelegationManager\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"deregisterOperatorFromAVS\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getOperatorRestakedStrategies\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getRestakeableStrategies\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"_pauserRegistry\",\"type\":\"address\",\"internalType\":\"contractIPauserRegistry\"},{\"name\":\"_initialPausedStatus\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_initialOwner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_whitelister\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pause\",\"inputs\":[{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"pauseAll\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[{\"name\":\"index\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pauserRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIPauserRegistry\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"registerOperatorToAVS\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorSignature\",\"type\":\"tuple\",\"internalType\":\"structISignatureUtils.SignatureWithSaltAndExpiry\",\"components\":[{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"salt\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"expiry\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"registryCoordinator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIRegistryCoordinator\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setPauserRegistry\",\"inputs\":[{\"name\":\"newPauserRegistry\",\"type\":\"address\",\"internalType\":\"contractIPauserRegistry\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setStaleStakesForbidden\",\"inputs\":[{\"name\":\"value\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setWhitelister\",\"inputs\":[{\"name\":\"whitelister\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"stakeRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIStakeRegistry\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"staleStakesForbidden\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"trySignatureAndApkVerification\",\"inputs\":[{\"name\":\"msgHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"apk\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"apkG2\",\"type\":\"tuple\",\"internalType\":\"structBN254.G2Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"},{\"name\":\"Y\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"}]},{\"name\":\"sigma\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[{\"name\":\"pairingSuccessful\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"siganatureIsValid\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"unpause\",\"inputs\":[{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateAVSMetadataURI\",\"inputs\":[{\"name\":\"_metadataURI\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"whitelister\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorAdded\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorRemoved\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Paused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PauserRegistrySet\",\"inputs\":[{\"name\":\"pauserRegistry\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIPauserRegistry\"},{\"name\":\"newPauserRegistry\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIPauserRegistry\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StaleStakesForbiddenUpdate\",\"inputs\":[{\"name\":\"value\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Unpaused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false}]",
	Bin: "0x6101606040523480156200001257600080fd5b5060405162004923380380620049238339810160408190526200003591620002da565b6001600160a01b0380841660c052808316608052811660a052818381836200005c620001ff565b5050506001600160a01b03811660e081905260408051636830483560e01b815290516368304835916004808201926020929091908290030181865afa158015620000aa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000d091906200032e565b6001600160a01b0316610100816001600160a01b031681525050806001600160a01b0316635df459466040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000129573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200014f91906200032e565b6001600160a01b0316610120816001600160a01b031681525050610100516001600160a01b031663df5cf7236040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001ab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001d191906200032e565b6001600160a01b03166101405250609a805460ff19166001179055620001f6620001ff565b50505062000355565b600054610100900460ff16156200026c5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620002bf576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6001600160a01b0381168114620002d757600080fd5b50565b600080600060608486031215620002f057600080fd5b8351620002fd81620002c1565b60208501519093506200031081620002c1565b60408501519092506200032381620002c1565b809150509250925092565b6000602082840312156200034157600080fd5b81516200034e81620002c1565b9392505050565b60805160a05160c05160e0516101005161012051610140516144d96200044a600039600081816103f501526116f90152600081816102c701526118db0152600081816102ee01528181611ab10152611c7301526000818161033b01528181610dd7015281816113c40152818161155c015261179601526000818161031201528181611ff70152818161215b015261220d0152600081816109d701528181610b3201528181610bc901528181612338015281816124bb015261255a015260008181610802015281816108910152818161091101528181611f97015281816120f301528181612276015261241601526144d96000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80636d14a987116100f9578063a98fb35511610097578063e481af9d11610071578063e481af9d14610417578063f2fde38b1461041f578063f98f5b9214610432578063fabc1cbc1461044557600080fd5b8063a98fb355146103d0578063b98d0908146103e3578063df5cf723146103f057600080fd5b8063886f1195116100d3578063886f1195146103865780638da5cb5b146103995780639926ee7d146103aa578063a364f4da146103bd57600080fd5b80636d14a987146103365780636efb46361461035d578063715018a61461037e57600080fd5b8063416c7e5e116101665780635c975abb116101405780635c975abb146102b15780635df45946146102c257806368304835146102e95780636b3aa72e1461031057600080fd5b8063416c7e5e14610263578063595c6a67146102765780635ac86ab71461027e57600080fd5b806310d67a2f146101ae578063136439dd146101c3578063171f1d5b146101d657806322758a4a1461020557806333cfb7b714610230578063358394d814610250575b600080fd5b6101c16101bc3660046137e6565b610458565b005b6101c16101d1366004613803565b610514565b6101e96101e436600461398f565b610653565b6040805192151583529015156020830152015b60405180910390f35b609754610218906001600160a01b031681565b6040516001600160a01b0390911681526020016101fc565b61024361023e3660046137e6565b6107dd565b6040516101fc91906139e0565b6101c161025e366004613a2d565b610cac565b6101c1610271366004613a8e565b610dd5565b6101c1610f4a565b6102a161028c366004613aba565b60cd54600160ff9092169190911b9081161490565b60405190151581526020016101fc565b60cd546040519081526020016101fc565b6102187f000000000000000000000000000000000000000000000000000000000000000081565b6102187f000000000000000000000000000000000000000000000000000000000000000081565b7f0000000000000000000000000000000000000000000000000000000000000000610218565b6102187f000000000000000000000000000000000000000000000000000000000000000081565b61037061036b366004613d8d565b611011565b6040516101fc929190613e80565b6101c1611f28565b60cc54610218906001600160a01b031681565b6033546001600160a01b0316610218565b6101c16103b8366004613f20565b611f3c565b6101c16103cb3660046137e6565b612098565b6101c16103de366004613fca565b6121ee565b609a546102a19060ff1681565b6102187f000000000000000000000000000000000000000000000000000000000000000081565b610243612270565b6101c161042d3660046137e6565b612639565b6101c16104403660046137e6565b6126af565b6101c1610453366004613803565b6126c0565b60cc60009054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cf919061401a565b6001600160a01b0316336001600160a01b0316146105085760405162461bcd60e51b81526004016104ff90614037565b60405180910390fd5b6105118161281c565b50565b60cc5460405163237dfb4760e11b81523360048201526001600160a01b03909116906346fbf68e90602401602060405180830381865afa15801561055c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105809190614081565b61059c5760405162461bcd60e51b81526004016104ff9061409e565b60cd54818116146106155760405162461bcd60e51b815260206004820152603860248201527f5061757361626c652e70617573653a20696e76616c696420617474656d70742060448201527f746f20756e70617573652066756e6374696f6e616c697479000000000000000060648201526084016104ff565b60cd81905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d906020015b60405180910390a250565b60008060007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018787600001518860200151886000015160006002811061069b5761069b6140e6565b60200201518951600160200201518a602001516000600281106106c0576106c06140e6565b60200201518b602001516001600281106106dc576106dc6140e6565b602090810291909101518c518d8301516040516107399a99989796959401988952602089019790975260408801959095526060870193909352608086019190915260a085015260c084015260e08301526101008201526101200190565b6040516020818303038152906040528051906020012060001c61075c91906140fc565b90506107cf61077561076e8884612913565b86906129aa565b61077d612a3e565b6107c56107b6856107b0604080518082018252600080825260209182015281518083019092526001825260029082015290565b90612913565b6107bf8c612afe565b906129aa565b886201d4c0612b8e565b909890975095505050505050565b6040516309aa152760e11b81526001600160a01b0382811660048301526060916000917f000000000000000000000000000000000000000000000000000000000000000016906313542a4e90602401602060405180830381865afa158015610849573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086d919061411e565b60405163871ef04960e01b8152600481018290529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063871ef04990602401602060405180830381865afa1580156108d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fc9190614137565b90506001600160c01b038116158061099657507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639aa1653d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561096d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109919190614160565b60ff16155b156109b257505060408051600081526020810190915292915050565b60006109c6826001600160c01b0316612db2565b90506000805b8251811015610a9c577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633ca5a5f5848381518110610a1657610a166140e6565b01602001516040516001600160e01b031960e084901b16815260f89190911c6004820152602401602060405180830381865afa158015610a5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7e919061411e565b610a889083614193565b915080610a94816141ab565b9150506109cc565b506000816001600160401b03811115610ab757610ab761381c565b604051908082528060200260200182016040528015610ae0578160200160208202803683370190505b5090506000805b8451811015610c9f576000858281518110610b0457610b046140e6565b0160200151604051633ca5a5f560e01b815260f89190911c6004820181905291506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633ca5a5f590602401602060405180830381865afa158015610b79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9d919061411e565b905060005b81811015610c89576040516356e4026d60e11b815260ff84166004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063adc804da906044016040805180830381865afa158015610c17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3b91906141dd565b60000151868681518110610c5157610c516140e6565b6001600160a01b039092166020928302919091019091015284610c73816141ab565b9550508080610c81906141ab565b915050610ba2565b5050508080610c97906141ab565b915050610ae7565b5090979650505050505050565b600054610100900460ff1615808015610ccc5750600054600160ff909116105b80610ce65750303b158015610ce6575060005460ff166001145b610d495760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104ff565b6000805460ff191660011790558015610d6c576000805461ff0019166101001790555b610d768585612e74565b610d7f83612f5e565b610d8882612fc9565b8015610dce576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e57919061401a565b6001600160a01b0316336001600160a01b031614610f035760405162461bcd60e51b815260206004820152605c60248201527f424c535369676e6174757265436865636b65722e6f6e6c79436f6f7264696e6160448201527f746f724f776e65723a2063616c6c6572206973206e6f7420746865206f776e6560648201527f72206f6620746865207265676973747279436f6f7264696e61746f7200000000608482015260a4016104ff565b609a805460ff19168215159081179091556040519081527f40e4ed880a29e0f6ddce307457fb75cddf4feef7d3ecb0301bfdf4976a0e2dfc9060200160405180910390a150565b60cc5460405163237dfb4760e11b81523360048201526001600160a01b03909116906346fbf68e90602401602060405180830381865afa158015610f92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb69190614081565b610fd25760405162461bcd60e51b81526004016104ff9061409e565b60001960cd81905560405190815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a2565b60408051808201909152606080825260208201526000846110885760405162461bcd60e51b8152602060048201526037602482015260008051602061448483398151915260448201527f7265733a20656d7074792071756f72756d20696e70757400000000000000000060648201526084016104ff565b604083015151851480156110a0575060a08301515185145b80156110b0575060c08301515185145b80156110c0575060e08301515185145b61112a5760405162461bcd60e51b8152602060048201526041602482015260008051602061448483398151915260448201527f7265733a20696e7075742071756f72756d206c656e677468206d69736d6174636064820152600d60fb1b608482015260a4016104ff565b825151602084015151146111a25760405162461bcd60e51b815260206004820152604460248201819052600080516020614484833981519152908201527f7265733a20696e707574206e6f6e7369676e6572206c656e677468206d69736d6064820152630c2e8c6d60e31b608482015260a4016104ff565b4363ffffffff168463ffffffff16106112115760405162461bcd60e51b815260206004820152603c602482015260008051602061448483398151915260448201527f7265733a20696e76616c6964207265666572656e636520626c6f636b0000000060648201526084016104ff565b6040805180820182526000808252602080830191909152825180840190935260608084529083015290866001600160401b038111156112525761125261381c565b60405190808252806020026020018201604052801561127b578160200160208202803683370190505b506020820152866001600160401b038111156112995761129961381c565b6040519080825280602002602001820160405280156112c2578160200160208202803683370190505b50815260408051808201909152606080825260208201528560200151516001600160401b038111156112f6576112f661381c565b60405190808252806020026020018201604052801561131f578160200160208202803683370190505b5081526020860151516001600160401b0381111561133f5761133f61381c565b604051908082528060200260200182016040528015611368578160200160208202803683370190505b508160200181905250600061143a8a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051639aa1653d60e01b815290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169350639aa1653d925060048083019260209291908290030181865afa158015611411573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114359190614160565b612feb565b905060005b8760200151518110156116d55761148488602001518281518110611465576114656140e6565b6020026020010151805160009081526020918201519091526040902090565b8360200151828151811061149a5761149a6140e6565b6020908102919091010152801561155a5760208301516114bb60018361421c565b815181106114cb576114cb6140e6565b602002602001015160001c836020015182815181106114ec576114ec6140e6565b602002602001015160001c1161155a576040805162461bcd60e51b815260206004820152602481019190915260008051602061448483398151915260448201527f7265733a206e6f6e5369676e65725075626b657973206e6f7420736f7274656460648201526084016104ff565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166304ec63518460200151838151811061159f5761159f6140e6565b60200260200101518b8b6000015185815181106115be576115be6140e6565b60200260200101516040518463ffffffff1660e01b81526004016115fb9392919092835263ffffffff918216602084015216604082015260600190565b602060405180830381865afa158015611618573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163c9190614137565b6001600160c01b03168360000151828151811061165b5761165b6140e6565b6020026020010181815250506116c161076e6116958486600001518581518110611687576116876140e6565b60200260200101511661307e565b8a6020015184815181106116ab576116ab6140e6565b60200260200101516130a990919063ffffffff16565b9450806116cd816141ab565b91505061143f565b50506116e08361318d565b609a5490935060ff166000816116f7576000611779565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c448feb86040518163ffffffff1660e01b8152600401602060405180830381865afa158015611755573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611779919061411e565b905060005b8a811015611df75782156118d9578963ffffffff16827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663249a0c428f8f868181106117d5576117d56140e6565b60405160e085901b6001600160e01b031916815292013560f81c600483015250602401602060405180830381865afa158015611815573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611839919061411e565b6118439190614193565b116118d95760405162461bcd60e51b8152602060048201526066602482015260008051602061448483398151915260448201527f7265733a205374616b6552656769737472792075706461746573206d7573742060648201527f62652077697468696e207769746864726177616c44656c6179426c6f636b732060848201526577696e646f7760d01b60a482015260c4016104ff565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166368bccaac8d8d8481811061191a5761191a6140e6565b9050013560f81c60f81b60f81c8c8c60a00151858151811061193e5761193e6140e6565b60209081029190910101516040516001600160e01b031960e086901b16815260ff909316600484015263ffffffff9182166024840152166044820152606401602060405180830381865afa15801561199a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119be9190614233565b6001600160401b0319166119e18a604001518381518110611465576114656140e6565b67ffffffffffffffff191614611a7d5760405162461bcd60e51b8152602060048201526061602482015260008051602061448483398151915260448201527f7265733a2071756f72756d41706b206861736820696e2073746f72616765206460648201527f6f6573206e6f74206d617463682070726f76696465642071756f72756d2061706084820152606b60f81b60a482015260c4016104ff565b611aad89604001518281518110611a9657611a966140e6565b6020026020010151876129aa90919063ffffffff16565b95507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c8294c568d8d84818110611af057611af06140e6565b9050013560f81c60f81b60f81c8c8c60c001518581518110611b1457611b146140e6565b60209081029190910101516040516001600160e01b031960e086901b16815260ff909316600484015263ffffffff9182166024840152166044820152606401602060405180830381865afa158015611b70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b94919061425e565b85602001518281518110611baa57611baa6140e6565b6001600160601b03909216602092830291909101820152850151805182908110611bd657611bd66140e6565b602002602001015185600001518281518110611bf457611bf46140e6565b60200260200101906001600160601b031690816001600160601b0316815250506000805b8a6020015151811015611de257611c6c86600001518281518110611c3e57611c3e6140e6565b60200260200101518f8f86818110611c5857611c586140e6565b600192013560f81c9290921c811614919050565b15611dd0577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f2be94ae8f8f86818110611cb257611cb26140e6565b9050013560f81c60f81b60f81c8e89602001518581518110611cd657611cd66140e6565b60200260200101518f60e001518881518110611cf457611cf46140e6565b60200260200101518781518110611d0d57611d0d6140e6565b60209081029190910101516040516001600160e01b031960e087901b16815260ff909416600485015263ffffffff92831660248501526044840191909152166064820152608401602060405180830381865afa158015611d71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d95919061425e565b8751805185908110611da957611da96140e6565b60200260200101818151611dbd9190614279565b6001600160601b03169052506001909101905b80611dda816141ab565b915050611c18565b50508080611def906141ab565b91505061177e565b505050600080611e118c868a606001518b60800151610653565b9150915081611e825760405162461bcd60e51b8152602060048201526043602482015260008051602061448483398151915260448201527f7265733a2070616972696e6720707265636f6d70696c652063616c6c206661696064820152621b195960ea1b608482015260a4016104ff565b80611ee35760405162461bcd60e51b8152602060048201526039602482015260008051602061448483398151915260448201527f7265733a207369676e617475726520697320696e76616c69640000000000000060648201526084016104ff565b50506000878260200151604051602001611efe9291906142a1565b60408051808303601f190181529190528051602090910120929b929a509198505050505050505050565b611f30613228565b611f3a6000613282565b565b60cd5415611f8c5760405162461bcd60e51b815260206004820152601c60248201527f5061757361626c653a20636f6e7472616374206973207061757365640000000060448201526064016104ff565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611fd45760405162461bcd60e51b81526004016104ff906142e9565b611fdf6098836132d4565b50604051639926ee7d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639926ee7d9061202e90859085906004016143ae565b600060405180830381600087803b15801561204857600080fd5b505af115801561205c573d6000803e3d6000fd5b50506040516001600160a01b03851692507fac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d9150600090a25050565b60cd54156120e85760405162461bcd60e51b815260206004820152601c60248201527f5061757361626c653a20636f6e7472616374206973207061757365640000000060448201526064016104ff565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146121305760405162461bcd60e51b81526004016104ff906142e9565b61213b6098826132e9565b506040516351b27a6d60e11b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063a364f4da90602401600060405180830381600087803b15801561219f57600080fd5b505af11580156121b3573d6000803e3d6000fd5b50506040516001600160a01b03841692507f80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d9150600090a250565b6121f6613228565b60405163a98fb35560e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a98fb355906122429084906004016143f9565b600060405180830381600087803b15801561225c57600080fd5b505af1158015610dce573d6000803e3d6000fd5b606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639aa1653d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f69190614160565b60ff1690508061231457505060408051600081526020810190915290565b6000805b828110156123c957604051633ca5a5f560e01b815260ff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690633ca5a5f590602401602060405180830381865afa158015612387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ab919061411e565b6123b59083614193565b9150806123c1816141ab565b915050612318565b506000816001600160401b038111156123e4576123e461381c565b60405190808252806020026020018201604052801561240d578160200160208202803683370190505b5090506000805b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639aa1653d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612472573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124969190614160565b60ff1681101561262f57604051633ca5a5f560e01b815260ff821660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690633ca5a5f590602401602060405180830381865afa15801561250a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252e919061411e565b905060005b8181101561261a576040516356e4026d60e11b815260ff84166004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063adc804da906044016040805180830381865afa1580156125a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125cc91906141dd565b600001518585815181106125e2576125e26140e6565b6001600160a01b039092166020928302919091019091015283612604816141ab565b9450508080612612906141ab565b915050612533565b50508080612627906141ab565b915050612414565b5090949350505050565b612641613228565b6001600160a01b0381166126a65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104ff565b61051181613282565b6126b7613228565b61051181612fc9565b60cc60009054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612713573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612737919061401a565b6001600160a01b0316336001600160a01b0316146127675760405162461bcd60e51b81526004016104ff90614037565b60cd5419811960cd541916146127e55760405162461bcd60e51b815260206004820152603860248201527f5061757361626c652e756e70617573653a20696e76616c696420617474656d7060448201527f7420746f2070617573652066756e6374696f6e616c697479000000000000000060648201526084016104ff565b60cd81905560405181815233907f3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c90602001610648565b6001600160a01b0381166128aa5760405162461bcd60e51b815260206004820152604960248201527f5061757361626c652e5f73657450617573657252656769737472793a206e657760448201527f50617573657252656769737472792063616e6e6f7420626520746865207a65726064820152686f206164647265737360b81b608482015260a4016104ff565b60cc54604080516001600160a01b03928316815291831660208301527f6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6910160405180910390a160cc80546001600160a01b0319166001600160a01b0392909216919091179055565b604080518082019091526000808252602082015261292f6136f7565b835181526020808501519082015260408082018490526000908360608460076107d05a03fa905080801561296257612964565bfe5b50806129a25760405162461bcd60e51b815260206004820152600d60248201526c1958cb5b5d5b0b59985a5b1959609a1b60448201526064016104ff565b505092915050565b60408051808201909152600080825260208201526129c6613715565b835181526020808501518183015283516040808401919091529084015160608301526000908360808460066107d05a03fa90508080156129625750806129a25760405162461bcd60e51b815260206004820152600d60248201526c1958cb5859190b59985a5b1959609a1b60448201526064016104ff565b612a46613733565b50604080516080810182527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28183019081527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6060830152815281518083019092527f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec82527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d60208381019190915281019190915290565b604080518082019091526000808252602082015260008080612b2e600080516020614464833981519152866140fc565b90505b612b3a816132fe565b9093509150600080516020614464833981519152828309831415612b74576040805180820190915290815260208101919091529392505050565b600080516020614464833981519152600182089050612b31565b604080518082018252868152602080820186905282518084019093528683528201849052600091829190612bc0613758565b60005b6002811015612d85576000612bd982600661440c565b9050848260028110612bed57612bed6140e6565b60200201515183612bff836000614193565b600c8110612c0f57612c0f6140e6565b6020020152848260028110612c2657612c266140e6565b60200201516020015183826001612c3d9190614193565b600c8110612c4d57612c4d6140e6565b6020020152838260028110612c6457612c646140e6565b6020020151515183612c77836002614193565b600c8110612c8757612c876140e6565b6020020152838260028110612c9e57612c9e6140e6565b6020020151516001602002015183612cb7836003614193565b600c8110612cc757612cc76140e6565b6020020152838260028110612cde57612cde6140e6565b602002015160200151600060028110612cf957612cf96140e6565b602002015183612d0a836004614193565b600c8110612d1a57612d1a6140e6565b6020020152838260028110612d3157612d316140e6565b602002015160200151600160028110612d4c57612d4c6140e6565b602002015183612d5d836005614193565b600c8110612d6d57612d6d6140e6565b60200201525080612d7d816141ab565b915050612bc3565b50612d8e613777565b60006020826101808560088cfa9151919c9115159b50909950505050505050505050565b6060600080612dc08461307e565b61ffff166001600160401b03811115612ddb57612ddb61381c565b6040519080825280601f01601f191660200182016040528015612e05576020820181803683370190505b5090506000805b825182108015612e1d575061010081105b1561262f576001811b935085841615612e64578060f81b838381518110612e4657612e466140e6565b60200101906001600160f81b031916908160001a9053508160010191505b612e6d816141ab565b9050612e0c565b60cc546001600160a01b0316158015612e9557506001600160a01b03821615155b612f175760405162461bcd60e51b815260206004820152604760248201527f5061757361626c652e5f696e697469616c697a655061757365723a205f696e6960448201527f7469616c697a6550617573657228292063616e206f6e6c792062652063616c6c6064820152666564206f6e636560c81b608482015260a4016104ff565b60cd81905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a2612f5a8261281c565b5050565b600054610100900460ff166126a65760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104ff565b609780546001600160a01b0319166001600160a01b0392909216919091179055565b600080612ff784613380565b9050808360ff166001901b116130755760405162461bcd60e51b815260206004820152603f60248201527f4269746d61705574696c732e6f72646572656442797465734172726179546f4260448201527f69746d61703a206269746d61702065786365656473206d61782076616c75650060648201526084016104ff565b90505b92915050565b6000805b82156130785761309360018461421c565b90921691806130a18161442b565b915050613082565b60408051808201909152600080825260208201526102008261ffff16106131055760405162461bcd60e51b815260206004820152601060248201526f7363616c61722d746f6f2d6c6172676560801b60448201526064016104ff565b8161ffff1660011415613119575081613078565b6040805180820190915260008082526020820181905284906001905b8161ffff168661ffff161061318257600161ffff871660ff83161c811614156131655761316284846129aa565b93505b61316f83846129aa565b92506201fffe600192831b169101613135565b509195945050505050565b604080518082019091526000808252602082015281511580156131b257506020820151155b156131d0575050604080518082019091526000808252602082015290565b604051806040016040528083600001518152602001600080516020614464833981519152846020015161320391906140fc565b61321b9060008051602061446483398151915261421c565b905292915050565b919050565b6033546001600160a01b03163314611f3a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ff565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000613075836001600160a01b03841661350d565b6000613075836001600160a01b03841661355c565b60008080600080516020614464833981519152600360008051602061446483398151915286600080516020614464833981519152888909090890506000613374827f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f5260008051602061446483398151915261364f565b91959194509092505050565b6000610100825111156134095760405162461bcd60e51b8152602060048201526044602482018190527f4269746d61705574696c732e6f72646572656442797465734172726179546f42908201527f69746d61703a206f7264657265644279746573417272617920697320746f6f206064820152636c6f6e6760e01b608482015260a4016104ff565b815161341757506000919050565b6000808360008151811061342d5761342d6140e6565b0160200151600160f89190911c81901b92505b84518110156135045784818151811061345b5761345b6140e6565b0160200151600160f89190911c1b91508282116134f05760405162461bcd60e51b815260206004820152604760248201527f4269746d61705574696c732e6f72646572656442797465734172726179546f4260448201527f69746d61703a206f72646572656442797465734172726179206973206e6f74206064820152661bdc99195c995960ca1b608482015260a4016104ff565b918117916134fd816141ab565b9050613440565b50909392505050565b600081815260018301602052604081205461355457508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155613078565b506000613078565b6000818152600183016020526040812054801561364557600061358060018361421c565b85549091506000906135949060019061421c565b90508181146135f95760008660000182815481106135b4576135b46140e6565b90600052602060002001549050808760000184815481106135d7576135d76140e6565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061360a5761360a61444d565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050613078565b6000915050613078565b60008061365a613777565b613662613795565b602080825281810181905260408201819052606082018890526080820187905260a082018690528260c08360056107d05a03fa92508280156129625750826136ec5760405162461bcd60e51b815260206004820152601a60248201527f424e3235342e6578704d6f643a2063616c6c206661696c75726500000000000060448201526064016104ff565b505195945050505050565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180604001604052806137466137b3565b81526020016137536137b3565b905290565b604051806101800160405280600c906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b6040518060c001604052806006906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b6001600160a01b038116811461051157600080fd5b6000602082840312156137f857600080fd5b8135613075816137d1565b60006020828403121561381557600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156138545761385461381c565b60405290565b60405161010081016001600160401b03811182821017156138545761385461381c565b604051606081016001600160401b03811182821017156138545761385461381c565b604051601f8201601f191681016001600160401b03811182821017156138c7576138c761381c565b604052919050565b6000604082840312156138e157600080fd5b6138e9613832565b9050813581526020820135602082015292915050565b600082601f83011261391057600080fd5b613918613832565b80604084018581111561392a57600080fd5b845b8181101561394457803584526020938401930161392c565b509095945050505050565b60006080828403121561396157600080fd5b613969613832565b905061397583836138ff565b815261398483604084016138ff565b602082015292915050565b60008060008061012085870312156139a657600080fd5b843593506139b786602087016138cf565b92506139c6866060870161394f565b91506139d58660e087016138cf565b905092959194509250565b6020808252825182820181905260009190848201906040850190845b81811015613a215783516001600160a01b0316835292840192918401916001016139fc565b50909695505050505050565b60008060008060808587031215613a4357600080fd5b8435613a4e816137d1565b9350602085013592506040850135613a65816137d1565b91506060850135613a75816137d1565b939692955090935050565b801515811461051157600080fd5b600060208284031215613aa057600080fd5b813561307581613a80565b60ff8116811461051157600080fd5b600060208284031215613acc57600080fd5b813561307581613aab565b803563ffffffff8116811461322357600080fd5b60006001600160401b03821115613b0457613b0461381c565b5060051b60200190565b600082601f830112613b1f57600080fd5b81356020613b34613b2f83613aeb565b61389f565b82815260059290921b84018101918181019086841115613b5357600080fd5b8286015b84811015613b7557613b6881613ad7565b8352918301918301613b57565b509695505050505050565b600082601f830112613b9157600080fd5b81356020613ba1613b2f83613aeb565b82815260069290921b84018101918181019086841115613bc057600080fd5b8286015b84811015613b7557613bd688826138cf565b835291830191604001613bc4565b600082601f830112613bf557600080fd5b81356020613c05613b2f83613aeb565b82815260059290921b84018101918181019086841115613c2457600080fd5b8286015b84811015613b755780356001600160401b03811115613c475760008081fd5b613c558986838b0101613b0e565b845250918301918301613c28565b60006101808284031215613c7657600080fd5b613c7e61385a565b905081356001600160401b0380821115613c9757600080fd5b613ca385838601613b0e565b83526020840135915080821115613cb957600080fd5b613cc585838601613b80565b60208401526040840135915080821115613cde57600080fd5b613cea85838601613b80565b6040840152613cfc856060860161394f565b6060840152613d0e8560e086016138cf565b6080840152610120840135915080821115613d2857600080fd5b613d3485838601613b0e565b60a0840152610140840135915080821115613d4e57600080fd5b613d5a85838601613b0e565b60c0840152610160840135915080821115613d7457600080fd5b50613d8184828501613be4565b60e08301525092915050565b600080600080600060808688031215613da557600080fd5b8535945060208601356001600160401b0380821115613dc357600080fd5b818801915088601f830112613dd757600080fd5b813581811115613de657600080fd5b896020828501011115613df857600080fd5b6020830196509450613e0c60408901613ad7565b93506060880135915080821115613e2257600080fd5b50613e2f88828901613c63565b9150509295509295909350565b600081518084526020808501945080840160005b83811015613e755781516001600160601b031687529582019590820190600101613e50565b509495945050505050565b6040815260008351604080840152613e9b6080840182613e3c565b90506020850151603f19848303016060850152613eb88282613e3c565b925050508260208301529392505050565b60006001600160401b03831115613ee257613ee261381c565b613ef5601f8401601f191660200161389f565b9050828152838383011115613f0957600080fd5b828260208301376000602084830101529392505050565b60008060408385031215613f3357600080fd5b8235613f3e816137d1565b915060208301356001600160401b0380821115613f5a57600080fd5b9084019060608287031215613f6e57600080fd5b613f7661387d565b823582811115613f8557600080fd5b83019150601f82018713613f9857600080fd5b613fa787833560208501613ec9565b815260208301356020820152604083013560408201528093505050509250929050565b600060208284031215613fdc57600080fd5b81356001600160401b03811115613ff257600080fd5b8201601f8101841361400357600080fd5b61401284823560208401613ec9565b949350505050565b60006020828403121561402c57600080fd5b8151613075816137d1565b6020808252602a908201527f6d73672e73656e646572206973206e6f74207065726d697373696f6e6564206160408201526939903ab73830bab9b2b960b11b606082015260800190565b60006020828403121561409357600080fd5b815161307581613a80565b60208082526028908201527f6d73672e73656e646572206973206e6f74207065726d697373696f6e6564206160408201526739903830bab9b2b960c11b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60008261411957634e487b7160e01b600052601260045260246000fd5b500690565b60006020828403121561413057600080fd5b5051919050565b60006020828403121561414957600080fd5b81516001600160c01b038116811461307557600080fd5b60006020828403121561417257600080fd5b815161307581613aab565b634e487b7160e01b600052601160045260246000fd5b600082198211156141a6576141a661417d565b500190565b60006000198214156141bf576141bf61417d565b5060010190565b80516001600160601b038116811461322357600080fd5b6000604082840312156141ef57600080fd5b6141f7613832565b8251614202816137d1565b8152614210602084016141c6565b60208201529392505050565b60008282101561422e5761422e61417d565b500390565b60006020828403121561424557600080fd5b815167ffffffffffffffff198116811461307557600080fd5b60006020828403121561427057600080fd5b613075826141c6565b60006001600160601b03838116908316818110156142995761429961417d565b039392505050565b63ffffffff60e01b8360e01b1681526000600482018351602080860160005b838110156142dc578151855293820193908201906001016142c0565b5092979650505050505050565b60208082526052908201527f536572766963654d616e61676572426173652e6f6e6c7952656769737472794360408201527f6f6f7264696e61746f723a2063616c6c6572206973206e6f742074686520726560608201527133b4b9ba393c9031b7b7b93234b730ba37b960711b608082015260a00190565b6000815180845260005b818110156143875760208185018101518683018201520161436b565b81811115614399576000602083870101525b50601f01601f19169290920160200192915050565b60018060a01b03831681526040602082015260008251606060408401526143d860a0840182614361565b90506020840151606084015260408401516080840152809150509392505050565b6020815260006130756020830184614361565b60008160001904831182151516156144265761442661417d565b500290565b600061ffff808316818114156144435761444361417d565b6001019392505050565b634e487b7160e01b600052603160045260246000fdfe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47424c535369676e6174757265436865636b65722e636865636b5369676e617475a26469706673582212208ca52354882c11a2474060826e69678778573cc89890934cd2366ee9fbd35dc864736f6c634300080c0033",
}

// ContractAutomationServiceManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractAutomationServiceManagerMetaData.ABI instead.
var ContractAutomationServiceManagerABI = ContractAutomationServiceManagerMetaData.ABI

// ContractAutomationServiceManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractAutomationServiceManagerMetaData.Bin instead.
var ContractAutomationServiceManagerBin = ContractAutomationServiceManagerMetaData.Bin

// DeployContractAutomationServiceManager deploys a new Ethereum contract, binding an instance of ContractAutomationServiceManager to it.
func DeployContractAutomationServiceManager(auth *bind.TransactOpts, backend bind.ContractBackend, __avsDirectory common.Address, __registryCoordinator common.Address, __stakeRegistry common.Address) (common.Address, *types.Transaction, *ContractAutomationServiceManager, error) {
	parsed, err := ContractAutomationServiceManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractAutomationServiceManagerBin), backend, __avsDirectory, __registryCoordinator, __stakeRegistry)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ContractAutomationServiceManager{ContractAutomationServiceManagerCaller: ContractAutomationServiceManagerCaller{contract: contract}, ContractAutomationServiceManagerTransactor: ContractAutomationServiceManagerTransactor{contract: contract}, ContractAutomationServiceManagerFilterer: ContractAutomationServiceManagerFilterer{contract: contract}}, nil
}

// ContractAutomationServiceManager is an auto generated Go binding around an Ethereum contract.
type ContractAutomationServiceManager struct {
	ContractAutomationServiceManagerCaller     // Read-only binding to the contract
	ContractAutomationServiceManagerTransactor // Write-only binding to the contract
	ContractAutomationServiceManagerFilterer   // Log filterer for contract events
}

// ContractAutomationServiceManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractAutomationServiceManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractAutomationServiceManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractAutomationServiceManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractAutomationServiceManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractAutomationServiceManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractAutomationServiceManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractAutomationServiceManagerSession struct {
	Contract     *ContractAutomationServiceManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                     // Call options to use throughout this session
	TransactOpts bind.TransactOpts                 // Transaction auth options to use throughout this session
}

// ContractAutomationServiceManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractAutomationServiceManagerCallerSession struct {
	Contract *ContractAutomationServiceManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                           // Call options to use throughout this session
}

// ContractAutomationServiceManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractAutomationServiceManagerTransactorSession struct {
	Contract     *ContractAutomationServiceManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                           // Transaction auth options to use throughout this session
}

// ContractAutomationServiceManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractAutomationServiceManagerRaw struct {
	Contract *ContractAutomationServiceManager // Generic contract binding to access the raw methods on
}

// ContractAutomationServiceManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractAutomationServiceManagerCallerRaw struct {
	Contract *ContractAutomationServiceManagerCaller // Generic read-only contract binding to access the raw methods on
}

// ContractAutomationServiceManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractAutomationServiceManagerTransactorRaw struct {
	Contract *ContractAutomationServiceManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContractAutomationServiceManager creates a new instance of ContractAutomationServiceManager, bound to a specific deployed contract.
func NewContractAutomationServiceManager(address common.Address, backend bind.ContractBackend) (*ContractAutomationServiceManager, error) {
	contract, err := bindContractAutomationServiceManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ContractAutomationServiceManager{ContractAutomationServiceManagerCaller: ContractAutomationServiceManagerCaller{contract: contract}, ContractAutomationServiceManagerTransactor: ContractAutomationServiceManagerTransactor{contract: contract}, ContractAutomationServiceManagerFilterer: ContractAutomationServiceManagerFilterer{contract: contract}}, nil
}

// NewContractAutomationServiceManagerCaller creates a new read-only instance of ContractAutomationServiceManager, bound to a specific deployed contract.
func NewContractAutomationServiceManagerCaller(address common.Address, caller bind.ContractCaller) (*ContractAutomationServiceManagerCaller, error) {
	contract, err := bindContractAutomationServiceManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractAutomationServiceManagerCaller{contract: contract}, nil
}

// NewContractAutomationServiceManagerTransactor creates a new write-only instance of ContractAutomationServiceManager, bound to a specific deployed contract.
func NewContractAutomationServiceManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractAutomationServiceManagerTransactor, error) {
	contract, err := bindContractAutomationServiceManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractAutomationServiceManagerTransactor{contract: contract}, nil
}

// NewContractAutomationServiceManagerFilterer creates a new log filterer instance of ContractAutomationServiceManager, bound to a specific deployed contract.
func NewContractAutomationServiceManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractAutomationServiceManagerFilterer, error) {
	contract, err := bindContractAutomationServiceManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractAutomationServiceManagerFilterer{contract: contract}, nil
}

// bindContractAutomationServiceManager binds a generic wrapper to an already deployed contract.
func bindContractAutomationServiceManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractAutomationServiceManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractAutomationServiceManager.Contract.ContractAutomationServiceManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.Contract.ContractAutomationServiceManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.Contract.ContractAutomationServiceManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractAutomationServiceManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.Contract.contract.Transact(opts, method, params...)
}

// AvsDirectory is a free data retrieval call binding the contract method 0x6b3aa72e.
//
// Solidity: function avsDirectory() view returns(address)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerCaller) AvsDirectory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractAutomationServiceManager.contract.Call(opts, &out, "avsDirectory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AvsDirectory is a free data retrieval call binding the contract method 0x6b3aa72e.
//
// Solidity: function avsDirectory() view returns(address)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerSession) AvsDirectory() (common.Address, error) {
	return _ContractAutomationServiceManager.Contract.AvsDirectory(&_ContractAutomationServiceManager.CallOpts)
}

// AvsDirectory is a free data retrieval call binding the contract method 0x6b3aa72e.
//
// Solidity: function avsDirectory() view returns(address)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerCallerSession) AvsDirectory() (common.Address, error) {
	return _ContractAutomationServiceManager.Contract.AvsDirectory(&_ContractAutomationServiceManager.CallOpts)
}

// BlsApkRegistry is a free data retrieval call binding the contract method 0x5df45946.
//
// Solidity: function blsApkRegistry() view returns(address)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerCaller) BlsApkRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractAutomationServiceManager.contract.Call(opts, &out, "blsApkRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BlsApkRegistry is a free data retrieval call binding the contract method 0x5df45946.
//
// Solidity: function blsApkRegistry() view returns(address)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerSession) BlsApkRegistry() (common.Address, error) {
	return _ContractAutomationServiceManager.Contract.BlsApkRegistry(&_ContractAutomationServiceManager.CallOpts)
}

// BlsApkRegistry is a free data retrieval call binding the contract method 0x5df45946.
//
// Solidity: function blsApkRegistry() view returns(address)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerCallerSession) BlsApkRegistry() (common.Address, error) {
	return _ContractAutomationServiceManager.Contract.BlsApkRegistry(&_ContractAutomationServiceManager.CallOpts)
}

// CheckSignatures is a free data retrieval call binding the contract method 0x6efb4636.
//
// Solidity: function checkSignatures(bytes32 msgHash, bytes quorumNumbers, uint32 referenceBlockNumber, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) params) view returns((uint96[],uint96[]), bytes32)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerCaller) CheckSignatures(opts *bind.CallOpts, msgHash [32]byte, quorumNumbers []byte, referenceBlockNumber uint32, params IBLSSignatureCheckerNonSignerStakesAndSignature) (IBLSSignatureCheckerQuorumStakeTotals, [32]byte, error) {
	var out []interface{}
	err := _ContractAutomationServiceManager.contract.Call(opts, &out, "checkSignatures", msgHash, quorumNumbers, referenceBlockNumber, params)

	if err != nil {
		return *new(IBLSSignatureCheckerQuorumStakeTotals), *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(IBLSSignatureCheckerQuorumStakeTotals)).(*IBLSSignatureCheckerQuorumStakeTotals)
	out1 := *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)

	return out0, out1, err

}

// CheckSignatures is a free data retrieval call binding the contract method 0x6efb4636.
//
// Solidity: function checkSignatures(bytes32 msgHash, bytes quorumNumbers, uint32 referenceBlockNumber, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) params) view returns((uint96[],uint96[]), bytes32)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerSession) CheckSignatures(msgHash [32]byte, quorumNumbers []byte, referenceBlockNumber uint32, params IBLSSignatureCheckerNonSignerStakesAndSignature) (IBLSSignatureCheckerQuorumStakeTotals, [32]byte, error) {
	return _ContractAutomationServiceManager.Contract.CheckSignatures(&_ContractAutomationServiceManager.CallOpts, msgHash, quorumNumbers, referenceBlockNumber, params)
}

// CheckSignatures is a free data retrieval call binding the contract method 0x6efb4636.
//
// Solidity: function checkSignatures(bytes32 msgHash, bytes quorumNumbers, uint32 referenceBlockNumber, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) params) view returns((uint96[],uint96[]), bytes32)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerCallerSession) CheckSignatures(msgHash [32]byte, quorumNumbers []byte, referenceBlockNumber uint32, params IBLSSignatureCheckerNonSignerStakesAndSignature) (IBLSSignatureCheckerQuorumStakeTotals, [32]byte, error) {
	return _ContractAutomationServiceManager.Contract.CheckSignatures(&_ContractAutomationServiceManager.CallOpts, msgHash, quorumNumbers, referenceBlockNumber, params)
}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerCaller) Delegation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractAutomationServiceManager.contract.Call(opts, &out, "delegation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerSession) Delegation() (common.Address, error) {
	return _ContractAutomationServiceManager.Contract.Delegation(&_ContractAutomationServiceManager.CallOpts)
}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerCallerSession) Delegation() (common.Address, error) {
	return _ContractAutomationServiceManager.Contract.Delegation(&_ContractAutomationServiceManager.CallOpts)
}

// GetOperatorRestakedStrategies is a free data retrieval call binding the contract method 0x33cfb7b7.
//
// Solidity: function getOperatorRestakedStrategies(address operator) view returns(address[])
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerCaller) GetOperatorRestakedStrategies(opts *bind.CallOpts, operator common.Address) ([]common.Address, error) {
	var out []interface{}
	err := _ContractAutomationServiceManager.contract.Call(opts, &out, "getOperatorRestakedStrategies", operator)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetOperatorRestakedStrategies is a free data retrieval call binding the contract method 0x33cfb7b7.
//
// Solidity: function getOperatorRestakedStrategies(address operator) view returns(address[])
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerSession) GetOperatorRestakedStrategies(operator common.Address) ([]common.Address, error) {
	return _ContractAutomationServiceManager.Contract.GetOperatorRestakedStrategies(&_ContractAutomationServiceManager.CallOpts, operator)
}

// GetOperatorRestakedStrategies is a free data retrieval call binding the contract method 0x33cfb7b7.
//
// Solidity: function getOperatorRestakedStrategies(address operator) view returns(address[])
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerCallerSession) GetOperatorRestakedStrategies(operator common.Address) ([]common.Address, error) {
	return _ContractAutomationServiceManager.Contract.GetOperatorRestakedStrategies(&_ContractAutomationServiceManager.CallOpts, operator)
}

// GetRestakeableStrategies is a free data retrieval call binding the contract method 0xe481af9d.
//
// Solidity: function getRestakeableStrategies() view returns(address[])
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerCaller) GetRestakeableStrategies(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _ContractAutomationServiceManager.contract.Call(opts, &out, "getRestakeableStrategies")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetRestakeableStrategies is a free data retrieval call binding the contract method 0xe481af9d.
//
// Solidity: function getRestakeableStrategies() view returns(address[])
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerSession) GetRestakeableStrategies() ([]common.Address, error) {
	return _ContractAutomationServiceManager.Contract.GetRestakeableStrategies(&_ContractAutomationServiceManager.CallOpts)
}

// GetRestakeableStrategies is a free data retrieval call binding the contract method 0xe481af9d.
//
// Solidity: function getRestakeableStrategies() view returns(address[])
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerCallerSession) GetRestakeableStrategies() ([]common.Address, error) {
	return _ContractAutomationServiceManager.Contract.GetRestakeableStrategies(&_ContractAutomationServiceManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractAutomationServiceManager.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerSession) Owner() (common.Address, error) {
	return _ContractAutomationServiceManager.Contract.Owner(&_ContractAutomationServiceManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerCallerSession) Owner() (common.Address, error) {
	return _ContractAutomationServiceManager.Contract.Owner(&_ContractAutomationServiceManager.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerCaller) Paused(opts *bind.CallOpts, index uint8) (bool, error) {
	var out []interface{}
	err := _ContractAutomationServiceManager.contract.Call(opts, &out, "paused", index)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerSession) Paused(index uint8) (bool, error) {
	return _ContractAutomationServiceManager.Contract.Paused(&_ContractAutomationServiceManager.CallOpts, index)
}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerCallerSession) Paused(index uint8) (bool, error) {
	return _ContractAutomationServiceManager.Contract.Paused(&_ContractAutomationServiceManager.CallOpts, index)
}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerCaller) Paused0(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ContractAutomationServiceManager.contract.Call(opts, &out, "paused0")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerSession) Paused0() (*big.Int, error) {
	return _ContractAutomationServiceManager.Contract.Paused0(&_ContractAutomationServiceManager.CallOpts)
}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerCallerSession) Paused0() (*big.Int, error) {
	return _ContractAutomationServiceManager.Contract.Paused0(&_ContractAutomationServiceManager.CallOpts)
}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerCaller) PauserRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractAutomationServiceManager.contract.Call(opts, &out, "pauserRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerSession) PauserRegistry() (common.Address, error) {
	return _ContractAutomationServiceManager.Contract.PauserRegistry(&_ContractAutomationServiceManager.CallOpts)
}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerCallerSession) PauserRegistry() (common.Address, error) {
	return _ContractAutomationServiceManager.Contract.PauserRegistry(&_ContractAutomationServiceManager.CallOpts)
}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerCaller) RegistryCoordinator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractAutomationServiceManager.contract.Call(opts, &out, "registryCoordinator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerSession) RegistryCoordinator() (common.Address, error) {
	return _ContractAutomationServiceManager.Contract.RegistryCoordinator(&_ContractAutomationServiceManager.CallOpts)
}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerCallerSession) RegistryCoordinator() (common.Address, error) {
	return _ContractAutomationServiceManager.Contract.RegistryCoordinator(&_ContractAutomationServiceManager.CallOpts)
}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerCaller) StakeRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractAutomationServiceManager.contract.Call(opts, &out, "stakeRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerSession) StakeRegistry() (common.Address, error) {
	return _ContractAutomationServiceManager.Contract.StakeRegistry(&_ContractAutomationServiceManager.CallOpts)
}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerCallerSession) StakeRegistry() (common.Address, error) {
	return _ContractAutomationServiceManager.Contract.StakeRegistry(&_ContractAutomationServiceManager.CallOpts)
}

// StaleStakesForbidden is a free data retrieval call binding the contract method 0xb98d0908.
//
// Solidity: function staleStakesForbidden() view returns(bool)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerCaller) StaleStakesForbidden(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ContractAutomationServiceManager.contract.Call(opts, &out, "staleStakesForbidden")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// StaleStakesForbidden is a free data retrieval call binding the contract method 0xb98d0908.
//
// Solidity: function staleStakesForbidden() view returns(bool)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerSession) StaleStakesForbidden() (bool, error) {
	return _ContractAutomationServiceManager.Contract.StaleStakesForbidden(&_ContractAutomationServiceManager.CallOpts)
}

// StaleStakesForbidden is a free data retrieval call binding the contract method 0xb98d0908.
//
// Solidity: function staleStakesForbidden() view returns(bool)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerCallerSession) StaleStakesForbidden() (bool, error) {
	return _ContractAutomationServiceManager.Contract.StaleStakesForbidden(&_ContractAutomationServiceManager.CallOpts)
}

// TrySignatureAndApkVerification is a free data retrieval call binding the contract method 0x171f1d5b.
//
// Solidity: function trySignatureAndApkVerification(bytes32 msgHash, (uint256,uint256) apk, (uint256[2],uint256[2]) apkG2, (uint256,uint256) sigma) view returns(bool pairingSuccessful, bool siganatureIsValid)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerCaller) TrySignatureAndApkVerification(opts *bind.CallOpts, msgHash [32]byte, apk BN254G1Point, apkG2 BN254G2Point, sigma BN254G1Point) (struct {
	PairingSuccessful bool
	SiganatureIsValid bool
}, error) {
	var out []interface{}
	err := _ContractAutomationServiceManager.contract.Call(opts, &out, "trySignatureAndApkVerification", msgHash, apk, apkG2, sigma)

	outstruct := new(struct {
		PairingSuccessful bool
		SiganatureIsValid bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.PairingSuccessful = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.SiganatureIsValid = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// TrySignatureAndApkVerification is a free data retrieval call binding the contract method 0x171f1d5b.
//
// Solidity: function trySignatureAndApkVerification(bytes32 msgHash, (uint256,uint256) apk, (uint256[2],uint256[2]) apkG2, (uint256,uint256) sigma) view returns(bool pairingSuccessful, bool siganatureIsValid)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerSession) TrySignatureAndApkVerification(msgHash [32]byte, apk BN254G1Point, apkG2 BN254G2Point, sigma BN254G1Point) (struct {
	PairingSuccessful bool
	SiganatureIsValid bool
}, error) {
	return _ContractAutomationServiceManager.Contract.TrySignatureAndApkVerification(&_ContractAutomationServiceManager.CallOpts, msgHash, apk, apkG2, sigma)
}

// TrySignatureAndApkVerification is a free data retrieval call binding the contract method 0x171f1d5b.
//
// Solidity: function trySignatureAndApkVerification(bytes32 msgHash, (uint256,uint256) apk, (uint256[2],uint256[2]) apkG2, (uint256,uint256) sigma) view returns(bool pairingSuccessful, bool siganatureIsValid)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerCallerSession) TrySignatureAndApkVerification(msgHash [32]byte, apk BN254G1Point, apkG2 BN254G2Point, sigma BN254G1Point) (struct {
	PairingSuccessful bool
	SiganatureIsValid bool
}, error) {
	return _ContractAutomationServiceManager.Contract.TrySignatureAndApkVerification(&_ContractAutomationServiceManager.CallOpts, msgHash, apk, apkG2, sigma)
}

// Whitelister is a free data retrieval call binding the contract method 0x22758a4a.
//
// Solidity: function whitelister() view returns(address)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerCaller) Whitelister(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractAutomationServiceManager.contract.Call(opts, &out, "whitelister")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Whitelister is a free data retrieval call binding the contract method 0x22758a4a.
//
// Solidity: function whitelister() view returns(address)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerSession) Whitelister() (common.Address, error) {
	return _ContractAutomationServiceManager.Contract.Whitelister(&_ContractAutomationServiceManager.CallOpts)
}

// Whitelister is a free data retrieval call binding the contract method 0x22758a4a.
//
// Solidity: function whitelister() view returns(address)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerCallerSession) Whitelister() (common.Address, error) {
	return _ContractAutomationServiceManager.Contract.Whitelister(&_ContractAutomationServiceManager.CallOpts)
}

// DeregisterOperatorFromAVS is a paid mutator transaction binding the contract method 0xa364f4da.
//
// Solidity: function deregisterOperatorFromAVS(address operator) returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerTransactor) DeregisterOperatorFromAVS(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.contract.Transact(opts, "deregisterOperatorFromAVS", operator)
}

// DeregisterOperatorFromAVS is a paid mutator transaction binding the contract method 0xa364f4da.
//
// Solidity: function deregisterOperatorFromAVS(address operator) returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerSession) DeregisterOperatorFromAVS(operator common.Address) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.Contract.DeregisterOperatorFromAVS(&_ContractAutomationServiceManager.TransactOpts, operator)
}

// DeregisterOperatorFromAVS is a paid mutator transaction binding the contract method 0xa364f4da.
//
// Solidity: function deregisterOperatorFromAVS(address operator) returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerTransactorSession) DeregisterOperatorFromAVS(operator common.Address) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.Contract.DeregisterOperatorFromAVS(&_ContractAutomationServiceManager.TransactOpts, operator)
}

// Initialize is a paid mutator transaction binding the contract method 0x358394d8.
//
// Solidity: function initialize(address _pauserRegistry, uint256 _initialPausedStatus, address _initialOwner, address _whitelister) returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerTransactor) Initialize(opts *bind.TransactOpts, _pauserRegistry common.Address, _initialPausedStatus *big.Int, _initialOwner common.Address, _whitelister common.Address) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.contract.Transact(opts, "initialize", _pauserRegistry, _initialPausedStatus, _initialOwner, _whitelister)
}

// Initialize is a paid mutator transaction binding the contract method 0x358394d8.
//
// Solidity: function initialize(address _pauserRegistry, uint256 _initialPausedStatus, address _initialOwner, address _whitelister) returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerSession) Initialize(_pauserRegistry common.Address, _initialPausedStatus *big.Int, _initialOwner common.Address, _whitelister common.Address) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.Contract.Initialize(&_ContractAutomationServiceManager.TransactOpts, _pauserRegistry, _initialPausedStatus, _initialOwner, _whitelister)
}

// Initialize is a paid mutator transaction binding the contract method 0x358394d8.
//
// Solidity: function initialize(address _pauserRegistry, uint256 _initialPausedStatus, address _initialOwner, address _whitelister) returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerTransactorSession) Initialize(_pauserRegistry common.Address, _initialPausedStatus *big.Int, _initialOwner common.Address, _whitelister common.Address) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.Contract.Initialize(&_ContractAutomationServiceManager.TransactOpts, _pauserRegistry, _initialPausedStatus, _initialOwner, _whitelister)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerTransactor) Pause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.contract.Transact(opts, "pause", newPausedStatus)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerSession) Pause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.Contract.Pause(&_ContractAutomationServiceManager.TransactOpts, newPausedStatus)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerTransactorSession) Pause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.Contract.Pause(&_ContractAutomationServiceManager.TransactOpts, newPausedStatus)
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerTransactor) PauseAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.contract.Transact(opts, "pauseAll")
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerSession) PauseAll() (*types.Transaction, error) {
	return _ContractAutomationServiceManager.Contract.PauseAll(&_ContractAutomationServiceManager.TransactOpts)
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerTransactorSession) PauseAll() (*types.Transaction, error) {
	return _ContractAutomationServiceManager.Contract.PauseAll(&_ContractAutomationServiceManager.TransactOpts)
}

// RegisterOperatorToAVS is a paid mutator transaction binding the contract method 0x9926ee7d.
//
// Solidity: function registerOperatorToAVS(address operator, (bytes,bytes32,uint256) operatorSignature) returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerTransactor) RegisterOperatorToAVS(opts *bind.TransactOpts, operator common.Address, operatorSignature ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.contract.Transact(opts, "registerOperatorToAVS", operator, operatorSignature)
}

// RegisterOperatorToAVS is a paid mutator transaction binding the contract method 0x9926ee7d.
//
// Solidity: function registerOperatorToAVS(address operator, (bytes,bytes32,uint256) operatorSignature) returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerSession) RegisterOperatorToAVS(operator common.Address, operatorSignature ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.Contract.RegisterOperatorToAVS(&_ContractAutomationServiceManager.TransactOpts, operator, operatorSignature)
}

// RegisterOperatorToAVS is a paid mutator transaction binding the contract method 0x9926ee7d.
//
// Solidity: function registerOperatorToAVS(address operator, (bytes,bytes32,uint256) operatorSignature) returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerTransactorSession) RegisterOperatorToAVS(operator common.Address, operatorSignature ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.Contract.RegisterOperatorToAVS(&_ContractAutomationServiceManager.TransactOpts, operator, operatorSignature)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerSession) RenounceOwnership() (*types.Transaction, error) {
	return _ContractAutomationServiceManager.Contract.RenounceOwnership(&_ContractAutomationServiceManager.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ContractAutomationServiceManager.Contract.RenounceOwnership(&_ContractAutomationServiceManager.TransactOpts)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerTransactor) SetPauserRegistry(opts *bind.TransactOpts, newPauserRegistry common.Address) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.contract.Transact(opts, "setPauserRegistry", newPauserRegistry)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerSession) SetPauserRegistry(newPauserRegistry common.Address) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.Contract.SetPauserRegistry(&_ContractAutomationServiceManager.TransactOpts, newPauserRegistry)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerTransactorSession) SetPauserRegistry(newPauserRegistry common.Address) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.Contract.SetPauserRegistry(&_ContractAutomationServiceManager.TransactOpts, newPauserRegistry)
}

// SetStaleStakesForbidden is a paid mutator transaction binding the contract method 0x416c7e5e.
//
// Solidity: function setStaleStakesForbidden(bool value) returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerTransactor) SetStaleStakesForbidden(opts *bind.TransactOpts, value bool) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.contract.Transact(opts, "setStaleStakesForbidden", value)
}

// SetStaleStakesForbidden is a paid mutator transaction binding the contract method 0x416c7e5e.
//
// Solidity: function setStaleStakesForbidden(bool value) returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerSession) SetStaleStakesForbidden(value bool) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.Contract.SetStaleStakesForbidden(&_ContractAutomationServiceManager.TransactOpts, value)
}

// SetStaleStakesForbidden is a paid mutator transaction binding the contract method 0x416c7e5e.
//
// Solidity: function setStaleStakesForbidden(bool value) returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerTransactorSession) SetStaleStakesForbidden(value bool) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.Contract.SetStaleStakesForbidden(&_ContractAutomationServiceManager.TransactOpts, value)
}

// SetWhitelister is a paid mutator transaction binding the contract method 0xf98f5b92.
//
// Solidity: function setWhitelister(address whitelister) returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerTransactor) SetWhitelister(opts *bind.TransactOpts, whitelister common.Address) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.contract.Transact(opts, "setWhitelister", whitelister)
}

// SetWhitelister is a paid mutator transaction binding the contract method 0xf98f5b92.
//
// Solidity: function setWhitelister(address whitelister) returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerSession) SetWhitelister(whitelister common.Address) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.Contract.SetWhitelister(&_ContractAutomationServiceManager.TransactOpts, whitelister)
}

// SetWhitelister is a paid mutator transaction binding the contract method 0xf98f5b92.
//
// Solidity: function setWhitelister(address whitelister) returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerTransactorSession) SetWhitelister(whitelister common.Address) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.Contract.SetWhitelister(&_ContractAutomationServiceManager.TransactOpts, whitelister)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.Contract.TransferOwnership(&_ContractAutomationServiceManager.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.Contract.TransferOwnership(&_ContractAutomationServiceManager.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerTransactor) Unpause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.contract.Transact(opts, "unpause", newPausedStatus)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerSession) Unpause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.Contract.Unpause(&_ContractAutomationServiceManager.TransactOpts, newPausedStatus)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerTransactorSession) Unpause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.Contract.Unpause(&_ContractAutomationServiceManager.TransactOpts, newPausedStatus)
}

// UpdateAVSMetadataURI is a paid mutator transaction binding the contract method 0xa98fb355.
//
// Solidity: function updateAVSMetadataURI(string _metadataURI) returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerTransactor) UpdateAVSMetadataURI(opts *bind.TransactOpts, _metadataURI string) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.contract.Transact(opts, "updateAVSMetadataURI", _metadataURI)
}

// UpdateAVSMetadataURI is a paid mutator transaction binding the contract method 0xa98fb355.
//
// Solidity: function updateAVSMetadataURI(string _metadataURI) returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerSession) UpdateAVSMetadataURI(_metadataURI string) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.Contract.UpdateAVSMetadataURI(&_ContractAutomationServiceManager.TransactOpts, _metadataURI)
}

// UpdateAVSMetadataURI is a paid mutator transaction binding the contract method 0xa98fb355.
//
// Solidity: function updateAVSMetadataURI(string _metadataURI) returns()
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerTransactorSession) UpdateAVSMetadataURI(_metadataURI string) (*types.Transaction, error) {
	return _ContractAutomationServiceManager.Contract.UpdateAVSMetadataURI(&_ContractAutomationServiceManager.TransactOpts, _metadataURI)
}

// ContractAutomationServiceManagerInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the ContractAutomationServiceManager contract.
type ContractAutomationServiceManagerInitializedIterator struct {
	Event *ContractAutomationServiceManagerInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractAutomationServiceManagerInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractAutomationServiceManagerInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractAutomationServiceManagerInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractAutomationServiceManagerInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractAutomationServiceManagerInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractAutomationServiceManagerInitialized represents a Initialized event raised by the ContractAutomationServiceManager contract.
type ContractAutomationServiceManagerInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerFilterer) FilterInitialized(opts *bind.FilterOpts) (*ContractAutomationServiceManagerInitializedIterator, error) {

	logs, sub, err := _ContractAutomationServiceManager.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ContractAutomationServiceManagerInitializedIterator{contract: _ContractAutomationServiceManager.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ContractAutomationServiceManagerInitialized) (event.Subscription, error) {

	logs, sub, err := _ContractAutomationServiceManager.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractAutomationServiceManagerInitialized)
				if err := _ContractAutomationServiceManager.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerFilterer) ParseInitialized(log types.Log) (*ContractAutomationServiceManagerInitialized, error) {
	event := new(ContractAutomationServiceManagerInitialized)
	if err := _ContractAutomationServiceManager.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractAutomationServiceManagerOperatorAddedIterator is returned from FilterOperatorAdded and is used to iterate over the raw logs and unpacked data for OperatorAdded events raised by the ContractAutomationServiceManager contract.
type ContractAutomationServiceManagerOperatorAddedIterator struct {
	Event *ContractAutomationServiceManagerOperatorAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractAutomationServiceManagerOperatorAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractAutomationServiceManagerOperatorAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractAutomationServiceManagerOperatorAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractAutomationServiceManagerOperatorAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractAutomationServiceManagerOperatorAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractAutomationServiceManagerOperatorAdded represents a OperatorAdded event raised by the ContractAutomationServiceManager contract.
type ContractAutomationServiceManagerOperatorAdded struct {
	Operator common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOperatorAdded is a free log retrieval operation binding the contract event 0xac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d.
//
// Solidity: event OperatorAdded(address indexed operator)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerFilterer) FilterOperatorAdded(opts *bind.FilterOpts, operator []common.Address) (*ContractAutomationServiceManagerOperatorAddedIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ContractAutomationServiceManager.contract.FilterLogs(opts, "OperatorAdded", operatorRule)
	if err != nil {
		return nil, err
	}
	return &ContractAutomationServiceManagerOperatorAddedIterator{contract: _ContractAutomationServiceManager.contract, event: "OperatorAdded", logs: logs, sub: sub}, nil
}

// WatchOperatorAdded is a free log subscription operation binding the contract event 0xac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d.
//
// Solidity: event OperatorAdded(address indexed operator)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerFilterer) WatchOperatorAdded(opts *bind.WatchOpts, sink chan<- *ContractAutomationServiceManagerOperatorAdded, operator []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ContractAutomationServiceManager.contract.WatchLogs(opts, "OperatorAdded", operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractAutomationServiceManagerOperatorAdded)
				if err := _ContractAutomationServiceManager.contract.UnpackLog(event, "OperatorAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorAdded is a log parse operation binding the contract event 0xac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d.
//
// Solidity: event OperatorAdded(address indexed operator)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerFilterer) ParseOperatorAdded(log types.Log) (*ContractAutomationServiceManagerOperatorAdded, error) {
	event := new(ContractAutomationServiceManagerOperatorAdded)
	if err := _ContractAutomationServiceManager.contract.UnpackLog(event, "OperatorAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractAutomationServiceManagerOperatorRemovedIterator is returned from FilterOperatorRemoved and is used to iterate over the raw logs and unpacked data for OperatorRemoved events raised by the ContractAutomationServiceManager contract.
type ContractAutomationServiceManagerOperatorRemovedIterator struct {
	Event *ContractAutomationServiceManagerOperatorRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractAutomationServiceManagerOperatorRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractAutomationServiceManagerOperatorRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractAutomationServiceManagerOperatorRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractAutomationServiceManagerOperatorRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractAutomationServiceManagerOperatorRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractAutomationServiceManagerOperatorRemoved represents a OperatorRemoved event raised by the ContractAutomationServiceManager contract.
type ContractAutomationServiceManagerOperatorRemoved struct {
	Operator common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOperatorRemoved is a free log retrieval operation binding the contract event 0x80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d.
//
// Solidity: event OperatorRemoved(address indexed operator)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerFilterer) FilterOperatorRemoved(opts *bind.FilterOpts, operator []common.Address) (*ContractAutomationServiceManagerOperatorRemovedIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ContractAutomationServiceManager.contract.FilterLogs(opts, "OperatorRemoved", operatorRule)
	if err != nil {
		return nil, err
	}
	return &ContractAutomationServiceManagerOperatorRemovedIterator{contract: _ContractAutomationServiceManager.contract, event: "OperatorRemoved", logs: logs, sub: sub}, nil
}

// WatchOperatorRemoved is a free log subscription operation binding the contract event 0x80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d.
//
// Solidity: event OperatorRemoved(address indexed operator)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerFilterer) WatchOperatorRemoved(opts *bind.WatchOpts, sink chan<- *ContractAutomationServiceManagerOperatorRemoved, operator []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ContractAutomationServiceManager.contract.WatchLogs(opts, "OperatorRemoved", operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractAutomationServiceManagerOperatorRemoved)
				if err := _ContractAutomationServiceManager.contract.UnpackLog(event, "OperatorRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorRemoved is a log parse operation binding the contract event 0x80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d.
//
// Solidity: event OperatorRemoved(address indexed operator)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerFilterer) ParseOperatorRemoved(log types.Log) (*ContractAutomationServiceManagerOperatorRemoved, error) {
	event := new(ContractAutomationServiceManagerOperatorRemoved)
	if err := _ContractAutomationServiceManager.contract.UnpackLog(event, "OperatorRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractAutomationServiceManagerOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ContractAutomationServiceManager contract.
type ContractAutomationServiceManagerOwnershipTransferredIterator struct {
	Event *ContractAutomationServiceManagerOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractAutomationServiceManagerOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractAutomationServiceManagerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractAutomationServiceManagerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractAutomationServiceManagerOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractAutomationServiceManagerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractAutomationServiceManagerOwnershipTransferred represents a OwnershipTransferred event raised by the ContractAutomationServiceManager contract.
type ContractAutomationServiceManagerOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ContractAutomationServiceManagerOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ContractAutomationServiceManager.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ContractAutomationServiceManagerOwnershipTransferredIterator{contract: _ContractAutomationServiceManager.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ContractAutomationServiceManagerOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ContractAutomationServiceManager.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractAutomationServiceManagerOwnershipTransferred)
				if err := _ContractAutomationServiceManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerFilterer) ParseOwnershipTransferred(log types.Log) (*ContractAutomationServiceManagerOwnershipTransferred, error) {
	event := new(ContractAutomationServiceManagerOwnershipTransferred)
	if err := _ContractAutomationServiceManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractAutomationServiceManagerPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the ContractAutomationServiceManager contract.
type ContractAutomationServiceManagerPausedIterator struct {
	Event *ContractAutomationServiceManagerPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractAutomationServiceManagerPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractAutomationServiceManagerPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractAutomationServiceManagerPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractAutomationServiceManagerPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractAutomationServiceManagerPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractAutomationServiceManagerPaused represents a Paused event raised by the ContractAutomationServiceManager contract.
type ContractAutomationServiceManagerPaused struct {
	Account         common.Address
	NewPausedStatus *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerFilterer) FilterPaused(opts *bind.FilterOpts, account []common.Address) (*ContractAutomationServiceManagerPausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractAutomationServiceManager.contract.FilterLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return &ContractAutomationServiceManagerPausedIterator{contract: _ContractAutomationServiceManager.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ContractAutomationServiceManagerPaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractAutomationServiceManager.contract.WatchLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractAutomationServiceManagerPaused)
				if err := _ContractAutomationServiceManager.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerFilterer) ParsePaused(log types.Log) (*ContractAutomationServiceManagerPaused, error) {
	event := new(ContractAutomationServiceManagerPaused)
	if err := _ContractAutomationServiceManager.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractAutomationServiceManagerPauserRegistrySetIterator is returned from FilterPauserRegistrySet and is used to iterate over the raw logs and unpacked data for PauserRegistrySet events raised by the ContractAutomationServiceManager contract.
type ContractAutomationServiceManagerPauserRegistrySetIterator struct {
	Event *ContractAutomationServiceManagerPauserRegistrySet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractAutomationServiceManagerPauserRegistrySetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractAutomationServiceManagerPauserRegistrySet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractAutomationServiceManagerPauserRegistrySet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractAutomationServiceManagerPauserRegistrySetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractAutomationServiceManagerPauserRegistrySetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractAutomationServiceManagerPauserRegistrySet represents a PauserRegistrySet event raised by the ContractAutomationServiceManager contract.
type ContractAutomationServiceManagerPauserRegistrySet struct {
	PauserRegistry    common.Address
	NewPauserRegistry common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterPauserRegistrySet is a free log retrieval operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerFilterer) FilterPauserRegistrySet(opts *bind.FilterOpts) (*ContractAutomationServiceManagerPauserRegistrySetIterator, error) {

	logs, sub, err := _ContractAutomationServiceManager.contract.FilterLogs(opts, "PauserRegistrySet")
	if err != nil {
		return nil, err
	}
	return &ContractAutomationServiceManagerPauserRegistrySetIterator{contract: _ContractAutomationServiceManager.contract, event: "PauserRegistrySet", logs: logs, sub: sub}, nil
}

// WatchPauserRegistrySet is a free log subscription operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerFilterer) WatchPauserRegistrySet(opts *bind.WatchOpts, sink chan<- *ContractAutomationServiceManagerPauserRegistrySet) (event.Subscription, error) {

	logs, sub, err := _ContractAutomationServiceManager.contract.WatchLogs(opts, "PauserRegistrySet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractAutomationServiceManagerPauserRegistrySet)
				if err := _ContractAutomationServiceManager.contract.UnpackLog(event, "PauserRegistrySet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePauserRegistrySet is a log parse operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerFilterer) ParsePauserRegistrySet(log types.Log) (*ContractAutomationServiceManagerPauserRegistrySet, error) {
	event := new(ContractAutomationServiceManagerPauserRegistrySet)
	if err := _ContractAutomationServiceManager.contract.UnpackLog(event, "PauserRegistrySet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractAutomationServiceManagerStaleStakesForbiddenUpdateIterator is returned from FilterStaleStakesForbiddenUpdate and is used to iterate over the raw logs and unpacked data for StaleStakesForbiddenUpdate events raised by the ContractAutomationServiceManager contract.
type ContractAutomationServiceManagerStaleStakesForbiddenUpdateIterator struct {
	Event *ContractAutomationServiceManagerStaleStakesForbiddenUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractAutomationServiceManagerStaleStakesForbiddenUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractAutomationServiceManagerStaleStakesForbiddenUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractAutomationServiceManagerStaleStakesForbiddenUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractAutomationServiceManagerStaleStakesForbiddenUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractAutomationServiceManagerStaleStakesForbiddenUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractAutomationServiceManagerStaleStakesForbiddenUpdate represents a StaleStakesForbiddenUpdate event raised by the ContractAutomationServiceManager contract.
type ContractAutomationServiceManagerStaleStakesForbiddenUpdate struct {
	Value bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterStaleStakesForbiddenUpdate is a free log retrieval operation binding the contract event 0x40e4ed880a29e0f6ddce307457fb75cddf4feef7d3ecb0301bfdf4976a0e2dfc.
//
// Solidity: event StaleStakesForbiddenUpdate(bool value)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerFilterer) FilterStaleStakesForbiddenUpdate(opts *bind.FilterOpts) (*ContractAutomationServiceManagerStaleStakesForbiddenUpdateIterator, error) {

	logs, sub, err := _ContractAutomationServiceManager.contract.FilterLogs(opts, "StaleStakesForbiddenUpdate")
	if err != nil {
		return nil, err
	}
	return &ContractAutomationServiceManagerStaleStakesForbiddenUpdateIterator{contract: _ContractAutomationServiceManager.contract, event: "StaleStakesForbiddenUpdate", logs: logs, sub: sub}, nil
}

// WatchStaleStakesForbiddenUpdate is a free log subscription operation binding the contract event 0x40e4ed880a29e0f6ddce307457fb75cddf4feef7d3ecb0301bfdf4976a0e2dfc.
//
// Solidity: event StaleStakesForbiddenUpdate(bool value)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerFilterer) WatchStaleStakesForbiddenUpdate(opts *bind.WatchOpts, sink chan<- *ContractAutomationServiceManagerStaleStakesForbiddenUpdate) (event.Subscription, error) {

	logs, sub, err := _ContractAutomationServiceManager.contract.WatchLogs(opts, "StaleStakesForbiddenUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractAutomationServiceManagerStaleStakesForbiddenUpdate)
				if err := _ContractAutomationServiceManager.contract.UnpackLog(event, "StaleStakesForbiddenUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStaleStakesForbiddenUpdate is a log parse operation binding the contract event 0x40e4ed880a29e0f6ddce307457fb75cddf4feef7d3ecb0301bfdf4976a0e2dfc.
//
// Solidity: event StaleStakesForbiddenUpdate(bool value)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerFilterer) ParseStaleStakesForbiddenUpdate(log types.Log) (*ContractAutomationServiceManagerStaleStakesForbiddenUpdate, error) {
	event := new(ContractAutomationServiceManagerStaleStakesForbiddenUpdate)
	if err := _ContractAutomationServiceManager.contract.UnpackLog(event, "StaleStakesForbiddenUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractAutomationServiceManagerUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the ContractAutomationServiceManager contract.
type ContractAutomationServiceManagerUnpausedIterator struct {
	Event *ContractAutomationServiceManagerUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractAutomationServiceManagerUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractAutomationServiceManagerUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractAutomationServiceManagerUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractAutomationServiceManagerUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractAutomationServiceManagerUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractAutomationServiceManagerUnpaused represents a Unpaused event raised by the ContractAutomationServiceManager contract.
type ContractAutomationServiceManagerUnpaused struct {
	Account         common.Address
	NewPausedStatus *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerFilterer) FilterUnpaused(opts *bind.FilterOpts, account []common.Address) (*ContractAutomationServiceManagerUnpausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractAutomationServiceManager.contract.FilterLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return &ContractAutomationServiceManagerUnpausedIterator{contract: _ContractAutomationServiceManager.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ContractAutomationServiceManagerUnpaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractAutomationServiceManager.contract.WatchLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractAutomationServiceManagerUnpaused)
				if err := _ContractAutomationServiceManager.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_ContractAutomationServiceManager *ContractAutomationServiceManagerFilterer) ParseUnpaused(log types.Log) (*ContractAutomationServiceManagerUnpaused, error) {
	event := new(ContractAutomationServiceManagerUnpaused)
	if err := _ContractAutomationServiceManager.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
